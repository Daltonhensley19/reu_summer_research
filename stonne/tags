!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/dalton/desktop/stonne/stonne/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
$(BIN)	Makefile	/^$(BIN): $(OBJSDIR) $(OBJS)$/;"	t
$(OBJSDIR)	Makefile	/^$(OBJSDIR):$/;"	t
$(OBJSDIR)/%.o	Makefile	/^$(OBJSDIR)\/%.o: src\/%.cpp $(INCLUDES)$/;"	t
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:0.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:1.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:10.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:11.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:12.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:13.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:14.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:15.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:16.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:17.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:18.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:19.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:2.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:20.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:21.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:22.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:23.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:24.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:25.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:26.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:27.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:28.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:29.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:3.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:30.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:31.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:32.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:33.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:34.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:35.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:4.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:5.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:6.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:7.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:8.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:9.arguments
0	compile_commands.json	/^  {$/;"	o
1	compile_commands.json	/^      "-O3",$/;"	s	array:0.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:1.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:10.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:11.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:12.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:13.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:14.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:15.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:16.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:17.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:18.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:19.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:2.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:20.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:21.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:22.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:23.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:24.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:25.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:26.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:27.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:28.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:29.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:3.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:30.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:31.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:32.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:33.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:34.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:35.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:4.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:5.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:6.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:7.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:8.arguments
1	compile_commands.json	/^      "-O3",$/;"	s	array:9.arguments
1	compile_commands.json	/^  {$/;"	o
10	compile_commands.json	/^  {$/;"	o
11	compile_commands.json	/^  {$/;"	o
12	compile_commands.json	/^  {$/;"	o
13	compile_commands.json	/^  {$/;"	o
14	compile_commands.json	/^  {$/;"	o
15	compile_commands.json	/^  {$/;"	o
16	compile_commands.json	/^  {$/;"	o
17	compile_commands.json	/^  {$/;"	o
18	compile_commands.json	/^  {$/;"	o
19	compile_commands.json	/^  {$/;"	o
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:0.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:1.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:10.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:11.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:12.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:13.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:14.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:15.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:16.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:17.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:18.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:19.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:2.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:20.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:21.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:22.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:23.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:24.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:25.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:26.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:27.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:28.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:29.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:3.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:30.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:31.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:32.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:33.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:34.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:35.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:4.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:5.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:6.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:7.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:8.arguments
2	compile_commands.json	/^      "-Iinclude\/",$/;"	s	array:9.arguments
2	compile_commands.json	/^  {$/;"	o
20	compile_commands.json	/^  {$/;"	o
21	compile_commands.json	/^  {$/;"	o
22	compile_commands.json	/^  {$/;"	o
23	compile_commands.json	/^  {$/;"	o
24	compile_commands.json	/^  {$/;"	o
25	compile_commands.json	/^  {$/;"	o
26	compile_commands.json	/^  {$/;"	o
27	compile_commands.json	/^  {$/;"	o
28	compile_commands.json	/^  {$/;"	o
29	compile_commands.json	/^  {$/;"	o
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:0.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:1.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:10.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:11.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:12.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:13.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:14.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:15.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:16.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:17.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:18.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:19.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:2.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:20.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:21.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:22.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:23.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:24.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:25.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:26.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:27.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:28.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:29.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:3.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:30.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:31.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:32.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:33.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:34.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:35.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:4.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:5.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:6.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:7.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:8.arguments
3	compile_commands.json	/^      "-Iexternal\/",$/;"	s	array:9.arguments
3	compile_commands.json	/^  {$/;"	o
30	compile_commands.json	/^  {$/;"	o
31	compile_commands.json	/^  {$/;"	o
32	compile_commands.json	/^  {$/;"	o
33	compile_commands.json	/^  {$/;"	o
34	compile_commands.json	/^  {$/;"	o
35	compile_commands.json	/^  {$/;"	o
4	compile_commands.json	/^      "-c",$/;"	s	array:0.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:1.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:10.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:11.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:12.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:13.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:14.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:15.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:16.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:17.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:18.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:19.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:2.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:20.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:21.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:22.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:23.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:24.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:25.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:26.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:27.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:28.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:29.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:3.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:30.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:31.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:32.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:33.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:34.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:35.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:4.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:5.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:6.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:7.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:8.arguments
4	compile_commands.json	/^      "-c",$/;"	s	array:9.arguments
4	compile_commands.json	/^  {$/;"	o
5	compile_commands.json	/^      "-o",$/;"	s	array:0.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:1.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:10.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:11.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:12.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:13.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:14.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:15.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:16.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:17.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:18.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:19.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:2.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:20.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:21.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:22.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:23.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:24.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:25.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:26.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:27.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:28.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:29.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:3.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:30.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:31.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:32.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:33.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:34.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:35.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:4.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:5.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:6.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:7.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:8.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:9.arguments
5	compile_commands.json	/^  {$/;"	o
6	compile_commands.json	/^      "objs\/ASNetwork.o",$/;"	s	array:2.arguments
6	compile_commands.json	/^      "objs\/ASwitch.o",$/;"	s	array:3.arguments
6	compile_commands.json	/^      "objs\/AccumulationBuffer.o",$/;"	s	array:0.arguments
6	compile_commands.json	/^      "objs\/Accumulator.o",$/;"	s	array:1.arguments
6	compile_commands.json	/^      "objs\/CollectionBus.o",$/;"	s	array:4.arguments
6	compile_commands.json	/^      "objs\/CollectionBusLine.o",$/;"	s	array:5.arguments
6	compile_commands.json	/^      "objs\/CompilerART.o",$/;"	s	array:6.arguments
6	compile_commands.json	/^      "objs\/CompilerFEN.o",$/;"	s	array:7.arguments
6	compile_commands.json	/^      "objs\/CompilerMSN.o",$/;"	s	array:8.arguments
6	compile_commands.json	/^      "objs\/CompilerMultiplierMesh.o",$/;"	s	array:9.arguments
6	compile_commands.json	/^      "objs\/Config.o",$/;"	s	array:10.arguments
6	compile_commands.json	/^      "objs\/Connection.o",$/;"	s	array:11.arguments
6	compile_commands.json	/^      "objs\/DNNLayer.o",$/;"	s	array:13.arguments
6	compile_commands.json	/^      "objs\/DNNModel.o",$/;"	s	array:14.arguments
6	compile_commands.json	/^      "objs\/DSNetwork.o",$/;"	s	array:15.arguments
6	compile_commands.json	/^      "objs\/DSNetworkTop.o",$/;"	s	array:16.arguments
6	compile_commands.json	/^      "objs\/DSwitch.o",$/;"	s	array:17.arguments
6	compile_commands.json	/^      "objs\/DataPackage.o",$/;"	s	array:12.arguments
6	compile_commands.json	/^      "objs\/FEASwitch.o",$/;"	s	array:18.arguments
6	compile_commands.json	/^      "objs\/FENetwork.o",$/;"	s	array:19.arguments
6	compile_commands.json	/^      "objs\/Fifo.o",$/;"	s	array:20.arguments
6	compile_commands.json	/^      "objs\/LookupTable.o",$/;"	s	array:21.arguments
6	compile_commands.json	/^      "objs\/MSNetwork.o",$/;"	s	array:23.arguments
6	compile_commands.json	/^      "objs\/MSwitch.o",$/;"	s	array:24.arguments
6	compile_commands.json	/^      "objs\/MultiplierOS.o",$/;"	s	array:25.arguments
6	compile_commands.json	/^      "objs\/OSMeshMN.o",$/;"	s	array:26.arguments
6	compile_commands.json	/^      "objs\/OSMeshSDMemory.o",$/;"	s	array:27.arguments
6	compile_commands.json	/^      "objs\/SDMemory.o",$/;"	s	array:28.arguments
6	compile_commands.json	/^      "objs\/STONNEModel.o",$/;"	s	array:31.arguments
6	compile_commands.json	/^      "objs\/SparseSDMemory.o",$/;"	s	array:29.arguments
6	compile_commands.json	/^      "objs\/Stats.o",$/;"	s	array:30.arguments
6	compile_commands.json	/^      "objs\/TemporalRN.o",$/;"	s	array:32.arguments
6	compile_commands.json	/^      "objs\/Tile.o",$/;"	s	array:34.arguments
6	compile_commands.json	/^      "objs\/main.o",$/;"	s	array:22.arguments
6	compile_commands.json	/^      "objs\/testbench.o",$/;"	s	array:33.arguments
6	compile_commands.json	/^      "objs\/utility.o",$/;"	s	array:35.arguments
6	compile_commands.json	/^  {$/;"	o
7	compile_commands.json	/^      "src\/ASNetwork.cpp"$/;"	s	array:2.arguments
7	compile_commands.json	/^      "src\/ASwitch.cpp"$/;"	s	array:3.arguments
7	compile_commands.json	/^      "src\/AccumulationBuffer.cpp"$/;"	s	array:0.arguments
7	compile_commands.json	/^      "src\/Accumulator.cpp"$/;"	s	array:1.arguments
7	compile_commands.json	/^      "src\/CollectionBus.cpp"$/;"	s	array:4.arguments
7	compile_commands.json	/^      "src\/CollectionBusLine.cpp"$/;"	s	array:5.arguments
7	compile_commands.json	/^      "src\/CompilerART.cpp"$/;"	s	array:6.arguments
7	compile_commands.json	/^      "src\/CompilerFEN.cpp"$/;"	s	array:7.arguments
7	compile_commands.json	/^      "src\/CompilerMSN.cpp"$/;"	s	array:8.arguments
7	compile_commands.json	/^      "src\/CompilerMultiplierMesh.cpp"$/;"	s	array:9.arguments
7	compile_commands.json	/^      "src\/Config.cpp"$/;"	s	array:10.arguments
7	compile_commands.json	/^      "src\/Connection.cpp"$/;"	s	array:11.arguments
7	compile_commands.json	/^      "src\/DNNLayer.cpp"$/;"	s	array:13.arguments
7	compile_commands.json	/^      "src\/DNNModel.cpp"$/;"	s	array:14.arguments
7	compile_commands.json	/^      "src\/DSNetwork.cpp"$/;"	s	array:15.arguments
7	compile_commands.json	/^      "src\/DSNetworkTop.cpp"$/;"	s	array:16.arguments
7	compile_commands.json	/^      "src\/DSwitch.cpp"$/;"	s	array:17.arguments
7	compile_commands.json	/^      "src\/DataPackage.cpp"$/;"	s	array:12.arguments
7	compile_commands.json	/^      "src\/FEASwitch.cpp"$/;"	s	array:18.arguments
7	compile_commands.json	/^      "src\/FENetwork.cpp"$/;"	s	array:19.arguments
7	compile_commands.json	/^      "src\/Fifo.cpp"$/;"	s	array:20.arguments
7	compile_commands.json	/^      "src\/LookupTable.cpp"$/;"	s	array:21.arguments
7	compile_commands.json	/^      "src\/MSNetwork.cpp"$/;"	s	array:23.arguments
7	compile_commands.json	/^      "src\/MSwitch.cpp"$/;"	s	array:24.arguments
7	compile_commands.json	/^      "src\/MultiplierOS.cpp"$/;"	s	array:25.arguments
7	compile_commands.json	/^      "src\/OSMeshMN.cpp"$/;"	s	array:26.arguments
7	compile_commands.json	/^      "src\/OSMeshSDMemory.cpp"$/;"	s	array:27.arguments
7	compile_commands.json	/^      "src\/SDMemory.cpp"$/;"	s	array:28.arguments
7	compile_commands.json	/^      "src\/STONNEModel.cpp"$/;"	s	array:31.arguments
7	compile_commands.json	/^      "src\/SparseSDMemory.cpp"$/;"	s	array:29.arguments
7	compile_commands.json	/^      "src\/Stats.cpp"$/;"	s	array:30.arguments
7	compile_commands.json	/^      "src\/TemporalRN.cpp"$/;"	s	array:32.arguments
7	compile_commands.json	/^      "src\/Tile.cpp"$/;"	s	array:34.arguments
7	compile_commands.json	/^      "src\/main.cpp"$/;"	s	array:22.arguments
7	compile_commands.json	/^      "src\/testbench.cpp"$/;"	s	array:33.arguments
7	compile_commands.json	/^      "src\/utility.cpp"$/;"	s	array:35.arguments
7	compile_commands.json	/^  {$/;"	o
8	compile_commands.json	/^  {$/;"	o
9	compile_commands.json	/^  {$/;"	o
ADDER	include/types.h	/^enum adderoperation_t {ADDER, COMPARATOR, MULTIPLIER, NOP};$/;"	e	enum:adderoperation_t
ADD_1_1_PLUS_FW_1_1	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	e	enum:adderconfig_t
ADD_2_1	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	e	enum:adderconfig_t
ADD_3_1	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	e	enum:adderconfig_t
ALL_DATA_SENT	include/types.h	/^enum SparsityControllerState{CONFIGURING, DIST_STA_MATRIX, DIST_STR_MATRIX, WAITING_FOR_NEXT_STA/;"	e	enum:SparsityControllerState
ARRAY	external/cpptoml.h	/^        ARRAY,$/;"	e	enum:cpptoml::parser::parse_type
ARRAY	external/cpptoml.h	/^    ARRAY,$/;"	e	enum:cpptoml::base_type
ASNETWORK	include/types.h	/^enum ReduceNetwork_t{ASNETWORK, FENETWORK, TEMPORALRN};$/;"	e	enum:ReduceNetwork_t
ASNetwork	include/ASNetwork.h	/^class ASNetwork : public ReduceNetwork {$/;"	c
ASNetwork	src/ASNetwork.cpp	/^ASNetwork::ASNetwork(id_t id, std::string name, Config stonne_cfg, Connection* outputConnection)/;"	f	class:ASNetwork
ASNetworkConfig	include/Config.h	/^class ASNetworkConfig {$/;"	c
ASwitch	include/ASwitch.h	/^class ASwitch : public Unit {$/;"	c
ASwitch	src/ASwitch.cpp	/^ASwitch::ASwitch(id_t id,$/;"	f	class:ASwitch
ASwitchConfig	include/Config.h	/^class ASwitchConfig {$/;"	c
ASwitchStats	include/Stats.h	/^class ASwitchStats: public Stats {$/;"	c
ASwitchStats	src/Stats.cpp	/^ASwitchStats::ASwitchStats() {$/;"	f	class:ASwitchStats
AccumulationBuffer	include/AccumulationBuffer.h	/^class AccumulationBuffer : public Unit {$/;"	c
AccumulationBuffer	src/AccumulationBuffer.cpp	/^AccumulationBuffer::AccumulationBuffer(id_t id, std::string name, Config stonne_cfg, unsigned in/;"	f	class:AccumulationBuffer
Accumulator	include/Accumulator.h	/^class Accumulator : public Unit {$/;"	c
Accumulator	src/Accumulator.cpp	/^Accumulator::Accumulator(id_t id, std::string name, Config stonne_cfg, unsigned int n_accumulato/;"	f	class:Accumulator
AccumulatorStats	include/Stats.h	/^class AccumulatorStats: public Stats {$/;"	c
AccumulatorStats	src/Stats.cpp	/^AccumulatorStats::AccumulatorStats() {$/;"	f	class:AccumulatorStats
Add	include/define.h	/^  Add = 0,$/;"	e	enum:Opcode
Add_fowd	include/define.h	/^  Add_fowd = 2,$/;"	e	enum:Opcode
BIN	Makefile	/^BIN=stonne$/;"	m
BOOL	external/cpptoml.h	/^        BOOL,$/;"	e	enum:cpptoml::parser::parse_type
BOOL	external/cpptoml.h	/^    BOOL,$/;"	e	enum:cpptoml::base_type
BROADCAST	include/types.h	/^enum traffic_t {BROADCAST, MULTICAST, UNICAST};$/;"	e	enum:traffic_t
Bus	include/CollectionBus.h	/^class Bus : public Unit {$/;"	c
Bus	src/CollectionBus.cpp	/^Bus::Bus(id_t id, std::string name, Config stonne_cfg) : Unit(id, name) {$/;"	f	class:Bus
BusMemoryConnections	include/STONNEModel.h	/^    Connection** BusMemoryConnections; \/\/Array of output Connections between the bus and the m/;"	m	class:Stonne	typeref:typename:Connection **
C	include/DNNLayer.h	/^    unsigned int C;           \/\/ Number of filter and input channels$/;"	m	class:DNNLayer	typeref:typename:unsigned int
CNNFilter	include/DNNModel.h	/^  CNNFilter() {}$/;"	f	class:CNNFilter
CNNFilter	include/DNNModel.h	/^class CNNFilter {$/;"	c
CNNInput	include/DNNModel.h	/^  CNNInput() {}$/;"	f	class:CNNInput
CNNInput	include/DNNModel.h	/^class CNNInput {$/;"	c
CNNOutput	include/DNNModel.h	/^  CNNOutput() {}$/;"	f	class:CNNOutput
CNNOutput	include/DNNModel.h	/^class CNNOutput {$/;"	c
CNN_DATAFLOW	include/types.h	/^enum Dataflow{CNN_DATAFLOW, MK_STA_KN_STR, MK_STR_KN_STA, SPARSE_DENSE_DATAFLOW};$/;"	e	enum:Dataflow
COMPARATOR	include/types.h	/^enum adderoperation_t {ADDER, COMPARATOR, MULTIPLIER, NOP};$/;"	e	enum:adderoperation_t
CONFIGURING	include/types.h	/^enum SparsityControllerState{CONFIGURING, DIST_STA_MATRIX, DIST_STR_MATRIX, WAITING_FOR_NEXT_STA/;"	e	enum:SparsityControllerState
CONNECTIONS_PER_SWITCH	include/ASNetwork.h	/^#define CONNECTIONS_PER_SWITCH /;"	d
CONNECTIONS_PER_SWITCH	include/DSNetwork.h	/^#define CONNECTIONS_PER_SWITCH /;"	d
CONNECTIONS_PER_SWITCH	include/FENetwork.h	/^#define CONNECTIONS_PER_SWITCH /;"	d
CONV	include/types.h	/^enum Layer_t{CONV, POOL, FC, GEMM, SPARSE_DENSE};$/;"	e	enum:Layer_t
CPPTOML_DEPRECATED	external/cpptoml.h	/^#define CPPTOML_DEPRECATED(/;"	d
CPPTOML_H	external/cpptoml.h	/^#define CPPTOML_H$/;"	d
CXX	Makefile	/^CXX=g++$/;"	m
CollectionBusLine	include/CollectionBusLine.h	/^class CollectionBusLine : public Unit {$/;"	c
CollectionBusLine	src/CollectionBusLine.cpp	/^CollectionBusLine::CollectionBusLine(id_t id, std::string name, unsigned int busID, unsigned int/;"	f	class:CollectionBusLine
CollectionBusLineStats	include/Stats.h	/^class CollectionBusLineStats : public Stats {$/;"	c
CollectionBusLineStats	src/Stats.cpp	/^CollectionBusLineStats::CollectionBusLineStats() {$/;"	f	class:CollectionBusLineStats
Compare	include/define.h	/^  Compare = 1,$/;"	e	enum:Opcode
CompilerART	include/CompilerART.h	/^    CompilerART() {$/;"	f	class:CompilerART
CompilerART	include/CompilerART.h	/^class CompilerART : public CompilerComponent {$/;"	c
CompilerComponent	include/CompilerComponent.h	/^    CompilerComponent() {$/;"	f	class:CompilerComponent
CompilerComponent	include/CompilerComponent.h	/^class CompilerComponent {$/;"	c
CompilerFEN	include/CompilerFEN.h	/^    CompilerFEN() {$/;"	f	class:CompilerFEN
CompilerFEN	include/CompilerFEN.h	/^class CompilerFEN : public CompilerComponent {$/;"	c
CompilerMSN	include/CompilerMSN.h	/^    CompilerMSN() {$/;"	f	class:CompilerMSN
CompilerMSN	include/CompilerMSN.h	/^class CompilerMSN : public CompilerComponent{$/;"	c
CompilerMultiplierMesh	include/CompilerMultiplierMesh.h	/^    CompilerMultiplierMesh() {$/;"	f	class:CompilerMultiplierMesh
CompilerMultiplierMesh	include/CompilerMultiplierMesh.h	/^class CompilerMultiplierMesh : public CompilerComponent{$/;"	c
Component	include/Component.h	/^    Component(id_t id, const string& componentName) {$/;"	f	class:Component
Component	include/Component.h	/^class Component {$/;"	c
Config	include/Config.h	/^class Config {$/;"	c
Config	src/Config.cpp	/^Config::Config() {$/;"	f	class:Config
ConfigType	include/define.h	/^enum ConfigType {$/;"	g
Connection	include/Connection.h	/^class Connection {$/;"	c
Connection	src/Connection.cpp	/^Connection::Connection(int bw) { \/\/Constructor$/;"	f	class:Connection
ConnectionStats	include/Stats.h	/^class ConnectionStats : public Stats {$/;"	c
ConnectionStats	src/Stats.cpp	/^ConnectionStats::ConnectionStats() {$/;"	f	class:ConnectionStats
Cpush	include/define.h	/^  Cpush = 6,$/;"	e	enum:Opcode
DEFINE_H_	include/define.h	/^#define DEFINE_H_$/;"	d
DIST_STA_MATRIX	include/types.h	/^enum SparsityControllerState{CONFIGURING, DIST_STA_MATRIX, DIST_STR_MATRIX, WAITING_FOR_NEXT_STA/;"	e	enum:SparsityControllerState
DIST_STR_MATRIX	include/types.h	/^enum SparsityControllerState{CONFIGURING, DIST_STA_MATRIX, DIST_STR_MATRIX, WAITING_FOR_NEXT_STA/;"	e	enum:SparsityControllerState
DNNLayer	include/DNNLayer.h	/^class DNNLayer {$/;"	c
DNNLayer	src/DNNLayer.cpp	/^DNNLayer::DNNLayer(Layer_t layer_type, std::string layer_name, unsigned int R, unsigned int S, u/;"	f	class:DNNLayer
DNNMODEL_H_	include/DNNModel.h	/^#define DNNMODEL_H_$/;"	d
DNNModel	include/DNNModel.h	/^  DNNModel() {$/;"	f	class:DNNModel
DNNModel	include/DNNModel.h	/^class DNNModel {$/;"	c
DN_WIRE	include/types.h	/^enum WIRE_TYPE{RN_WIRE, MN_WIRE, DN_WIRE};$/;"	e	enum:WIRE_TYPE
DSNetwork	include/DSNetwork.h	/^class DSNetwork : public Unit{$/;"	c
DSNetwork	src/DSNetwork.cpp	/^DSNetwork::DSNetwork(id_t id, std::string name, Config stonne_cfg, unsigned int ms_size, Connect/;"	f	class:DSNetwork
DSNetworkConfig	include/Config.h	/^class DSNetworkConfig {$/;"	c
DSNetworkTop	include/DSNetworkTop.h	/^class DSNetworkTop : public DistributionNetwork {$/;"	c
DSNetworkTop	src/DSNetworkTop.cpp	/^DSNetworkTop::DSNetworkTop(id_t id, std::string name, Config stonne_cfg) : DistributionNetwork(i/;"	f	class:DSNetworkTop
DSwitch	include/DSwitch.h	/^class DSwitch : public Unit{$/;"	c
DSwitch	src/DSwitch.cpp	/^DSwitch::DSwitch(id_t id, std::string name, unsigned int level, unsigned int num_in_level, Confi/;"	f	class:DSwitch
DSwitchConfig	include/Config.h	/^class DSwitchConfig {$/;"	c
DSwitchStats	include/Stats.h	/^class DSwitchStats : public Stats {$/;"	c
DSwitchStats	src/Stats.cpp	/^DSwitchStats::DSwitchStats() {$/;"	f	class:DSwitchStats
DataPackage	include/DataPackage.h	/^class DataPackage {$/;"	c
DataPackage	src/DataPackage.cpp	/^DataPackage::DataPackage(DataPackage* pck) {$/;"	f	class:DataPackage
DataPackage	src/DataPackage.cpp	/^DataPackage::DataPackage(size_t size_package, data_t data, operand_t data_type, id_t source) {$/;"	f	class:DataPackage
DataPackage	src/DataPackage.cpp	/^DataPackage::DataPackage(size_t size_package, data_t data, operand_t data_type, id_t source, uns/;"	f	class:DataPackage
DataPackage	src/DataPackage.cpp	/^DataPackage::DataPackage(size_t size_package, data_t data, operand_t data_type, id_t source,traf/;"	f	class:DataPackage
Dataflow	include/types.h	/^enum Dataflow{CNN_DATAFLOW, MK_STA_KN_STR, MK_STR_KN_STA, SPARSE_DENSE_DATAFLOW};$/;"	g
Distribute	include/define.h	/^  Distribute = 8,$/;"	e	enum:Opcode
DistributionNetwork	include/DistributionNetwork.h	/^    DistributionNetwork(id_t id, std::string name) : Unit(id, name) {}$/;"	f	class:DistributionNetwork
DistributionNetwork	include/DistributionNetwork.h	/^class DistributionNetwork : public Unit {$/;"	c
EARLY_SYNTHETIC	include/types.h	/^enum layerTest {TINY, LATE_SYNTHETIC, EARLY_SYNTHETIC, VGG_CONV11, VGG_CONV1};$/;"	e	enum:layerTest
FC	include/types.h	/^enum Layer_t{CONV, POOL, FC, GEMM, SPARSE_DENSE};$/;"	e	enum:Layer_t
FEASwitch	include/FEASwitch.h	/^class FEASwitch : public Unit {$/;"	c
FEASwitch	src/FEASwitch.cpp	/^FEASwitch::FEASwitch(id_t id, std::string name, unsigned int level, unsigned int num_in_level, C/;"	f	class:FEASwitch
FENETWORK	include/types.h	/^enum ReduceNetwork_t{ASNETWORK, FENETWORK, TEMPORALRN};$/;"	e	enum:ReduceNetwork_t
FENetwork	include/FENetwork.h	/^class FENetwork : public ReduceNetwork {$/;"	c
FENetwork	src/FENetwork.cpp	/^FENetwork::FENetwork(id_t id, std::string name, Config stonne_cfg, Connection* outputConnection)/;"	f	class:FENetwork
FLOAT	external/cpptoml.h	/^        FLOAT,$/;"	e	enum:cpptoml::parser::parse_type
FLOAT	external/cpptoml.h	/^    FLOAT,$/;"	e	enum:cpptoml::base_type
FOLD	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	e	enum:adderconfig_t
FW_2_2	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	e	enum:adderconfig_t
Fifo	include/Fifo.h	/^class Fifo {$/;"	c
Fifo	src/Fifo.cpp	/^Fifo::Fifo(unsigned int capacity) {$/;"	f	class:Fifo
FifoStats	include/Stats.h	/^class FifoStats : public Stats {$/;"	c
FifoStats	src/Stats.cpp	/^FifoStats::FifoStats() {$/;"	f	class:FifoStats
G	include/DNNLayer.h	/^    unsigned int G;           \/\/ Number of grups $/;"	m	class:DNNLayer	typeref:typename:unsigned int
GEMM	include/types.h	/^enum Layer_t{CONV, POOL, FC, GEMM, SPARSE_DENSE};$/;"	e	enum:Layer_t
GENERATION_TYPE	include/types.h	/^enum GENERATION_TYPE{GEN_BY_ROWS, GEN_BY_COLS};$/;"	g
GEN_BY_COLS	include/types.h	/^enum GENERATION_TYPE{GEN_BY_ROWS, GEN_BY_COLS};$/;"	e	enum:GENERATION_TYPE
GEN_BY_ROWS	include/types.h	/^enum GENERATION_TYPE{GEN_BY_ROWS, GEN_BY_COLS};$/;"	e	enum:GENERATION_TYPE
IACTIVATION	include/types.h	/^enum operand_t {WEIGHT, IACTIVATION, OACTIVATION, PSUM};$/;"	e	enum:operand_t
INCLUDES	Makefile	/^INCLUDES=$(wildcard include\/*.h)$/;"	m
IND_SIZE	include/types.h	/^#define IND_SIZE /;"	d
INLINE_TABLE	external/cpptoml.h	/^        INLINE_TABLE$/;"	e	enum:cpptoml::parser::parse_type
INT	external/cpptoml.h	/^        INT,$/;"	e	enum:cpptoml::parser::parse_type
INT	external/cpptoml.h	/^    INT,$/;"	e	enum:cpptoml::base_type
K	include/DNNLayer.h	/^    unsigned int K;           \/\/ Number of filters and output channels per group$/;"	m	class:DNNLayer	typeref:typename:unsigned int
K	include/OSMeshSDMemory.h	/^    unsigned int K;   \/\/Number of columns MK matrix and rows KN matrix. Extracted from dnn_lay/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
K	include/SparseSDMemory.h	/^    unsigned int K;   \/\/Number of columns MK matrix and rows KN matrix. Extracted from dnn_lay/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
KN_address	include/OSMeshSDMemory.h	/^    address_t KN_address;$/;"	m	class:OSMeshSDMemory	typeref:typename:address_t
LATE_SYNTHETIC	include/types.h	/^enum layerTest {TINY, LATE_SYNTHETIC, EARLY_SYNTHETIC, VGG_CONV11, VGG_CONV1};$/;"	e	enum:layerTest
LEFT	include/ASNetwork.h	/^#define LEFT /;"	d
LEFT	include/DSNetwork.h	/^#define LEFT /;"	d
LEFT	include/FENetwork.h	/^#define LEFT /;"	d
LEFT	include/types.h	/^enum direction_t {LEFT, RIGHT};$/;"	e	enum:direction_t
LINEAR	include/types.h	/^enum MultiplierNetwork_t{LINEAR, OS_MESH};$/;"	e	enum:MultiplierNetwork_t
LOCAL_DATE	external/cpptoml.h	/^        LOCAL_DATE,$/;"	e	enum:cpptoml::parser::parse_type
LOCAL_DATE	external/cpptoml.h	/^    LOCAL_DATE,$/;"	e	enum:cpptoml::base_type
LOCAL_DATETIME	external/cpptoml.h	/^        LOCAL_DATETIME,$/;"	e	enum:cpptoml::parser::parse_type
LOCAL_DATETIME	external/cpptoml.h	/^    LOCAL_DATETIME,$/;"	e	enum:cpptoml::base_type
LOCAL_TIME	external/cpptoml.h	/^        LOCAL_TIME,$/;"	e	enum:cpptoml::parser::parse_type
LOCAL_TIME	external/cpptoml.h	/^    LOCAL_TIME,$/;"	e	enum:cpptoml::base_type
Layer_t	include/types.h	/^enum Layer_t{CONV, POOL, FC, GEMM, SPARSE_DENSE};$/;"	g
LookUpTableConfig	include/Config.h	/^class LookUpTableConfig {$/;"	c
LookupTable	include/LookupTable.h	/^class LookupTable : Unit {$/;"	c
LookupTable	src/LookupTable.cpp	/^LookupTable::LookupTable(id_t id, std::string name, Config stonne_cfg, Connection* inputConnecti/;"	f	class:LookupTable
M	include/OSMeshSDMemory.h	/^    unsigned int M;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
M	include/SparseSDMemory.h	/^    unsigned int M;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
MAERI_DENSE_WORKLOAD	include/types.h	/^enum MemoryController_t{MAERI_DENSE_WORKLOAD, SIGMA_SPARSE_GEMM, MAGMA_SPARSE_DENSE, TPU_OS_DENS/;"	e	enum:MemoryController_t
MAGMA_SPARSE_DENSE	include/types.h	/^enum MemoryController_t{MAERI_DENSE_WORKLOAD, SIGMA_SPARSE_GEMM, MAGMA_SPARSE_DENSE, TPU_OS_DENS/;"	e	enum:MemoryController_t
MK_STA_KN_STR	include/types.h	/^enum Dataflow{CNN_DATAFLOW, MK_STA_KN_STR, MK_STR_KN_STA, SPARSE_DENSE_DATAFLOW};$/;"	e	enum:Dataflow
MK_STR_KN_STA	include/types.h	/^enum Dataflow{CNN_DATAFLOW, MK_STA_KN_STR, MK_STR_KN_STA, SPARSE_DENSE_DATAFLOW};$/;"	e	enum:Dataflow
MK_address	include/OSMeshSDMemory.h	/^    address_t MK_address;$/;"	m	class:OSMeshSDMemory	typeref:typename:address_t
MN_WIRE	include/types.h	/^enum WIRE_TYPE{RN_WIRE, MN_WIRE, DN_WIRE};$/;"	e	enum:WIRE_TYPE
MSNetwork	include/MSNetwork.h	/^class MSNetwork : public MultiplierNetwork{$/;"	c
MSNetwork	src/MSNetwork.cpp	/^MSNetwork::MSNetwork(id_t id, std::string name, Config stonne_cfg)$/;"	f	class:MSNetwork
MSNetworkConfig	include/Config.h	/^class MSNetworkConfig {$/;"	c
MSwitch	include/MSwitch.h	/^class MSwitch : public Unit$/;"	c
MSwitch	src/MSwitch.cpp	/^MSwitch::MSwitch(id_t id, std::string name, int num, Config stonne_cfg)$/;"	f	class:MSwitch
MSwitch	src/MSwitch.cpp	/^MSwitch::MSwitch(id_t id,$/;"	f	class:MSwitch
MSwitchConfig	include/Config.h	/^class MSwitchConfig {$/;"	c
MSwitchStats	include/Stats.h	/^class MSwitchStats : public Stats {$/;"	c
MSwitchStats	src/Stats.cpp	/^MSwitchStats::MSwitchStats() {$/;"	f	class:MSwitchStats
MULTICAST	include/types.h	/^enum traffic_t {BROADCAST, MULTICAST, UNICAST};$/;"	e	enum:traffic_t
MULTIPLIER	include/types.h	/^enum adderoperation_t {ADDER, COMPARATOR, MULTIPLIER, NOP};$/;"	e	enum:adderoperation_t
MemoryController	include/MemoryController.h	/^    MemoryController(id_t id, std::string name) : Unit(id, name){}$/;"	f	class:MemoryController
MemoryController	include/MemoryController.h	/^class MemoryController : Unit {        $/;"	c
MemoryController_t	include/types.h	/^enum MemoryController_t{MAERI_DENSE_WORKLOAD, SIGMA_SPARSE_GEMM, MAGMA_SPARSE_DENSE, TPU_OS_DENS/;"	g
Mpush	include/define.h	/^  Mpush = 5,$/;"	e	enum:Opcode
Mul_fowd	include/define.h	/^  Mul_fowd = 4,$/;"	e	enum:Opcode
MultiplierNetwork	include/MultiplierNetwork.h	/^    MultiplierNetwork(id_t id, std::string name) : Unit(id, name){}$/;"	f	class:MultiplierNetwork
MultiplierNetwork	include/MultiplierNetwork.h	/^class MultiplierNetwork : public Unit{$/;"	c
MultiplierNetwork_t	include/types.h	/^enum MultiplierNetwork_t{LINEAR, OS_MESH};$/;"	g
MultiplierOS	include/MultiplierOS.h	/^class MultiplierOS : public Unit {$/;"	c
MultiplierOS	src/MultiplierOS.cpp	/^MultiplierOS::MultiplierOS(id_t id, std::string name, int row_num, int col_num,  Config stonne_c/;"	f	class:MultiplierOS
MultiplierOSStats	include/Stats.h	/^class MultiplierOSStats : public Stats {$/;"	c
MultiplierOSStats	src/Stats.cpp	/^MultiplierOSStats::MultiplierOSStats() {$/;"	f	class:MultiplierOSStats
Multiply	include/define.h	/^  Multiply = 3,$/;"	e	enum:Opcode
N	include/DNNLayer.h	/^    unsigned int N;           \/\/ Number of inputs (batch size)$/;"	m	class:DNNLayer	typeref:typename:unsigned int
N	include/OSMeshSDMemory.h	/^    unsigned int N;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
N	include/SparseSDMemory.h	/^    unsigned int N;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
NONE	external/cpptoml.h	/^    NONE,$/;"	e	enum:cpptoml::base_type
NOP	include/types.h	/^enum adderoperation_t {ADDER, COMPARATOR, MULTIPLIER, NOP};$/;"	e	enum:adderoperation_t
NORMALIZE_MAC	include/define.h	/^#define NORMALIZE_MAC /;"	d
NOT_CONFIGURED	include/types.h	/^enum fl_t {RECEIVE, SEND, NOT_CONFIGURED}; \/\/\/forwarding link type$/;"	e	enum:fl_t
NO_MODE	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	e	enum:adderconfig_t
NPSumsConfiguration	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::NPSumsConfiguration(unsigned int n_psums) {$/;"	f	class:AccumulationBuffer	typeref:typename:void
NPSumsConfiguration	src/FENetwork.cpp	/^void FENetwork::NPSumsConfiguration(unsigned int n_psums) {$/;"	f	class:FENetwork	typeref:typename:void
Num_VNs	include/Tile.h	/^    unsigned int Num_VNs;     \/\/ Number of Virtual Neurons (i.e., T_K*T_N*T_X_*T_Y_)$/;"	m	class:Tile	typeref:typename:unsigned int
OACTIVATION	include/types.h	/^enum operand_t {WEIGHT, IACTIVATION, OACTIVATION, PSUM};$/;"	e	enum:operand_t
OBJS	Makefile	/^OBJS=$(patsubst src\/%,$(OBJSDIR)\/%,$(patsubst %.cpp,%.o,$(SOURCE)))$/;"	m
OBJSDIR	Makefile	/^OBJSDIR=objs$/;"	m
OFFSET_DATETIME	external/cpptoml.h	/^        OFFSET_DATETIME,$/;"	e	enum:cpptoml::parser::parse_type
OFFSET_DATETIME	external/cpptoml.h	/^    OFFSET_DATETIME,$/;"	e	enum:cpptoml::base_type
OSMeshControllerState	include/types.h	/^enum OSMeshControllerState{OS_CONFIGURING, OS_DIST_INPUTS, OS_WAITING_FOR_NEXT_ITER, OS_ALL_DATA/;"	g
OSMeshMN	include/OSMeshMN.h	/^class OSMeshMN : public MultiplierNetwork{$/;"	c
OSMeshMN	src/OSMeshMN.cpp	/^OSMeshMN::OSMeshMN(id_t id, std::string name, Config stonne_cfg) : MultiplierNetwork(id, name) {/;"	f	class:OSMeshMN
OSMeshSDMemory	include/OSMeshSDMemory.h	/^class OSMeshSDMemory : public MemoryController {$/;"	c
OSMeshSDMemory	src/OSMeshSDMemory.cpp	/^OSMeshSDMemory::OSMeshSDMemory(id_t id, std::string name, Config stonne_cfg, Connection* write_c/;"	f	class:OSMeshSDMemory
OS_ALL_DATA_SENT	include/types.h	/^enum OSMeshControllerState{OS_CONFIGURING, OS_DIST_INPUTS, OS_WAITING_FOR_NEXT_ITER, OS_ALL_DATA/;"	e	enum:OSMeshControllerState
OS_CONFIGURING	include/types.h	/^enum OSMeshControllerState{OS_CONFIGURING, OS_DIST_INPUTS, OS_WAITING_FOR_NEXT_ITER, OS_ALL_DATA/;"	e	enum:OSMeshControllerState
OS_DIST_INPUTS	include/types.h	/^enum OSMeshControllerState{OS_CONFIGURING, OS_DIST_INPUTS, OS_WAITING_FOR_NEXT_ITER, OS_ALL_DATA/;"	e	enum:OSMeshControllerState
OS_MESH	include/types.h	/^enum MultiplierNetwork_t{LINEAR, OS_MESH};$/;"	e	enum:MultiplierNetwork_t
OS_WAITING_FOR_NEXT_ITER	include/types.h	/^enum OSMeshControllerState{OS_CONFIGURING, OS_DIST_INPUTS, OS_WAITING_FOR_NEXT_ITER, OS_ALL_DATA/;"	e	enum:OSMeshControllerState
OUT_DIST_VN	include/OSMeshSDMemory.h	/^    unsigned int OUT_DIST_VN;  \/\/To calculate the output memory address$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
OUT_DIST_VN	include/SparseSDMemory.h	/^    unsigned int OUT_DIST_VN;  \/\/To calculate the output memory address$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
OUT_DIST_VN_ITERATION	include/OSMeshSDMemory.h	/^    unsigned int OUT_DIST_VN_ITERATION; \/\/To calculate the memory address$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
OUT_DIST_VN_ITERATION	include/SparseSDMemory.h	/^    unsigned int OUT_DIST_VN_ITERATION; \/\/To calculate the memory address$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
Opcode	include/define.h	/^enum Opcode {$/;"	g
OptGoal	include/define.h	/^enum OptGoal{$/;"	g
POOL	include/types.h	/^enum Layer_t{CONV, POOL, FC, GEMM, SPARSE_DENSE};$/;"	e	enum:Layer_t
PSUM	include/types.h	/^enum operand_t {WEIGHT, IACTIVATION, OACTIVATION, PSUM};$/;"	e	enum:operand_t
PULL_LENGTH	include/define.h	/^#define PULL_LENGTH /;"	d
PUSH_LENGTH	include/define.h	/^#define PUSH_LENGTH /;"	d
Pull	include/define.h	/^  Pull = 7,$/;"	e	enum:Opcode
R	include/DNNLayer.h	/^    unsigned int R;           \/\/ Number of Filter Rows$/;"	m	class:DNNLayer	typeref:typename:unsigned int
RECEIVE	include/types.h	/^enum fl_t {RECEIVE, SEND, NOT_CONFIGURED}; \/\/\/forwarding link type$/;"	e	enum:fl_t
RIGHT	include/ASNetwork.h	/^#define RIGHT /;"	d
RIGHT	include/DSNetwork.h	/^#define RIGHT /;"	d
RIGHT	include/FENetwork.h	/^#define RIGHT /;"	d
RIGHT	include/types.h	/^enum direction_t {LEFT, RIGHT};$/;"	e	enum:direction_t
RNNHidden	include/DNNModel.h	/^  RNNHidden() {}$/;"	f	class:RNNHidden
RNNHidden	include/DNNModel.h	/^class RNNHidden {$/;"	c
RN_WIRE	include/types.h	/^enum WIRE_TYPE{RN_WIRE, MN_WIRE, DN_WIRE};$/;"	e	enum:WIRE_TYPE
ReduceNetwork	include/ReduceNetwork.h	/^    ReduceNetwork(id_t id, std::string name)  : Unit(id, name) {}$/;"	f	class:ReduceNetwork
ReduceNetwork	include/ReduceNetwork.h	/^class ReduceNetwork : public Unit{$/;"	c
ReduceNetwork_t	include/types.h	/^enum ReduceNetwork_t{ASNETWORK, FENETWORK, TEMPORALRN};$/;"	g
S	include/DNNLayer.h	/^    unsigned int S;           \/\/ Number of filter columns$/;"	m	class:DNNLayer	typeref:typename:unsigned int
SDMemory	include/SDMemory.h	/^class SDMemory : public MemoryController {$/;"	c
SDMemory	src/SDMemory.cpp	/^SDMemory::SDMemory(id_t id, std::string name, Config stonne_cfg, Connection* write_connection) :/;"	f	class:SDMemory
SDMemoryConfig	include/Config.h	/^class SDMemoryConfig {$/;"	c
SDMemoryStats	include/Stats.h	/^class SDMemoryStats : public Stats {$/;"	c
SDMemoryStats	src/Stats.cpp	/^SDMemoryStats::SDMemoryStats() {$/;"	f	class:SDMemoryStats
SEND	include/types.h	/^enum fl_t {RECEIVE, SEND, NOT_CONFIGURED}; \/\/\/forwarding link type$/;"	e	enum:fl_t
SIGMA_SPARSE_GEMM	include/types.h	/^enum MemoryController_t{MAERI_DENSE_WORKLOAD, SIGMA_SPARSE_GEMM, MAGMA_SPARSE_DENSE, TPU_OS_DENS/;"	e	enum:MemoryController_t
SOURCE	Makefile	/^SOURCE=$(wildcard src\/*.cpp)$/;"	m
SPARSE_DENSE	include/types.h	/^enum Layer_t{CONV, POOL, FC, GEMM, SPARSE_DENSE};$/;"	e	enum:Layer_t
SPARSE_DENSE_DATAFLOW	include/types.h	/^enum Dataflow{CNN_DATAFLOW, MK_STA_KN_STR, MK_STR_KN_STA, SPARSE_DENSE_DATAFLOW};$/;"	e	enum:Dataflow
STA_DIST_ELEM	include/SparseSDMemory.h	/^    unsigned int STA_DIST_ELEM;  \/\/Distance in bitmap memory between two elements of the same /;"	m	class:SparseSDMemory	typeref:typename:unsigned int
STA_DIST_VECTOR	include/SparseSDMemory.h	/^    unsigned int STA_DIST_VECTOR; \/\/Disctance in bitmap memory between two elements of differ /;"	m	class:SparseSDMemory	typeref:typename:unsigned int
STA_address	include/SparseSDMemory.h	/^    address_t STA_address;$/;"	m	class:SparseSDMemory	typeref:typename:address_t
STA_metadata	include/SparseSDMemory.h	/^    metadata_address_t STA_metadata;$/;"	m	class:SparseSDMemory	typeref:typename:metadata_address_t
STONNEMODEL_H_	include/STONNEModel.h	/^#define STONNEMODEL_H_$/;"	d
STRING	external/cpptoml.h	/^        STRING = 1,$/;"	e	enum:cpptoml::parser::parse_type
STRING	external/cpptoml.h	/^    STRING,$/;"	e	enum:cpptoml::base_type
STR_DIST_ELEM	include/SparseSDMemory.h	/^    unsigned int STR_DIST_ELEM;   \/\/Idem than before but with the STR matrix$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
STR_DIST_VECTOR	include/SparseSDMemory.h	/^    unsigned int STR_DIST_VECTOR;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
STR_address	include/SparseSDMemory.h	/^    address_t STR_address;$/;"	m	class:SparseSDMemory	typeref:typename:address_t
STR_metadata	include/SparseSDMemory.h	/^    metadata_address_t STR_metadata;$/;"	m	class:SparseSDMemory	typeref:typename:metadata_address_t
SparseSDMemory	include/SparseSDMemory.h	/^class SparseSDMemory : public MemoryController {$/;"	c
SparseSDMemory	src/SparseSDMemory.cpp	/^SparseSDMemory::SparseSDMemory(id_t id, std::string name, Config stonne_cfg, Connection* write_c/;"	f	class:SparseSDMemory
SparseVN	include/Tile.h	/^    SparseVN(unsigned int size, bool folding) {this->size=size; this->folding=folding;}$/;"	f	class:SparseVN
SparseVN	include/Tile.h	/^class SparseVN {$/;"	c
SparsityControllerState	include/types.h	/^enum SparsityControllerState{CONFIGURING, DIST_STA_MATRIX, DIST_STR_MATRIX, WAITING_FOR_NEXT_STA/;"	g
Stats	include/Stats.h	/^class Stats {$/;"	c
Stonne	include/STONNEModel.h	/^class Stonne {$/;"	c
Stonne	src/STONNEModel.cpp	/^Stonne::Stonne(Config stonne_cfg) {$/;"	f	class:Stonne
TABLE	external/cpptoml.h	/^    TABLE,$/;"	e	enum:cpptoml::base_type
TABLE_ARRAY	external/cpptoml.h	/^    TABLE_ARRAY$/;"	e	enum:cpptoml::base_type
TEMPORALRN	include/types.h	/^enum ReduceNetwork_t{ASNETWORK, FENETWORK, TEMPORALRN};$/;"	e	enum:ReduceNetwork_t
TINY	include/types.h	/^enum layerTest {TINY, LATE_SYNTHETIC, EARLY_SYNTHETIC, VGG_CONV11, VGG_CONV1};$/;"	e	enum:layerTest
TPU_OS_DENSE	include/types.h	/^enum MemoryController_t{MAERI_DENSE_WORKLOAD, SIGMA_SPARSE_GEMM, MAGMA_SPARSE_DENSE, TPU_OS_DENS/;"	e	enum:MemoryController_t
T_C	include/Tile.h	/^    unsigned int T_C;         \/\/ Number of input and filter channels$/;"	m	class:Tile	typeref:typename:unsigned int
T_G	include/Tile.h	/^    unsigned int T_G;         \/\/ Number of groups $/;"	m	class:Tile	typeref:typename:unsigned int
T_K	include/OSMeshSDMemory.h	/^    unsigned int T_K; \/\/This is the actual value of tile of K. This is just 1 in this case$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
T_K	include/Tile.h	/^    unsigned int T_K;         \/\/ Number of filters and number of ofmap channels per group$/;"	m	class:Tile	typeref:typename:unsigned int
T_M	include/OSMeshSDMemory.h	/^    unsigned int T_M;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
T_N	include/OSMeshSDMemory.h	/^    unsigned int T_N;           \/\/Actual value of T_N if adaptive tiling is used$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
T_N	include/Tile.h	/^    unsigned int T_N;         \/\/ Batch size $/;"	m	class:Tile	typeref:typename:unsigned int
T_R	include/Tile.h	/^    unsigned int T_R;         \/\/ Number of filter rows$/;"	m	class:Tile	typeref:typename:unsigned int
T_S	include/Tile.h	/^    unsigned int T_S;         \/\/ Number of filter columns$/;"	m	class:Tile	typeref:typename:unsigned int
T_X_	include/Tile.h	/^    unsigned int T_X_;        \/\/ Number of output fmap rows$/;"	m	class:Tile	typeref:typename:unsigned int
T_Y_	include/Tile.h	/^    unsigned int T_Y_;        \/\/ Number of output fmap columns$/;"	m	class:Tile	typeref:typename:unsigned int
TemporalRN	include/TemporalRN.h	/^class TemporalRN : public ReduceNetwork {$/;"	c
TemporalRN	src/TemporalRN.cpp	/^TemporalRN::TemporalRN(id_t id, std::string name, Config stonne_cfg, Connection* outputConnectio/;"	f	class:TemporalRN
Tile	include/Tile.h	/^class Tile {$/;"	c
Tile	src/Tile.cpp	/^Tile::Tile(std::string tile_file) {$/;"	f	class:Tile
Tile	src/Tile.cpp	/^Tile::Tile(unsigned int T_R, unsigned int T_S, unsigned int T_C, unsigned int T_K, unsigned int /;"	f	class:Tile
Transform_Filters_Memory	stonne_linker_src/stonne_linker.cpp	/^float* Transform_Filters_Memory(const float* weights,$/;"	f	typeref:typename:float *
Transform_Ifmap_Memory	stonne_linker_src/stonne_linker.cpp	/^float* Transform_Ifmap_Memory(const float* bottom_data,$/;"	f	typeref:typename:float *
Transform_Ofmap_Memory	stonne_linker_src/stonne_linker.cpp	/^void Transform_Ofmap_Memory(const float* ofmap_data,$/;"	f	typeref:typename:void
UNICAST	include/types.h	/^enum traffic_t {BROADCAST, MULTICAST, UNICAST};$/;"	e	enum:traffic_t
UTILITY_H_	include/utility.h	/^#define UTILITY_H_$/;"	d
Unit	include/Unit.h	/^    Unit(id_t id, std::string name) {$/;"	f	class:Unit
Unit	include/Unit.h	/^class Unit {$/;"	c
VGG_CONV1	include/types.h	/^enum layerTest {TINY, LATE_SYNTHETIC, EARLY_SYNTHETIC, VGG_CONV11, VGG_CONV1};$/;"	e	enum:layerTest
VGG_CONV11	include/types.h	/^enum layerTest {TINY, LATE_SYNTHETIC, EARLY_SYNTHETIC, VGG_CONV11, VGG_CONV1};$/;"	e	enum:layerTest
VN	include/DataPackage.h	/^    unsigned int VN; \/\/Virtual network where the psum is found$/;"	m	class:DataPackage	typeref:typename:unsigned int
VN	include/MSwitch.h	/^  int VN;$/;"	m	class:MSwitch	typeref:typename:int
VN	include/MultiplierOS.h	/^    unsigned int VN;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
VN	include/SDMemory.h	/^    unsigned int VN; \/\/VN Saved$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
VNAT	include/SDMemory.h	/^   VNAT_Register** VNAT;  \/\/VNAT with as many registers as VN configured in the accelerator$/;"	m	class:SDMemory	typeref:typename:VNAT_Register **
VNAT_Register	include/SDMemory.h	/^class VNAT_Register {$/;"	c
VNAT_Register	src/SDMemory.cpp	/^VNAT_Register::VNAT_Register(unsigned int VN, unsigned int addr, unsigned int N, unsigned int G,/;"	f	class:VNAT_Register
VN_Size	include/Tile.h	/^    unsigned int VN_Size;     \/\/ Virtual Neuron Size (i.e., T_R*T_S*T_C)$/;"	m	class:Tile	typeref:typename:unsigned int
WAITING_FOR_NEXT_STA_ITER	include/types.h	/^enum SparsityControllerState{CONFIGURING, DIST_STA_MATRIX, DIST_STR_MATRIX, WAITING_FOR_NEXT_STA/;"	e	enum:SparsityControllerState
WEIGHT	include/types.h	/^enum operand_t {WEIGHT, IACTIVATION, OACTIVATION, PSUM};$/;"	e	enum:operand_t
WIRE_TYPE	include/types.h	/^enum WIRE_TYPE{RN_WIRE, MN_WIRE, DN_WIRE};$/;"	g
X	include/DNNLayer.h	/^    unsigned int X;           \/\/ Number of input fmap rows$/;"	m	class:DNNLayer	typeref:typename:unsigned int
X_	include/DNNLayer.h	/^    unsigned int X_;          \/\/ Number of output fmap rows$/;"	m	class:DNNLayer	typeref:typename:unsigned int
Y	include/DNNLayer.h	/^    unsigned int Y;           \/\/ Number of input fmap columns$/;"	m	class:DNNLayer	typeref:typename:unsigned int
Y_	include/DNNLayer.h	/^    unsigned int Y_;          \/\/ Number of output fmap columns$/;"	m	class:DNNLayer	typeref:typename:unsigned int
_BUS_CPP	include/CollectionBus.h	/^#define _BUS_CPP$/;"	d
_COMPILER_ART_h_	include/CompilerART.h	/^#define _COMPILER_ART_h_$/;"	d
_COMPILER_COMPONENT_h_	include/CompilerComponent.h	/^#define _COMPILER_COMPONENT_h_$/;"	d
_COMPILER_FEN_h_	include/CompilerFEN.h	/^#define _COMPILER_FEN_h_$/;"	d
_COMPILER_MSN_h_	include/CompilerMSN.h	/^#define _COMPILER_MSN_h_$/;"	d
_COMPILER_MULTIPLIERMESH_h_	include/CompilerMultiplierMesh.h	/^#define _COMPILER_MULTIPLIERMESH_h_$/;"	d
_COMPONENT_H_	include/Component.h	/^#define _COMPONENT_H_$/;"	d
_CONFIG_H_	include/Config.h	/^#define _CONFIG_H_$/;"	d
_TESTBENCH_H	include/testbench.h	/^#define _TESTBENCH_H$/;"	d
_UNIT_h_	include/Unit.h	/^#define _UNIT_h_$/;"	d
__ACCUMULATIONBUFFER__H__	include/AccumulationBuffer.h	/^#define __ACCUMULATIONBUFFER__H__$/;"	d
__ACCUMULATOR__h	include/Accumulator.h	/^#define __ACCUMULATOR__h$/;"	d
__ASNETWORK__H__	include/ASNetwork.h	/^#define __ASNETWORK__H__$/;"	d
__ASwitch__h	include/ASwitch.h	/^#define __ASwitch__h$/;"	d
__CollectionBusLine__h__	include/CollectionBusLine.h	/^#define __CollectionBusLine__h__$/;"	d
__Connection__h	include/Connection.h	/^#define __Connection__h$/;"	d
__DNN_LAYER__H	include/DNNLayer.h	/^#define __DNN_LAYER__H$/;"	d
__DSNETWORK__H__	include/DSNetwork.h	/^#define __DSNETWORK__H__$/;"	d
__DSNetworkTop__	include/DSNetworkTop.h	/^#define __DSNetworkTop__$/;"	d
__DSwitch__h	include/DSwitch.h	/^#define __DSwitch__h$/;"	d
__DistributionNetworkAbstract__	include/DistributionNetwork.h	/^#define __DistributionNetworkAbstract__$/;"	d
__FEFEASwitch__h	include/FEASwitch.h	/^#define __FEFEASwitch__h$/;"	d
__FENETWORK__H__	include/FENetwork.h	/^#define __FENETWORK__H__$/;"	d
__Fifo_h__	include/Fifo.h	/^#define __Fifo_h__$/;"	d
__MEMORYCONTROLLER__H__	include/MemoryController.h	/^#define __MEMORYCONTROLLER__H__$/;"	d
__MSNETWORK__H__	include/MSNetwork.h	/^#define __MSNETWORK__H__$/;"	d
__MSwitch__h	include/MSwitch.h	/^#define __MSwitch__h$/;"	d
__MULTIPLIERNETWORK__H__	include/MultiplierNetwork.h	/^#define __MULTIPLIERNETWORK__H__$/;"	d
__MultiplierOS__h	include/MultiplierOS.h	/^#define __MultiplierOS__h$/;"	d
__OSMESHSDMEMORY__H__	include/OSMeshSDMemory.h	/^#define __OSMESHSDMEMORY__H__$/;"	d
__OSMeshMN__H__	include/OSMeshMN.h	/^#define __OSMeshMN__H__$/;"	d
__REDUCENETWORK__H__	include/ReduceNetwork.h	/^#define __REDUCENETWORK__H__$/;"	d
__SDMEMORY__H__	include/SDMemory.h	/^#define __SDMEMORY__H__$/;"	d
__SPARSESDMEMORY__H__	include/SparseSDMemory.h	/^#define __SPARSESDMEMORY__H__$/;"	d
__STATS__H__	include/Stats.h	/^#define __STATS__H__$/;"	d
__TEMPORALREDUCTIONNETWORK__H__	include/TemporalRN.h	/^#define __TEMPORALREDUCTIONNETWORK__H__$/;"	d
__TILE__H	include/Tile.h	/^#define __TILE__H$/;"	d
__anon4e8f7a6c0102	external/cpptoml.h	/^                       [&](std::shared_ptr<base> v) { return v->as<T>(); });$/;"	f	function:cpptoml::array::array_of	file:
__anon4e8f7a6c0202	external/cpptoml.h	/^                       [&](std::shared_ptr<base> v) -> std::shared_ptr<array> {$/;"	f	function:cpptoml::array::nested_array	typeref:typename:std::shared_ptr<array>	file:
__anon4e8f7a6c0302	external/cpptoml.h	/^                      [&](char c) { (*this)(c); });$/;"	f	function:cpptoml::consumer::operator ()	file:
__anon4e8f7a6c0402	external/cpptoml.h	/^        auto key_end = [](char c) { return c == ']'; };$/;"	f	function:cpptoml::parser::parse_single_table	file:
__anon4e8f7a6c0502	external/cpptoml.h	/^        auto key_part_handler = [&](const std::string& part) {$/;"	f	function:cpptoml::parser::parse_single_table	file:
__anon4e8f7a6c0602	external/cpptoml.h	/^                                     const std::shared_ptr<base>&>& p) {$/;"	f	function:cpptoml::parser::parse_single_table	file:
__anon4e8f7a6c0702	external/cpptoml.h	/^        auto key_end = [](char c) { return c == ']'; };$/;"	f	function:cpptoml::parser::parse_table_array	file:
__anon4e8f7a6c0802	external/cpptoml.h	/^        auto key_part_handler = [&](const std::string& part) {$/;"	f	function:cpptoml::parser::parse_table_array	file:
__anon4e8f7a6c0902	external/cpptoml.h	/^        auto eat = make_consumer(it, end, [this]() {$/;"	f	function:cpptoml::parser::parse_table_array	file:
__anon4e8f7a6c0a02	external/cpptoml.h	/^        auto key_end = [](char c) { return c == '='; };$/;"	f	function:cpptoml::parser::parse_key_value	file:
__anon4e8f7a6c0b02	external/cpptoml.h	/^        auto key_part_handler = [&](const std::string& part) {$/;"	f	function:cpptoml::parser::parse_key_value	file:
__anon4e8f7a6c0c02	external/cpptoml.h	/^            auto bke = std::find_if(it, end, [](char c) {$/;"	f	function:cpptoml::parser::parse_simple_key	file:
__anon4e8f7a6c0d02	external/cpptoml.h	/^                         [](char c) { return c == ' ' || c == '\\t'; })$/;"	f	function:cpptoml::parser::parse_bare_key	file:
__anon4e8f7a6c0e02	external/cpptoml.h	/^                         [](char c) { return c == '[' || c == ']'; })$/;"	f	function:cpptoml::parser::parse_bare_key	file:
__anon4e8f7a6c0f02	external/cpptoml.h	/^        auto is_ws = [](char c) { return c == ' ' || c == '\\t'; };$/;"	f	function:cpptoml::parser::parse_multiline_string	file:
__anon4e8f7a6c1002	external/cpptoml.h	/^                               std::string::iterator& local_end) {$/;"	f	function:cpptoml::parser::parse_multiline_string	file:
__anon4e8f7a6c1102	external/cpptoml.h	/^        auto eat_sign = [&]() {$/;"	f	function:cpptoml::parser::parse_number	file:
__anon4e8f7a6c1202	external/cpptoml.h	/^        auto check_no_leading_zero = [&]() {$/;"	f	function:cpptoml::parser::parse_number	file:
__anon4e8f7a6c1302	external/cpptoml.h	/^        auto eat_digits = [&](bool (*check_char)(char)) {$/;"	f	function:cpptoml::parser::parse_number	file:
__anon4e8f7a6c1402	external/cpptoml.h	/^        auto eat_hex = [&]() { eat_digits(&is_hex); };$/;"	f	function:cpptoml::parser::parse_number	file:
__anon4e8f7a6c1502	external/cpptoml.h	/^        auto eat_numbers = [&]() { eat_digits(&is_number); };$/;"	f	function:cpptoml::parser::parse_number	file:
__anon4e8f7a6c1602	external/cpptoml.h	/^            auto eat_exp = [&]() {$/;"	f	function:cpptoml::parser::parse_number	file:
__anon4e8f7a6c1702	external/cpptoml.h	/^        auto eat = make_consumer(it, end, [this]() {$/;"	f	function:cpptoml::parser::parse_bool	file:
__anon4e8f7a6c1802	external/cpptoml.h	/^        auto ret = std::find_if(it, end, [](char c) {$/;"	f	function:cpptoml::parser::find_end_of_number	file:
__anon4e8f7a6c1902	external/cpptoml.h	/^        auto end_of_date = std::find_if(it, end, [](char c) {$/;"	f	function:cpptoml::parser::find_end_of_date	file:
__anon4e8f7a6c1a02	external/cpptoml.h	/^        return std::find_if(end_of_date, end, [](char c) {$/;"	f	function:cpptoml::parser::find_end_of_date	file:
__anon4e8f7a6c1b02	external/cpptoml.h	/^        return std::find_if(it, end, [](char c) {$/;"	f	function:cpptoml::parser::find_end_of_time	file:
__anon4e8f7a6c1c02	external/cpptoml.h	/^            it, time_end, [&]() { throw_parse_exception("Malformed time"); });$/;"	f	function:cpptoml::parser::read_time	file:
__anon4e8f7a6c1d02	external/cpptoml.h	/^            it, date_end, [&]() { throw_parse_exception("Malformed date"); });$/;"	f	function:cpptoml::parser::parse_date	file:
__anon4e8f7a6c1e02	external/cpptoml.h	/^            it, end, [](char c) { return c == ',' || c == ']' || c == '#'; });$/;"	f	function:cpptoml::parser::parse_array	file:
__data_package_h__	include/DataPackage.h	/^#define __data_package_h__$/;"	d
__lookuptable__h	include/LookupTable.h	/^#define __lookuptable__h$/;"	d
__stonne_linker__	stonne_linker_src/stonne_linker.h	/^#define __stonne_linker__$/;"	d
__types__h__	include/types.h	/^#define __types__h__$/;"	d
accbuffer_connection	include/MultiplierOS.h	/^    Connection* accbuffer_connection; \/\/To the accbuffer to keep OS$/;"	m	class:MultiplierOS	typeref:typename:Connection *
accbuffer_fifo	include/MultiplierOS.h	/^    Fifo* accbuffer_fifo; \/\/Psum ready to be sent to the parent$/;"	m	class:MultiplierOS	typeref:typename:Fifo *
accbufferconnectiontable	include/OSMeshMN.h	/^    std::map<std::pair<int, int>,  Connection*> accbufferconnectiontable; \/\/Table with the acc/;"	m	class:OSMeshMN	typeref:typename:std::map<std::pair<int,int>,Connection * >
accept	external/cpptoml.h	/^    static void accept(const base& b, Visitor&& visitor, Args&&... args)$/;"	f	struct:cpptoml::value_accept	typeref:typename:void
accept	external/cpptoml.h	/^    static void accept(const base&, Visitor&&, Args&&...)$/;"	f	struct:cpptoml::value_accept	typeref:typename:void
accept	external/cpptoml.h	/^void base::accept(Visitor&& visitor, Args&&... args) const$/;"	f	class:cpptoml::base	typeref:typename:void
accumulationBuffer	include/ASNetwork.h	/^    AccumulationBuffer* accumulationBuffer; \/\/Array of accumulators to perform the folding acc/;"	m	class:ASNetwork	typeref:typename:AccumulationBuffer *
accumulationBuffer	include/TemporalRN.h	/^    AccumulationBuffer* accumulationBuffer; \/\/Array of accumulators to perform the folding acc/;"	m	class:TemporalRN	typeref:typename:AccumulationBuffer *
accumulationBufferID	include/ASwitch.h	/^    unsigned int accumulationBufferID;               \/\/Number of the accumulation buffer if us/;"	m	class:ASwitch	typeref:typename:unsigned int
accumulation_buffer_enabled	include/ASNetwork.h	/^    bool accumulation_buffer_enabled;$/;"	m	class:ASNetwork	typeref:typename:bool
accumulation_buffer_enabled	include/Config.h	/^    unsigned int accumulation_buffer_enabled;  $/;"	m	class:ASNetworkConfig	typeref:typename:unsigned int
accumulation_buffer_size	include/TemporalRN.h	/^    unsigned int accumulation_buffer_size; \/\/Number of accumulation elements in the RN$/;"	m	class:TemporalRN	typeref:typename:unsigned int
accumulationbufferconnectiontable	include/ASNetwork.h	/^    std::vector<Connection*> accumulationbufferconnectiontable; \/\/Connections to the accumulat/;"	m	class:ASNetwork	typeref:typename:std::vector<Connection * >
accumulatorStats	include/Accumulator.h	/^    AccumulatorStats accumulatorStats; \/\/Object to track the behaviour of the Accumulator$/;"	m	class:Accumulator	typeref:typename:AccumulatorStats
accumulatortable	include/AccumulationBuffer.h	/^    std::map<int, Accumulator* > accumulatortable; \/\/Map with the accumulators$/;"	m	class:AccumulationBuffer	typeref:typename:std::map<int,Accumulator * >
activation_fifo	include/MSwitch.h	/^  Fifo* activation_fifo;        \/\/ Package received by the DN$/;"	m	class:MSwitch	typeref:typename:Fifo *
addInputConnectionToForward	src/FEASwitch.cpp	/^void FEASwitch::addInputConnectionToForward(Connection* inputConnectionToForward) {$/;"	f	class:FEASwitch	typeref:typename:void
adderconfig_t	include/types.h	/^enum adderconfig_t {ADD_2_1, ADD_3_1, ADD_1_1_PLUS_FW_1_1, FW_2_2, NO_MODE, FOLD}; \/\/ To the b/;"	g
adderoperation_t	include/types.h	/^enum adderoperation_t {ADDER, COMPARATOR, MULTIPLIER, NOP};$/;"	g
addersBusConnections	include/STONNEModel.h	/^    Connection** addersBusConnections; \/\/Array of output connections between the adders and th/;"	m	class:Stonne	typeref:typename:Connection **
addersConfiguration	src/ASNetwork.cpp	/^void ASNetwork::addersConfiguration(std::map<std::pair<int,int>, adderconfig_t> adder_configurat/;"	f	class:ASNetwork	typeref:typename:void
addersConfiguration	src/FENetwork.cpp	/^void FENetwork::addersConfiguration(std::map<std::pair<int,int>, adderconfig_t> adder_configurat/;"	f	class:FENetwork	typeref:typename:void
addr	include/SDMemory.h	/^    unsigned int addr; \/\/Offset$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
address_t	include/types.h	/^typedef float* address_t;$/;"	t	typeref:typename:float *
all	Makefile	/^all: $(BIN)$/;"	t
all	include/define.h	/^  all = 3,$/;"	e	enum:OptGoal
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:0
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:1
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:10
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:11
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:12
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:13
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:14
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:15
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:16
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:17
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:18
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:19
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:2
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:20
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:21
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:22
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:23
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:24
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:25
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:26
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:27
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:28
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:29
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:3
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:30
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:31
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:32
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:33
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:34
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:35
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:4
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:5
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:6
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:7
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:8
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:9
array	external/cpptoml.h	/^    array() : base(base_type::ARRAY)$/;"	f	class:cpptoml::array
array	external/cpptoml.h	/^    array(InputIterator begin, InputIterator end) : values_{begin, end}$/;"	f	class:cpptoml::array
array	external/cpptoml.h	/^class array : public base$/;"	c	namespace:cpptoml
array_	external/cpptoml.h	/^    std::vector<std::shared_ptr<table>> array_;$/;"	m	class:cpptoml::table_array	typeref:typename:std::vector<std::shared_ptr<table>>
array_exception	external/cpptoml.h	/^    array_exception(const std::string& err) : std::runtime_error{err}$/;"	f	class:cpptoml::array_exception
array_exception	external/cpptoml.h	/^class array_exception : public std::runtime_error$/;"	c	namespace:cpptoml
array_of	external/cpptoml.h	/^    std::vector<std::shared_ptr<value<T>>> array_of() const$/;"	f	class:cpptoml::array	typeref:typename:std::vector<std::shared_ptr<value<T>>>
array_of_trait	external/cpptoml.h	/^struct array_of_trait$/;"	s	namespace:cpptoml
array_of_trait	external/cpptoml.h	/^struct array_of_trait<array>$/;"	s	namespace:cpptoml
as	external/cpptoml.h	/^inline std::shared_ptr<const value<T>> base::as() const$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<const value<T>>
as	external/cpptoml.h	/^inline std::shared_ptr<const value<double>> base::as() const$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<const value<double>>
as	external/cpptoml.h	/^inline std::shared_ptr<value<T>> base::as()$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<value<T>>
as	external/cpptoml.h	/^inline std::shared_ptr<value<double>> base::as()$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<value<double>>
as_array	external/cpptoml.h	/^    std::shared_ptr<array> as_array()$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<array>
as_table	external/cpptoml.h	/^    std::shared_ptr<table> as_table()$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<table>
as_table_array	external/cpptoml.h	/^    std::shared_ptr<table_array> as_table_array()$/;"	f	class:cpptoml::base	typeref:typename:std::shared_ptr<table_array>
asnet	include/STONNEModel.h	/^    ReduceNetwork* asnet; \/\/ART Network$/;"	m	class:Stonne	typeref:typename:ReduceNetwork *
aswitchStats	include/ASwitch.h	/^    ASwitchStats aswitchStats; \/\/To track the behaviour of the ASwitch$/;"	m	class:ASwitch	typeref:typename:ASwitchStats
aswitchStats	include/Accumulator.h	/^    ASwitchStats aswitchStats; \/\/To track the behaviour of the FEASwitch$/;"	m	class:Accumulator	typeref:typename:ASwitchStats
aswitchStats	include/FEASwitch.h	/^    ASwitchStats aswitchStats; \/\/To track the behaviour of the FEASwitch$/;"	m	class:FEASwitch	typeref:typename:ASwitchStats
aswitchtable	include/ASNetwork.h	/^    std::map<std::pair<int, int>, ASwitch* > aswitchtable; \/\/Map with the switches of the topo/;"	m	class:ASNetwork	typeref:typename:std::map<std::pair<int,int>,ASwitch * >
aswitchtable	include/FENetwork.h	/^    std::map<std::pair<int, int>, FEASwitch* > aswitchtable; \/\/Map with the switches of the to/;"	m	class:FENetwork	typeref:typename:std::map<std::pair<int,int>,FEASwitch * >
at	external/cpptoml.h	/^    std::shared_ptr<base> at(size_t idx) const$/;"	f	class:cpptoml::array	typeref:typename:std::shared_ptr<base>
average_occupancy	include/Stats.h	/^    counter_t average_occupancy;$/;"	m	class:FifoStats	typeref:typename:counter_t
bandwidth_t	include/types.h	/^typedef unsigned int bandwidth_t;$/;"	t	typeref:typename:unsigned int
base	external/cpptoml.h	/^    base()$/;"	f	class:cpptoml::base
base	external/cpptoml.h	/^    base(const base_type t) : type_(t)$/;"	f	class:cpptoml::base
base	external/cpptoml.h	/^class base : public std::enable_shared_from_this<base>$/;"	c	namespace:cpptoml
base_addr	include/SDMemory.h	/^    unsigned int base_addr; \/\/Base addr of this VN (i.e., the first element to compute).$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
base_type	external/cpptoml.h	/^enum class base_type$/;"	g	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<array>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<bool>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<double>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<int64_t>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<local_date>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<local_datetime>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<local_time>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<offset_datetime>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<std::string>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<table>$/;"	s	namespace:cpptoml
base_type_traits	external/cpptoml.h	/^struct base_type_traits<table_array>$/;"	s	namespace:cpptoml
begin	external/cpptoml.h	/^    const_iterator begin() const$/;"	f	class:cpptoml::array	typeref:typename:const_iterator
begin	external/cpptoml.h	/^    const_iterator begin() const$/;"	f	class:cpptoml::table	typeref:typename:const_iterator
begin	external/cpptoml.h	/^    const_iterator begin() const$/;"	f	class:cpptoml::table_array	typeref:typename:const_iterator
begin	external/cpptoml.h	/^    iterator begin()$/;"	f	class:cpptoml::array	typeref:typename:iterator
begin	external/cpptoml.h	/^    iterator begin()$/;"	f	class:cpptoml::table	typeref:typename:iterator
begin	external/cpptoml.h	/^    iterator begin()$/;"	f	class:cpptoml::table_array	typeref:typename:iterator
bottom_connection	include/MultiplierOS.h	/^    Connection* bottom_connection; \/\/Input from the neighbour $/;"	m	class:MultiplierOS	typeref:typename:Connection *
bottom_fifo	include/MultiplierOS.h	/^    Fifo* bottom_fifo; \/\/Packages to be sent to the bottom (i.e., weights)$/;"	m	class:MultiplierOS	typeref:typename:Fifo *
buffers_capacity	include/ASwitch.h	/^    unsigned int buffers_capacity;                   \/\/Buffers size in bytes$/;"	m	class:ASwitch	typeref:typename:unsigned int
buffers_capacity	include/Accumulator.h	/^    unsigned int buffers_capacity;                   \/\/Buffers size in bytes$/;"	m	class:Accumulator	typeref:typename:unsigned int
buffers_capacity	include/Config.h	/^    unsigned int buffers_capacity; \/\/Number of elements that can be stored in the MS buffers. /;"	m	class:MSwitchConfig	typeref:typename:unsigned int
buffers_capacity	include/Config.h	/^    unsigned int buffers_capacity;$/;"	m	class:ASwitchConfig	typeref:typename:unsigned int
buffers_capacity	include/FEASwitch.h	/^    unsigned int buffers_capacity;                   \/\/Buffers size in bytes$/;"	m	class:FEASwitch	typeref:typename:unsigned int
buffers_capacity	include/MSNetwork.h	/^    unsigned int buffers_capacity; \/\/Capacity of the buffers in the MSwitches. This is neccesa/;"	m	class:MSNetwork	typeref:typename:unsigned int
buffers_capacity	include/MSwitch.h	/^  unsigned int buffers_capacity;$/;"	m	class:MSwitch	typeref:typename:unsigned int
buffers_capacity	include/MultiplierOS.h	/^    unsigned int buffers_capacity;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
buffers_capacity	include/OSMeshMN.h	/^    unsigned int buffers_capacity; \/\/Capacity of the buffers in the MSwitches. This is neccesa/;"	m	class:OSMeshMN	typeref:typename:unsigned int
busID	include/ASwitch.h	/^    unsigned int busID;                              \/\/CollectionBus connected to this ASwitch$/;"	m	class:ASwitch	typeref:typename:unsigned int
busID	include/Accumulator.h	/^    unsigned int busID;                              \/\/CollectionBus connected to this ASwitch$/;"	m	class:Accumulator	typeref:typename:unsigned int
busID	include/CollectionBusLine.h	/^    unsigned int busID;  \/\/Output port ID of this line$/;"	m	class:CollectionBusLine	typeref:typename:unsigned int
busID	include/FEASwitch.h	/^    unsigned int busID;                              \/\/CollectionBus connected to this ASwitch$/;"	m	class:FEASwitch	typeref:typename:unsigned int
bw	include/Connection.h	/^    size_t bw;           \/\/ Size in bytes of actual data. In the simulator this size is greate/;"	m	class:Connection	typeref:typename:size_t
calculateEnergy	energy_tables/calculate_energy.py	/^def calculateEnergy(energy_table, counter_file, out_file, verbose):$/;"	f
calculateOrdering	src/utility.cpp	/^unsigned int* calculateOrdering (float* matrix, unsigned int rows, unsigned int cols, GENERATION/;"	f	typeref:typename:unsigned int *
capacity	include/Fifo.h	/^    unsigned int capacity; \/\/Capacity in number of bits$/;"	m	class:Fifo	typeref:typename:unsigned int
capacity_words	include/Fifo.h	/^    unsigned int capacity_words; \/\/Capacity in number of words allowed. i.e., capacity_words =/;"	m	class:Fifo	typeref:typename:unsigned int
channel_filter_size	include/SDMemory.h	/^    unsigned int channel_filter_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
channel_input_size	include/SDMemory.h	/^    unsigned int channel_input_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
channel_output_size	include/SDMemory.h	/^    unsigned int channel_output_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
childsLinksConfiguration	src/ASNetwork.cpp	/^void ASNetwork::childsLinksConfiguration(std::map<std::pair<int,int>, std::pair<bool,bool>> chil/;"	f	class:ASNetwork	typeref:typename:void
childsLinksConfiguration	src/FENetwork.cpp	/^void FENetwork::childsLinksConfiguration(std::map<std::pair<int,int>, std::pair<bool,bool>> chil/;"	f	class:FENetwork	typeref:typename:void
childs_enabled	include/CompilerART.h	/^    std::map<std::pair<int,int>, std::pair<bool, bool>> childs_enabled; \/\/Indicates for each a/;"	m	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,std::pair<bool,bool>>
childs_enabled	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, std::pair<bool, bool>> childs_enabled; \/\/Indicates for each a/;"	m	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,std::pair<bool,bool>>
clean	Makefile	/^clean:$/;"	t
clear	external/cpptoml.h	/^    void clear()$/;"	f	class:cpptoml::array	typeref:typename:void
clear	external/cpptoml.h	/^    void clear()$/;"	f	class:cpptoml::table_array	typeref:typename:void
clone	external/cpptoml.h	/^inline std::shared_ptr<base> array::clone() const$/;"	f	class:cpptoml::array	typeref:typename:std::shared_ptr<base>
clone	external/cpptoml.h	/^inline std::shared_ptr<base> table::clone() const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<base>
clone	external/cpptoml.h	/^inline std::shared_ptr<base> table_array::clone() const$/;"	f	class:cpptoml::table_array	typeref:typename:std::shared_ptr<base>
clone	external/cpptoml.h	/^std::shared_ptr<base> value<T>::clone() const$/;"	f	class:cpptoml::value	typeref:typename:std::shared_ptr<base>
cnn_filter	include/DNNModel.h	/^  CNNFilter* cnn_filter;$/;"	m	class:DNNModel	typeref:typename:CNNFilter *
cnn_input	include/DNNModel.h	/^  CNNInput* cnn_input;$/;"	m	class:DNNModel	typeref:typename:CNNInput *
cnn_output	include/DNNModel.h	/^  CNNOutput* cnn_output;$/;"	m	class:DNNModel	typeref:typename:CNNOutput *
col_num	include/MultiplierOS.h	/^    int col_num;$/;"	m	class:MultiplierOS	typeref:typename:int
collectionBus	include/STONNEModel.h	/^    Bus* collectionBus; \/\/CollectionBus$/;"	m	class:Stonne	typeref:typename:Bus *
collection_bus_lines	include/CollectionBus.h	/^    std::vector<CollectionBusLine*> collection_bus_lines; $/;"	m	class:Bus	typeref:typename:std::vector<CollectionBusLine * >
collectionbuslineStats	include/CollectionBusLine.h	/^    CollectionBusLineStats collectionbuslineStats; \/\/To track information$/;"	m	class:CollectionBusLine	typeref:typename:CollectionBusLineStats
cols_used	include/OSMeshSDMemory.h	/^    unsigned int cols_used;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
componentName	include/Component.h	/^    string componentName;       \/\/ Name of the component$/;"	m	class:Component	typeref:typename:string
configConvParameters	src/main.cpp	/^void configConvParameters(int argc,$/;"	f	typeref:typename:void
configDenseGEMMParameters	src/main.cpp	/^void configDenseGEMMParameters(int argc,$/;"	f	typeref:typename:void
configSparseDenseParameters	src/main.cpp	/^void configSparseDenseParameters(int argc,$/;"	f	typeref:typename:void
configSparseGEMMParameters	src/main.cpp	/^void configSparseGEMMParameters(int argc,$/;"	f	typeref:typename:void
config_mode	include/ASwitch.h	/^    adderconfig_t  config_mode;                       \/\/ Configuration mode of the adder. ADD_/;"	m	class:ASwitch	typeref:typename:adderconfig_t
config_mode	include/FEASwitch.h	/^    adderconfig_t  config_mode;                       \/\/ Configuration mode of the adder. ADD_/;"	m	class:FEASwitch	typeref:typename:adderconfig_t
configurationVNs	include/OSMeshSDMemory.h	/^    std::vector<SparseVN> configurationVNs; \/\/A set of each VN size mapped onto the architectu/;"	m	class:OSMeshSDMemory	typeref:typename:std::vector<SparseVN>
configurationVNs	include/SparseSDMemory.h	/^    std::vector<SparseVN> configurationVNs; \/\/A set of each VN size mapped onto the architectu/;"	m	class:SparseSDMemory	typeref:typename:std::vector<SparseVN>
configuration_done	include/OSMeshSDMemory.h	/^    bool configuration_done; \/\/Indicates whether the architecture has been configured to perfo/;"	m	class:OSMeshSDMemory	typeref:typename:bool
configuration_done	include/SparseSDMemory.h	/^    bool configuration_done; \/\/Indicates whether the architecture has been configured to perfo/;"	m	class:SparseSDMemory	typeref:typename:bool
configureBottomSignal	src/MultiplierOS.cpp	/^void MultiplierOS::configureBottomSignal(bool bottom_signal) {$/;"	f	class:MultiplierOS	typeref:typename:void
configureRightSignal	src/MultiplierOS.cpp	/^void MultiplierOS::configureRightSignal(bool right_signal) {$/;"	f	class:MultiplierOS	typeref:typename:void
configureSignals	include/CompilerComponent.h	/^    virtual void configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int num_ms, /;"	f	class:CompilerComponent	typeref:typename:void
configureSignals	include/MultiplierNetwork.h	/^    virtual void configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int ms_size,/;"	f	class:MultiplierNetwork	typeref:typename:void
configureSignals	include/ReduceNetwork.h	/^    virtual void configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int ms_size,/;"	f	class:ReduceNetwork	typeref:typename:void
configureSignals	src/ASNetwork.cpp	/^void ASNetwork::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int ms_size, /;"	f	class:ASNetwork	typeref:typename:void
configureSignals	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int /;"	f	class:AccumulationBuffer	typeref:typename:void
configureSignals	src/CompilerART.cpp	/^void CompilerART::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int num_ms,/;"	f	class:CompilerART	typeref:typename:void
configureSignals	src/CompilerFEN.cpp	/^void CompilerFEN::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int num_ms,/;"	f	class:CompilerFEN	typeref:typename:void
configureSignals	src/CompilerMSN.cpp	/^void CompilerMSN::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int num_ms,/;"	f	class:CompilerMSN	typeref:typename:void
configureSignals	src/CompilerMultiplierMesh.cpp	/^void CompilerMultiplierMesh::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned /;"	f	class:CompilerMultiplierMesh	typeref:typename:void
configureSignals	src/FENetwork.cpp	/^void FENetwork::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int ms_size, /;"	f	class:FENetwork	typeref:typename:void
configureSignals	src/MSNetwork.cpp	/^void MSNetwork::configureSignals(Tile* current_tile,$/;"	f	class:MSNetwork	typeref:typename:void
configureSignals	src/OSMeshMN.cpp	/^void OSMeshMN::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int ms_rows, u/;"	f	class:OSMeshMN	typeref:typename:void
configureSignals	src/TemporalRN.cpp	/^void TemporalRN::configureSignals(Tile* current_tile, DNNLayer* dnn_layer, unsigned int ms_size,/;"	f	class:TemporalRN	typeref:typename:void
configureSparseSignals	include/CompilerComponent.h	/^    virtual void configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, un/;"	f	class:CompilerComponent	typeref:typename:void
configureSparseSignals	include/MultiplierNetwork.h	/^    virtual void configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, un/;"	f	class:MultiplierNetwork	typeref:typename:void
configureSparseSignals	include/ReduceNetwork.h	/^    virtual void configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, un/;"	f	class:ReduceNetwork	typeref:typename:void
configureSparseSignals	src/ASNetwork.cpp	/^void ASNetwork::configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, uns/;"	f	class:ASNetwork	typeref:typename:void
configureSparseSignals	src/CompilerART.cpp	/^void CompilerART::configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, u/;"	f	class:CompilerART	typeref:typename:void
configureSparseSignals	src/CompilerMSN.cpp	/^void CompilerMSN::configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, u/;"	f	class:CompilerMSN	typeref:typename:void
configureSparseSignals	src/CompilerMultiplierMesh.cpp	/^void CompilerMultiplierMesh::configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* d/;"	f	class:CompilerMultiplierMesh	typeref:typename:void
configureSparseSignals	src/MSNetwork.cpp	/^void MSNetwork::configureSparseSignals(std::vector<SparseVN> sparseVNs,$/;"	f	class:MSNetwork	typeref:typename:void
configureSparseSignals	src/OSMeshMN.cpp	/^void OSMeshMN::configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, unsi/;"	f	class:OSMeshMN	typeref:typename:void
configureSparseSignals	src/TemporalRN.cpp	/^void TemporalRN::configureSparseSignals(std::vector<SparseVN> sparseVNs, DNNLayer* dnn_layer, un/;"	f	class:TemporalRN	typeref:typename:void
connectASNandBus	src/STONNEModel.cpp	/^void Stonne::connectASNandBus() {$/;"	f	class:Stonne	typeref:typename:void
connectBusandMemory	src/STONNEModel.cpp	/^void Stonne::connectBusandMemory() {$/;"	f	class:Stonne	typeref:typename:void
connectMSNandASN	src/STONNEModel.cpp	/^void Stonne::connectMSNandASN() {$/;"	f	class:Stonne	typeref:typename:void
connectMSNandDSN	src/STONNEModel.cpp	/^void Stonne::connectMSNandDSN() {$/;"	f	class:Stonne	typeref:typename:void
connectMemoryandDSN	src/STONNEModel.cpp	/^void Stonne::connectMemoryandDSN() {$/;"	f	class:Stonne	typeref:typename:void
connectionStats	include/Connection.h	/^    ConnectionStats connectionStats; \/\/Tracking parameters$/;"	m	class:Connection	typeref:typename:ConnectionStats
connection_width	include/CollectionBus.h	/^    unsigned int connection_width;$/;"	m	class:Bus	typeref:typename:unsigned int
connections	include/DSNetworkTop.h	/^    std::vector<Connection*> connections; \/\/one per port$/;"	m	class:DSNetworkTop	typeref:typename:std::vector<Connection * >
connectiontable	include/DSNetwork.h	/^    std::map<std::pair<int, int>, Connection*> connectiontable; \/\/ Outputs connections of each/;"	m	class:DSNetwork	typeref:typename:std::map<std::pair<int,int>,Connection * >
const_iterator	external/cpptoml.h	/^    using const_iterator = std::vector<std::shared_ptr<base>>::const_iterator;$/;"	t	class:cpptoml::array	typeref:typename:std::vector<std::shared_ptr<base>>::const_iterator
const_iterator	external/cpptoml.h	/^    using const_iterator = std::vector<std::shared_ptr<table>>::const_iterator;$/;"	t	class:cpptoml::table_array	typeref:typename:std::vector<std::shared_ptr<table>>::const_iterator
const_iterator	external/cpptoml.h	/^    using const_iterator = string_to_base_map::const_iterator;$/;"	t	class:cpptoml::table	typeref:typename:string_to_base_map::const_iterator
construct	external/cpptoml.h	/^    static value_type construct(T&& val)$/;"	f	struct:cpptoml::value_traits	typeref:typename:value_type
consume_backwards_whitespace	external/cpptoml.h	/^    void consume_backwards_whitespace(std::string::iterator& back,$/;"	f	class:cpptoml::parser	typeref:typename:void
consume_whitespace	external/cpptoml.h	/^    void consume_whitespace(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:void
consumer	external/cpptoml.h	/^    consumer(std::string::iterator& it, const std::string::iterator& end,$/;"	f	class:cpptoml::consumer
consumer	external/cpptoml.h	/^class consumer$/;"	c	namespace:cpptoml
contains	external/cpptoml.h	/^    bool contains(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:bool
contains_qualified	external/cpptoml.h	/^    bool contains_qualified(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:bool
conv	include/define.h	/^  conv = 0,$/;"	e	enum:ConfigType
convOperationSupported	src/Config.cpp	/^bool Config::convOperationSupported() {$/;"	f	class:Config	typeref:typename:bool
counter_t	include/types.h	/^typedef unsigned int counter_t;$/;"	t	typeref:typename:unsigned int
cpptoml	external/cpptoml.h	/^namespace cpptoml$/;"	n
cpu_gemm	src/testbench.cpp	/^void cpu_gemm(float* MK_dense_matrix, float* KN_dense_matrix, float* output, unsigned int M, uns/;"	f	typeref:typename:void
current_C	include/SDMemory.h	/^    unsigned int current_C;   $/;"	m	class:SDMemory	typeref:typename:unsigned int
current_C	include/SDMemory.h	/^    unsigned int current_C;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_G	include/SDMemory.h	/^    unsigned int current_G;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_G	include/SDMemory.h	/^    unsigned int current_G;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_K	include/OSMeshSDMemory.h	/^    unsigned int current_K;    $/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
current_K	include/SDMemory.h	/^    unsigned int current_K;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_K	include/SDMemory.h	/^    unsigned int current_K;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_M	include/OSMeshSDMemory.h	/^    unsigned int current_M;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
current_N	include/OSMeshSDMemory.h	/^    unsigned int current_N;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
current_N	include/SDMemory.h	/^    unsigned int current_N;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_N	include/SDMemory.h	/^    unsigned int current_N;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_R	include/SDMemory.h	/^    unsigned int current_R;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_R	include/SDMemory.h	/^    unsigned int current_R;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_S	include/SDMemory.h	/^    unsigned int current_S;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_S	include/SDMemory.h	/^    unsigned int current_S;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_X	include/SDMemory.h	/^    unsigned int current_X;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_X	include/SDMemory.h	/^    unsigned int current_X;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_Y	include/SDMemory.h	/^    unsigned int current_Y; $/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_Y	include/SDMemory.h	/^    unsigned int current_Y;$/;"	m	class:SDMemory	typeref:typename:unsigned int
current_capacity	include/ASwitch.h	/^    unsigned int current_capacity;                   \/\/ the capacity must not exceed the input/;"	m	class:ASwitch	typeref:typename:unsigned int
current_capacity	include/Accumulator.h	/^    unsigned int current_capacity;                   \/\/ the capacity must not exceed the input/;"	m	class:Accumulator	typeref:typename:unsigned int
current_capacity	include/Connection.h	/^    unsigned int current_capacity; \/\/ the capacity must not exceed the bw of the connection$/;"	m	class:Connection	typeref:typename:unsigned int
current_capacity	include/DSwitch.h	/^    unsigned int current_capacity; \/\/ the capacity must not exceed the input bw of the connect/;"	m	class:DSwitch	typeref:typename:unsigned int
current_capacity	include/FEASwitch.h	/^    unsigned int current_capacity;                   \/\/ the capacity must not exceed the input/;"	m	class:FEASwitch	typeref:typename:unsigned int
current_n_folding	include/MSwitch.h	/^    current_n_folding; \/\/ meausre the number of foldings that have been$/;"	m	class:MSwitch	typeref:typename:unsigned int
current_n_windows	include/MSwitch.h	/^  unsigned int current_n_windows; \/\/ Measure the number of windows that have$/;"	m	class:MSwitch	typeref:typename:unsigned int
current_output	include/OSMeshSDMemory.h	/^   unsigned int current_output;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
current_output	include/SparseSDMemory.h	/^   unsigned int current_output;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
current_output_iteration	include/OSMeshSDMemory.h	/^   unsigned int current_output_iteration;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
current_output_iteration	include/SparseSDMemory.h	/^   unsigned int current_output_iteration;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
current_output_pixel	include/SDMemory.h	/^    unsigned int current_output_pixel;  \/\/This variable has the count for the current number o/;"	m	class:SDMemory	typeref:typename:unsigned int
current_psum	include/Accumulator.h	/^    unsigned int current_psum; \/\/Current psum performed$/;"	m	class:Accumulator	typeref:typename:unsigned int
current_psum	include/FEASwitch.h	/^    unsigned int current_psum; \/\/Current psum performed$/;"	m	class:FEASwitch	typeref:typename:unsigned int
current_psum	include/SDMemory.h	/^    unsigned int current_psum;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
current_state	include/OSMeshSDMemory.h	/^    OSMeshControllerState current_state; \/\/Stage to control what to do according to the state$/;"	m	class:OSMeshSDMemory	typeref:typename:OSMeshControllerState
current_state	include/SparseSDMemory.h	/^    SparsityControllerState current_state; \/\/Stage to control what to do according to the stat/;"	m	class:SparseSDMemory	typeref:typename:SparsityControllerState
current_tile	include/CompilerComponent.h	/^    Tile* current_tile;$/;"	m	class:CompilerComponent	typeref:typename:Tile *
current_tile	include/SDMemory.h	/^    Tile* current_tile;  \/\/ Layer loaded in the tile$/;"	m	class:SDMemory	typeref:typename:Tile *
current_tile	include/SDMemory.h	/^    Tile* current_tile;$/;"	m	class:VNAT_Register	typeref:typename:Tile *
current_tile	include/STONNEModel.h	/^    Tile* current_tile;$/;"	m	class:Stonne	typeref:typename:Tile *
cycle	include/DistributionNetwork.h	/^    virtual void cycle() {assert(false);} $/;"	f	class:DistributionNetwork	typeref:typename:void
cycle	include/MemoryController.h	/^    virtual void cycle() {assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
cycle	include/MultiplierNetwork.h	/^    virtual void cycle() {assert(false);}$/;"	f	class:MultiplierNetwork	typeref:typename:void
cycle	include/ReduceNetwork.h	/^    virtual void cycle(){}$/;"	f	class:ReduceNetwork	typeref:typename:void
cycle	include/Unit.h	/^    virtual void cycle() {} \/\/Execute a cycle in the component$/;"	f	class:Unit	typeref:typename:void
cycle	src/ASNetwork.cpp	/^void ASNetwork::cycle() {$/;"	f	class:ASNetwork	typeref:typename:void
cycle	src/ASwitch.cpp	/^void ASwitch::cycle()$/;"	f	class:ASwitch	typeref:typename:void
cycle	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::cycle() {$/;"	f	class:AccumulationBuffer	typeref:typename:void
cycle	src/Accumulator.cpp	/^void Accumulator::cycle() {$/;"	f	class:Accumulator	typeref:typename:void
cycle	src/CollectionBus.cpp	/^void Bus::cycle() { $/;"	f	class:Bus	typeref:typename:void
cycle	src/CollectionBusLine.cpp	/^void CollectionBusLine::cycle() {$/;"	f	class:CollectionBusLine	typeref:typename:void
cycle	src/DSNetwork.cpp	/^void DSNetwork::cycle() {$/;"	f	class:DSNetwork	typeref:typename:void
cycle	src/DSNetworkTop.cpp	/^void DSNetworkTop::cycle() {$/;"	f	class:DSNetworkTop	typeref:typename:void
cycle	src/DSwitch.cpp	/^void DSwitch::cycle() {$/;"	f	class:DSwitch	typeref:typename:void
cycle	src/FEASwitch.cpp	/^void FEASwitch::cycle() {$/;"	f	class:FEASwitch	typeref:typename:void
cycle	src/FENetwork.cpp	/^void FENetwork::cycle() {$/;"	f	class:FENetwork	typeref:typename:void
cycle	src/LookupTable.cpp	/^void LookupTable::cycle() {$/;"	f	class:LookupTable	typeref:typename:void
cycle	src/MSNetwork.cpp	/^void MSNetwork::cycle()$/;"	f	class:MSNetwork	typeref:typename:void
cycle	src/MSwitch.cpp	/^void MSwitch::cycle()$/;"	f	class:MSwitch	typeref:typename:void
cycle	src/MultiplierOS.cpp	/^void MultiplierOS::cycle() { \/\/Computing a cycle$/;"	f	class:MultiplierOS	typeref:typename:void
cycle	src/OSMeshMN.cpp	/^void OSMeshMN::cycle() {$/;"	f	class:OSMeshMN	typeref:typename:void
cycle	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::cycle() {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
cycle	src/SDMemory.cpp	/^void SDMemory::cycle() {$/;"	f	class:SDMemory	typeref:typename:void
cycle	src/STONNEModel.cpp	/^void Stonne::cycle() {$/;"	f	class:Stonne	typeref:typename:void
cycle	src/SparseSDMemory.cpp	/^void SparseSDMemory::cycle() {$/;"	f	class:SparseSDMemory	typeref:typename:void
cycle	src/TemporalRN.cpp	/^void TemporalRN::cycle() {$/;"	f	class:TemporalRN	typeref:typename:void
cycles_t	include/types.h	/^typedef unsigned int cycles_t;$/;"	t	typeref:typename:unsigned int
data	include/Connection.h	/^    std::vector<DataPackage*> data;   \/\/ Array of packages that are send\/receive in  a certai/;"	m	class:Connection	typeref:typename:std::vector<DataPackage * >
data	include/DSwitch.h	/^    std::vector<DataPackage*> data;   \/\/ Array of packages that are send\/receive in  a certai/;"	m	class:DSwitch	typeref:typename:std::vector<DataPackage * >
data	include/DataPackage.h	/^    data_t data; \/\/Data in the package$/;"	m	class:DataPackage	typeref:typename:data_t
data_	external/cpptoml.h	/^    T data_;$/;"	m	class:cpptoml::value	typeref:typename:T
data_t	include/types.h	/^typedef float data_t;$/;"	t	typeref:typename:float
data_type	include/DataPackage.h	/^    operand_t data_type; \/\/Type of data (i.e., WEIGHT, IACTIVATION, OACTIVATION, PSUM)$/;"	m	class:DataPackage	typeref:typename:operand_t
dataflow	include/SparseSDMemory.h	/^    Dataflow dataflow;$/;"	m	class:SparseSDMemory	typeref:typename:Dataflow
dataflow	include/Stats.h	/^    Dataflow dataflow;                                           \/\/Dataflow to use. Note this /;"	m	class:SDMemoryStats	typeref:typename:Dataflow
date_type	external/cpptoml.h	/^    option<parse_type> date_type(const std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:option<parse_type>
datetime	external/cpptoml.h	/^typedef offset_datetime datetime;$/;"	t	namespace:cpptoml	typeref:typename:offset_datetime
day	external/cpptoml.h	/^    int day = 0;$/;"	m	struct:cpptoml::local_date	typeref:typename:int
dests	include/DataPackage.h	/^    bool* dests;  \/\/ Used in multicast traffic to indicate the receivers$/;"	m	class:DataPackage	typeref:typename:bool *
detail	external/cpptoml.h	/^namespace detail$/;"	n	namespace:cpptoml
determine_number_type	external/cpptoml.h	/^    parse_type determine_number_type(const std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:parse_type
determine_value_type	external/cpptoml.h	/^    parse_type determine_value_type(const std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:parse_type
dim_sta	include/SparseSDMemory.h	/^    unsigned int dim_sta;   \/\/Number of vectors sta matrix. Extracted from dnn_layer->get_K();/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
dim_str	include/SparseSDMemory.h	/^    unsigned int dim_str;   \/\/Number of vectors str matrix. Extracted from dnn_layer->get_N()$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
directForwardingPsumConfig	src/MSNetwork.cpp	/^void MSNetwork::directForwardingPsumConfig($/;"	f	class:MSNetwork	typeref:typename:void
direct_forward_psum	include/MSwitch.h	/^  bool direct_forward_psum; \/\/ Always forward the psum. It is different than the$/;"	m	class:MSwitch	typeref:typename:bool
direct_forwarding_psum_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> direct_forwarding_psum_enabled; \/\/Indicates if the MS has to /;"	m	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
direction_t	include/types.h	/^enum direction_t {LEFT, RIGHT};$/;"	g
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:0
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:1
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:10
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:11
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:12
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:13
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:14
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:15
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:16
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:17
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:18
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:19
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:2
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:20
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:21
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:22
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:23
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:24
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:25
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:26
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:27
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:28
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:29
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:3
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:30
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:31
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:32
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:33
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:34
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:35
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:4
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:5
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:6
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:7
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:8
directory	compile_commands.json	/^    "directory": "\/home\/dalton\/desktop\/stonne\/stonne",$/;"	s	object:9
dnn_hidden	include/DNNModel.h	/^  RNNHidden* dnn_hidden;$/;"	m	class:DNNModel	typeref:typename:RNNHidden *
dnn_layer	include/CompilerComponent.h	/^    DNNLayer* dnn_layer;$/;"	m	class:CompilerComponent	typeref:typename:DNNLayer *
dnn_layer	include/OSMeshSDMemory.h	/^    DNNLayer* dnn_layer; \/\/ Layer loaded in the accelerator$/;"	m	class:OSMeshSDMemory	typeref:typename:DNNLayer *
dnn_layer	include/SDMemory.h	/^    DNNLayer* dnn_layer; \/\/ Layer loaded in the accelerator$/;"	m	class:SDMemory	typeref:typename:DNNLayer *
dnn_layer	include/SDMemory.h	/^    DNNLayer* dnn_layer;$/;"	m	class:VNAT_Register	typeref:typename:DNNLayer *
dnn_layer	include/STONNEModel.h	/^    DNNLayer* dnn_layer; $/;"	m	class:Stonne	typeref:typename:DNNLayer *
dnn_layer	include/SparseSDMemory.h	/^    DNNLayer* dnn_layer; \/\/ Layer loaded in the accelerator$/;"	m	class:SparseSDMemory	typeref:typename:DNNLayer *
double_switches	include/ASNetwork.h	/^    std::vector<ASwitch*> double_switches; \/\/List of double switches that are double reduction/;"	m	class:ASNetwork	typeref:typename:std::vector<ASwitch * >
double_switches	include/FENetwork.h	/^    std::vector<FEASwitch*> double_switches; \/\/List of double switches that are double reducti/;"	m	class:FENetwork	typeref:typename:std::vector<FEASwitch * >
dsnet	include/STONNEModel.h	/^    DistributionNetwork* dsnet; \/\/Distribution Network$/;"	m	class:Stonne	typeref:typename:DistributionNetwork *
dsnetworks	include/DSNetworkTop.h	/^    std::vector<DSNetwork*> dsnetworks; \/\/one per port$/;"	m	class:DSNetworkTop	typeref:typename:std::vector<DSNetwork * >
dswitchStats	include/DSwitch.h	/^    DSwitchStats dswitchStats; \/\/contains the counters to track the behaviour of the DSwitch$/;"	m	class:DSwitch	typeref:typename:DSwitchStats
dswitchtable	include/DSNetwork.h	/^    std::map<std::pair<int, int>, DSwitch* > dswitchtable; \/\/Map with the switches of the topo/;"	m	class:DSNetwork	typeref:typename:std::map<std::pair<int,int>,DSwitch * >
eat_digits	external/cpptoml.h	/^    int eat_digits(int len)$/;"	f	class:cpptoml::consumer	typeref:typename:int
eat_or	external/cpptoml.h	/^    void eat_or(char a, char b)$/;"	f	class:cpptoml::consumer	typeref:typename:void
empty	external/cpptoml.h	/^    bool empty() const$/;"	f	class:cpptoml::table	typeref:typename:bool
empty_	external/cpptoml.h	/^    bool empty_;$/;"	m	class:cpptoml::option	typeref:typename:bool
enabled	include/Component.h	/^    bool enabled;               \/\/ This flag set if the device is on$/;"	m	class:Component	typeref:typename:bool
enabler	external/cpptoml.h	/^    using enabler = typename value_type::make_shared_enabler;$/;"	t	function:cpptoml::make_value	typeref:typename:value_type::make_shared_enabler
end	external/cpptoml.h	/^    const_iterator end() const$/;"	f	class:cpptoml::array	typeref:typename:const_iterator
end	external/cpptoml.h	/^    const_iterator end() const$/;"	f	class:cpptoml::table	typeref:typename:const_iterator
end	external/cpptoml.h	/^    const_iterator end() const$/;"	f	class:cpptoml::table_array	typeref:typename:const_iterator
end	external/cpptoml.h	/^    iterator end()$/;"	f	class:cpptoml::array	typeref:typename:iterator
end	external/cpptoml.h	/^    iterator end()$/;"	f	class:cpptoml::table	typeref:typename:iterator
end	external/cpptoml.h	/^    iterator end()$/;"	f	class:cpptoml::table_array	typeref:typename:iterator
end_	external/cpptoml.h	/^    const std::string::iterator& end_;$/;"	m	class:cpptoml::consumer	typeref:typename:const std::string::iterator &
endline	external/cpptoml.h	/^    void endline()$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
energy	include/define.h	/^  energy = 1,$/;"	e	enum:OptGoal
energy_efficiency	include/define.h	/^  energy_efficiency = 2,$/;"	e	enum:OptGoal
eol_or_comment	external/cpptoml.h	/^    void eol_or_comment(const std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:void
erase	external/cpptoml.h	/^    iterator erase(iterator position)$/;"	f	class:cpptoml::array	typeref:typename:iterator
erase	external/cpptoml.h	/^    iterator erase(iterator position)$/;"	f	class:cpptoml::table_array	typeref:typename:iterator
erase	external/cpptoml.h	/^    void erase(const std::string& key)$/;"	f	class:cpptoml::table	typeref:typename:void
error	external/cpptoml.h	/^    void error()$/;"	f	class:cpptoml::consumer	typeref:typename:void
escape_string	external/cpptoml.h	/^    static std::string escape_string(const std::string& str)$/;"	f	class:cpptoml::toml_writer	typeref:typename:std::string
execution_finished	include/OSMeshSDMemory.h	/^    bool execution_finished; \/\/Flag that indicates when the execution is over. This happens wh/;"	m	class:OSMeshSDMemory	typeref:typename:bool
execution_finished	include/SDMemory.h	/^    bool execution_finished; \/\/Flag that indicates when the execution is over. This happens wh/;"	m	class:SDMemory	typeref:typename:bool
execution_finished	include/SparseSDMemory.h	/^    bool execution_finished; \/\/Flag that indicates when the execution is over. This happens wh/;"	m	class:SparseSDMemory	typeref:typename:bool
existPendingData	src/Connection.cpp	/^bool Connection::existPendingData() {$/;"	f	class:Connection	typeref:typename:bool
fc	include/define.h	/^  fc = 2,$/;"	e	enum:ConfigType
fifo	include/Fifo.h	/^    std::queue<DataPackage*> fifo;$/;"	m	class:Fifo	typeref:typename:std::queue<DataPackage * >
fifoStats	include/Fifo.h	/^    FifoStats fifoStats; \/\/Tracking parameters$/;"	m	class:Fifo	typeref:typename:FifoStats
fifo_size	include/CollectionBus.h	/^    unsigned int fifo_size;$/;"	m	class:Bus	typeref:typename:unsigned int
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/ASNetwork.cpp",$/;"	s	object:2
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/ASwitch.cpp",$/;"	s	object:3
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/AccumulationBuffer.cpp",$/;"	s	object:0
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/Accumulator.cpp",$/;"	s	object:1
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/CollectionBus.cpp",$/;"	s	object:4
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/CollectionBusLine.cpp",$/;"	s	object:5
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/CompilerART.cpp",$/;"	s	object:6
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/CompilerFEN.cpp",$/;"	s	object:7
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/CompilerMSN.cpp",$/;"	s	object:8
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/CompilerMultiplierMesh.cpp",$/;"	s	object:9
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/Config.cpp",$/;"	s	object:10
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/Connection.cpp",$/;"	s	object:11
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/DNNLayer.cpp",$/;"	s	object:13
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/DNNModel.cpp",$/;"	s	object:14
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/DSNetwork.cpp",$/;"	s	object:15
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/DSNetworkTop.cpp",$/;"	s	object:16
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/DSwitch.cpp",$/;"	s	object:17
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/DataPackage.cpp",$/;"	s	object:12
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/FEASwitch.cpp",$/;"	s	object:18
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/FENetwork.cpp",$/;"	s	object:19
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/Fifo.cpp",$/;"	s	object:20
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/LookupTable.cpp",$/;"	s	object:21
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/MSNetwork.cpp",$/;"	s	object:23
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/MSwitch.cpp",$/;"	s	object:24
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/MultiplierOS.cpp",$/;"	s	object:25
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/OSMeshMN.cpp",$/;"	s	object:26
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/OSMeshSDMemory.cpp",$/;"	s	object:27
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/SDMemory.cpp",$/;"	s	object:28
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/STONNEModel.cpp",$/;"	s	object:31
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/SparseSDMemory.cpp",$/;"	s	object:29
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/Stats.cpp",$/;"	s	object:30
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/TemporalRN.cpp",$/;"	s	object:32
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/Tile.cpp",$/;"	s	object:34
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/main.cpp",$/;"	s	object:22
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/testbench.cpp",$/;"	s	object:33
file	compile_commands.json	/^    "file": "\/home\/dalton\/desktop\/stonne\/stonne\/src\/utility.cpp",$/;"	s	object:35
fill_	external/cpptoml.h	/^    std::ostream::char_type fill_;$/;"	m	class:cpptoml::fill_guard	typeref:typename:std::ostream::char_type
fill_guard	external/cpptoml.h	/^    fill_guard(std::ostream& os) : os_(os), fill_{os.fill()}$/;"	f	class:cpptoml::fill_guard
fill_guard	external/cpptoml.h	/^class fill_guard$/;"	c	namespace:cpptoml
filter_address	include/SDMemory.h	/^    address_t filter_address;$/;"	m	class:SDMemory	typeref:typename:address_t
filter_channel	include/DNNModel.h	/^  int filter_channel;$/;"	m	class:CNNFilter	typeref:typename:int
filter_number	include/DNNModel.h	/^  int filter_number;$/;"	m	class:CNNFilter	typeref:typename:int
filter_size	include/SDMemory.h	/^    unsigned int filter_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
filter_x	include/DNNModel.h	/^  int filter_x;$/;"	m	class:CNNFilter	typeref:typename:int
filter_y	include/DNNModel.h	/^  int filter_y;$/;"	m	class:CNNFilter	typeref:typename:int
find_end_of_date	external/cpptoml.h	/^    std::string::iterator find_end_of_date(std::string::iterator it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string::iterator
find_end_of_number	external/cpptoml.h	/^    std::string::iterator find_end_of_number(std::string::iterator it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string::iterator
find_end_of_time	external/cpptoml.h	/^    std::string::iterator find_end_of_time(std::string::iterator it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string::iterator
finished	include/SDMemory.h	/^    bool finished;$/;"	m	class:VNAT_Register	typeref:typename:bool
fl_direction	include/ASwitch.h	/^    fl_t fl_direction;                               \/\/ RECEIVE or SEND. Each adder will be co/;"	m	class:ASwitch	typeref:typename:fl_t
fl_direction	include/FEASwitch.h	/^    fl_t fl_direction;                               \/\/ RECEIVE or SEND. Each adder will be co/;"	m	class:FEASwitch	typeref:typename:fl_t
fl_t	include/types.h	/^enum fl_t {RECEIVE, SEND, NOT_CONFIGURED}; \/\/\/forwarding link type$/;"	g
folding	include/Tile.h	/^    bool folding;             \/\/ T_R x T_S x T_C < R*S*C. Neccesary to generate the signals$/;"	m	class:Tile	typeref:typename:bool
folding	include/Tile.h	/^    bool folding;$/;"	m	class:SparseVN	typeref:typename:bool
foldingconnectiontable	include/FENetwork.h	/^    std::map<std::pair<int, int>, Connection*> foldingconnectiontable; \/\/Forwarding connection/;"	m	class:FENetwork	typeref:typename:std::map<std::pair<int,int>,Connection * >
forward	src/MSwitch.cpp	/^void MSwitch::forward(DataPackage* activation_to_forward)$/;"	f	class:MSwitch	typeref:typename:void
forward_bottom	include/MultiplierOS.h	/^    bool forward_bottom=false;$/;"	m	class:MultiplierOS	typeref:typename:bool
forward_psum	include/MSwitch.h	/^  bool forward_psum;   \/\/ Indicates if the behaviour of this MS is to forward a$/;"	m	class:MSwitch	typeref:typename:bool
forward_right	include/MultiplierOS.h	/^    bool forward_right=false; \/\/Based on rows (windows) left and dimensions$/;"	m	class:MultiplierOS	typeref:typename:bool
forward_to_fold_node	include/FEASwitch.h	/^    bool forward_to_fold_node;$/;"	m	class:FEASwitch	typeref:typename:bool
forward_to_memory	include/ASwitch.h	/^    bool forward_to_memory;                           \/\/ To optimize. If the psum is already c/;"	m	class:ASwitch	typeref:typename:bool
forward_to_memory	include/FEASwitch.h	/^    bool forward_to_memory;                           \/\/ To optimize. If the psum is already c/;"	m	class:FEASwitch	typeref:typename:bool
forwardingConfiguration	src/ASNetwork.cpp	/^void ASNetwork::forwardingConfiguration(std::map<std::pair<int,int>, fl_t> fl_configurations) {$/;"	f	class:ASNetwork	typeref:typename:void
forwardingConfiguration	src/FENetwork.cpp	/^void FENetwork::forwardingConfiguration(std::map<std::pair<int,int>, fl_t> fl_configurations) {$/;"	f	class:FENetwork	typeref:typename:void
forwardingConnection	include/ASwitch.h	/^    Connection* forwardingConnection;                \/\/ connection from the neighbour Adder. I/;"	m	class:ASwitch	typeref:typename:Connection *
forwardingConnection	include/FEASwitch.h	/^    Connection* forwardingConnection;                \/\/ connection from the neighbour Adder. I/;"	m	class:FEASwitch	typeref:typename:Connection *
forwardingPsumConfig	src/MSNetwork.cpp	/^void MSNetwork::forwardingPsumConfig($/;"	f	class:MSNetwork	typeref:typename:void
forwardingToFoldNodeConfiguration	src/FENetwork.cpp	/^void FENetwork::forwardingToFoldNodeConfiguration(std::map<std::pair<int,int>, bool> forwarding_/;"	f	class:FENetwork	typeref:typename:void
forwardingToMemoryConfiguration	src/ASNetwork.cpp	/^void ASNetwork::forwardingToMemoryConfiguration(std::map<std::pair<int,int>, bool> forwarding_to/;"	f	class:ASNetwork	typeref:typename:void
forwardingToMemoryConfiguration	src/FENetwork.cpp	/^void FENetwork::forwardingToMemoryConfiguration(std::map<std::pair<int,int>, bool> forwarding_to/;"	f	class:FENetwork	typeref:typename:void
forwarding_bottom_enabled	include/CompilerMultiplierMesh.h	/^    std::map<std::pair<int, int>, bool> forwarding_bottom_enabled; \/\/Forwarding to the bottom /;"	m	class:CompilerMultiplierMesh	typeref:typename:std::map<std::pair<int,int>,bool>
forwarding_input_fifo	include/MSwitch.h	/^  Fifo* forwarding_input_fifo;  \/\/ Package received from the neighbour$/;"	m	class:MSwitch	typeref:typename:Fifo *
forwarding_output_fifo	include/MSwitch.h	/^  Fifo* forwarding_output_fifo; \/\/ Packages accumulated to be sent to the fw$/;"	m	class:MSwitch	typeref:typename:Fifo *
forwarding_ports	include/ASwitch.h	/^    unsigned int forwarding_ports;                  \/\/Intermedium links between some nodes of /;"	m	class:ASwitch	typeref:typename:unsigned int
forwarding_ports	include/Config.h	/^    unsigned int forwarding_ports; \/\/ Number of forwarding ports of the MS. This is basically /;"	m	class:MSwitchConfig	typeref:typename:unsigned int
forwarding_ports	include/Config.h	/^    unsigned int forwarding_ports; \/\/Nuber of forwarding ports of the ASwitch.$/;"	m	class:ASwitchConfig	typeref:typename:unsigned int
forwarding_ports	include/FEASwitch.h	/^    unsigned int forwarding_ports;                  \/\/Intermedium links between some nodes of /;"	m	class:FEASwitch	typeref:typename:unsigned int
forwarding_ports	include/MSNetwork.h	/^    unsigned int forwarding_ports; \/\/MSNetwork needs this parameter to create the network$/;"	m	class:MSNetwork	typeref:typename:unsigned int
forwarding_ports	include/MSwitch.h	/^  unsigned int forwarding_ports;$/;"	m	class:MSwitch	typeref:typename:unsigned int
forwarding_ports	include/MultiplierOS.h	/^    unsigned int forwarding_ports;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
forwarding_ports	include/OSMeshMN.h	/^    unsigned int forwarding_ports; \/\/MSNetwork needs this parameter to create the network$/;"	m	class:OSMeshMN	typeref:typename:unsigned int
forwarding_psum_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> forwarding_psum_enabled; \/\/Indicates if the MS has to forward/;"	m	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
forwarding_right_enabled	include/CompilerMultiplierMesh.h	/^    std::map<std::pair<int,int>, bool> forwarding_right_enabled; \/\/Forwrding to the right ms$/;"	m	class:CompilerMultiplierMesh	typeref:typename:std::map<std::pair<int,int>,bool>
forwarding_to_fold_node_enabled	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, bool> forwarding_to_fold_node_enabled; \/\/Indicates to each af/;"	m	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,bool>
forwarding_to_memory_enabled	include/CompilerART.h	/^    std::map<std::pair<int,int>, bool> forwarding_to_memory_enabled; \/\/Indicates for each adde/;"	m	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,bool>
forwarding_to_memory_enabled	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, bool> forwarding_to_memory_enabled; \/\/Indicates for each adde/;"	m	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,bool>
forwardingconnectiontable	include/ASNetwork.h	/^    std::map<std::pair<int, int>, Connection*> forwardingconnectiontable; \/\/ Forwarding connec/;"	m	class:ASNetwork	typeref:typename:std::map<std::pair<int,int>,Connection * >
forwardingconnectiontable	include/FENetwork.h	/^    std::map<std::pair<int, int>, Connection*> forwardingconnectiontable; \/\/ Forwarding connec/;"	m	class:FENetwork	typeref:typename:std::map<std::pair<int,int>,Connection * >
from_local	external/cpptoml.h	/^    static inline struct offset_datetime from_local(const struct tm& t)$/;"	f	struct:cpptoml::offset_datetime	typeref:typename:CPPTOML_DEPRECATED ("from_local has been renamed to from_zoned")struct offset_datetime
from_utc	external/cpptoml.h	/^    static inline struct offset_datetime from_utc(const struct tm& t)$/;"	f	struct:cpptoml::offset_datetime	typeref:struct:offset_datetime
from_zoned	external/cpptoml.h	/^    static inline struct offset_datetime from_zoned(const struct tm& t)$/;"	f	struct:cpptoml::offset_datetime	typeref:struct:offset_datetime
front	src/Fifo.cpp	/^DataPackage* Fifo::front() {$/;"	f	class:Fifo	typeref:typename:DataPackage *
fwLinksConfig	src/MSNetwork.cpp	/^void MSNetwork::fwLinksConfig(std::map<unsigned int, bool> ms_fwsend_enabled,$/;"	f	class:MSNetwork	typeref:typename:void
fw_enabled	include/ASwitch.h	/^    bool fw_enabled; \/\/Set if the fw is enabled$/;"	m	class:ASwitch	typeref:typename:bool
fw_enabled	include/FEASwitch.h	/^    bool fw_enabled; \/\/Set if the fw is enabled$/;"	m	class:FEASwitch	typeref:typename:bool
fw_link_enabled	include/SDMemory.h	/^    bool fw_link_enabled; \/\/Indicates if the fw link is enabled in this cycle and therefore th/;"	m	class:SDMemory	typeref:typename:bool
fwconnectiontable	include/MSNetwork.h	/^    std::map<int, Connection*> fwconnectiontable; \/\/Table with the forwarding connections. Eac/;"	m	class:MSNetwork	typeref:typename:std::map<int,Connection * >
fwlinks_configuration	include/CompilerART.h	/^    std::map<std::pair<int,int>, fl_t> fwlinks_configuration; \/\/Indicates for each adder if ha/;"	m	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,fl_t>
fwlinks_configuration	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, fl_t> fwlinks_configuration; \/\/Indicates for each adder if ha/;"	m	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,fl_t>
generateBitMapFromDense	src/utility.cpp	/^unsigned int* generateBitMapFromDense(float* denseMatrix, unsigned int rows, unsigned int cols, /;"	f	typeref:typename:unsigned int *
generateMajorPointerFromDense	src/utility.cpp	/^int* generateMajorPointerFromDense(float* denseMatrix, unsigned int rows, unsigned int cols, GEN/;"	f	typeref:typename:int *
generateMatrixDense	src/utility.cpp	/^float* generateMatrixDense(unsigned int rows, unsigned int cols, unsigned int sparsity) {$/;"	f	typeref:typename:float *
generateMatrixSparseFromDense	src/utility.cpp	/^float* generateMatrixSparseFromDense(float* denseMatrix, unsigned int* bitmap, unsigned int rows/;"	f	typeref:typename:float *
generateMatrixSparseFromDenseNoBitmap	src/utility.cpp	/^float* generateMatrixSparseFromDenseNoBitmap(float* denseMatrix, unsigned int rows, unsigned int/;"	f	typeref:typename:float *
generateMinorIDFromDense	src/utility.cpp	/^int* generateMinorIDFromDense(float* denseMatrix, unsigned int rows, unsigned int cols, int &nnz/;"	f	typeref:typename:int *
generatePrunnedMatrix	src/utility.cpp	/^float* generatePrunnedMatrix(const float* src_matrix, unsigned int size, float pr_ratio) {$/;"	f	typeref:typename:float *
generate_art_enabling_links	src/CompilerART.cpp	/^void CompilerART::generate_art_enabling_links(unsigned int num_ms) {$/;"	f	class:CompilerART	typeref:typename:void
generate_art_enabling_links_sparse	src/CompilerART.cpp	/^void CompilerART::generate_art_enabling_links_sparse(unsigned int num_ms) {$/;"	f	class:CompilerART	typeref:typename:void
generate_art_signals	src/CompilerART.cpp	/^void CompilerART::generate_art_signals(unsigned int num_ms) {$/;"	f	class:CompilerART	typeref:typename:void
generate_art_signals_sparse	src/CompilerART.cpp	/^void CompilerART::generate_art_signals_sparse(unsigned int num_ms) {$/;"	f	class:CompilerART	typeref:typename:void
generate_fen_enabling_links	src/CompilerFEN.cpp	/^void CompilerFEN::generate_fen_enabling_links(unsigned int num_ms) {$/;"	f	class:CompilerFEN	typeref:typename:void
generate_fen_signals	src/CompilerFEN.cpp	/^void CompilerFEN::generate_fen_signals(unsigned int num_ms) {$/;"	f	class:CompilerFEN	typeref:typename:void
generate_ms_signals	src/CompilerMSN.cpp	/^void CompilerMSN::generate_ms_signals(unsigned int num_ms) {$/;"	f	class:CompilerMSN	typeref:typename:void
generate_ms_signals	src/CompilerMultiplierMesh.cpp	/^void CompilerMultiplierMesh::generate_ms_signals(unsigned int ms_rows, unsigned int ms_cols) {$/;"	f	class:CompilerMultiplierMesh	typeref:typename:void
generate_ms_sparse_signals	src/CompilerMSN.cpp	/^void CompilerMSN::generate_ms_sparse_signals(unsigned int num_ms) {$/;"	f	class:CompilerMSN	typeref:typename:void
get	external/cpptoml.h	/^    T& get()$/;"	f	class:cpptoml::value	typeref:typename:T &
get	external/cpptoml.h	/^    const T& get() const$/;"	f	class:cpptoml::value	typeref:typename:const T &
get	external/cpptoml.h	/^    const std::vector<std::shared_ptr<base>>& get() const$/;"	f	class:cpptoml::array	typeref:typename:const std::vector<std::shared_ptr<base>> &
get	external/cpptoml.h	/^    const std::vector<std::shared_ptr<table>>& get() const$/;"	f	class:cpptoml::table_array	typeref:typename:const std::vector<std::shared_ptr<table>> &
get	external/cpptoml.h	/^    std::shared_ptr<base> get(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<base>
get	external/cpptoml.h	/^    std::vector<std::shared_ptr<base>>& get()$/;"	f	class:cpptoml::array	typeref:typename:std::vector<std::shared_ptr<base>> &
get	external/cpptoml.h	/^    std::vector<std::shared_ptr<table>>& get()$/;"	f	class:cpptoml::table_array	typeref:typename:std::vector<std::shared_ptr<table>> &
getAccumulationBufferID	include/ASwitch.h	/^    unsigned int getAccumulationBufferID()    const {return this->accumulationBufferID;}$/;"	f	class:ASwitch	typeref:typename:unsigned int
getComponentName	include/Component.h	/^    const string& getComponentName() const       {return componentName;}$/;"	f	class:Component	typeref:typename:const string &
getConfig	include/ASwitch.h	/^    const adderconfig_t getConfig()           const {return this->config_mode;} \/\/ Get the cur/;"	f	class:ASwitch	typeref:typename:const adderconfig_t
getConfig	include/FEASwitch.h	/^    const adderconfig_t getConfig()           const {return this->config_mode;} \/\/ Get the cur/;"	f	class:FEASwitch	typeref:typename:const adderconfig_t
getDoubleSwitches	include/ASNetwork.h	/^    std::vector<ASwitch*> getDoubleSwitches() {return this->double_switches;}$/;"	f	class:ASNetwork	typeref:typename:std::vector<ASwitch * >
getDoubleSwitches	include/FENetwork.h	/^    std::vector<FEASwitch*> getDoubleSwitches() {return this->double_switches;}$/;"	f	class:FENetwork	typeref:typename:std::vector<FEASwitch * >
getEnergyTable	energy_tables/calculate_energy.py	/^def getEnergyTable(table_file, out_file):$/;"	f
getFlDirection	include/ASwitch.h	/^    const fl_t getFlDirection()    const {return this->fl_direction;}                   \/\/ Get/;"	f	class:ASwitch	typeref:typename:const fl_t
getFlDirection	include/FEASwitch.h	/^    const fl_t getFlDirection()    const {return this->fl_direction;}                   \/\/ Get/;"	f	class:FEASwitch	typeref:typename:const fl_t
getFolding	include/Tile.h	/^    bool getFolding() {return this->folding;}$/;"	f	class:SparseVN	typeref:typename:bool
getForwardingConnections	src/MSNetwork.cpp	/^std::map<int, Connection*> MSNetwork::getForwardingConnections()$/;"	f	class:MSNetwork	typeref:typename:std::map<int,Connection * >
getForwardingPorts	include/ASwitch.h	/^    const unsigned int getForwardingPorts() const {return this->forwarding_ports;}              /;"	f	class:ASwitch	typeref:typename:const unsigned int
getForwardingPorts	include/FEASwitch.h	/^    const unsigned int getForwardingPorts() const {return this->forwarding_ports;}              /;"	f	class:FEASwitch	typeref:typename:const unsigned int
getId	include/Component.h	/^    const id_t getId() const                     {return id;}$/;"	f	class:Component	typeref:typename:const id_t
getIdleCycles	include/Component.h	/^    const cycles_t getIdleCycles() const         {return idleCycles;}$/;"	f	class:Component	typeref:typename:const cycles_t
getInputConnectionFromBusLine	src/CollectionBus.cpp	/^Connection* Bus::getInputConnectionFromBusLine(unsigned int busID, unsigned int inputID) {$/;"	f	class:Bus	typeref:typename:Connection *
getInputConnections	include/CollectionBusLine.h	/^    std::vector<Connection*> getInputConnections() {return this->input_connections;}$/;"	f	class:CollectionBusLine	typeref:typename:std::vector<Connection * >
getInputConnections	src/CollectionBus.cpp	/^std::vector<std::vector<Connection*>> Bus::getInputConnections() {$/;"	f	class:Bus	typeref:typename:std::vector<std::vector<Connection * >>
getInputPort	src/CollectionBusLine.cpp	/^Connection* CollectionBusLine::getInputPort(unsigned int inputID) {$/;"	f	class:CollectionBusLine	typeref:typename:Connection *
getInputPorts	include/ASwitch.h	/^    const unsigned int getInputPorts() const {return this->input_ports;}                        /;"	f	class:ASwitch	typeref:typename:const unsigned int
getInputPorts	include/DSwitch.h	/^    const unsigned int getInputPorts() const {return this->input_ports;} \/\/Get the input ports$/;"	f	class:DSwitch	typeref:typename:const unsigned int
getInputPorts	include/FEASwitch.h	/^    const unsigned int getInputPorts() const {return this->input_ports;}                        /;"	f	class:FEASwitch	typeref:typename:const unsigned int
getInputPortsBusLine	include/CollectionBus.h	/^    unsigned int getInputPortsBusLine()   {return this->input_ports_bus_line;}$/;"	f	class:Bus	typeref:typename:unsigned int
getIterationK	include/DataPackage.h	/^    unsigned int getIterationK()           const {return this->iteration_k;}$/;"	f	class:DataPackage	typeref:typename:unsigned int
getLastLevelConnections	include/DistributionNetwork.h	/^    virtual std::map<int, Connection*> getLastLevelConnections() {assert(false);} $/;"	f	class:DistributionNetwork	typeref:typename:std::map<int,Connection * >
getLastLevelConnections	include/ReduceNetwork.h	/^    virtual std::map<int, Connection*> getLastLevelConnections() {assert(false);}$/;"	f	class:ReduceNetwork	typeref:typename:std::map<int,Connection * >
getLastLevelConnections	src/ASNetwork.cpp	/^std::map<int, Connection*> ASNetwork::getLastLevelConnections() {$/;"	f	class:ASNetwork	typeref:typename:std::map<int,Connection * >
getLastLevelConnections	src/DSNetwork.cpp	/^std::map<int, Connection*> DSNetwork::getLastLevelConnections() {$/;"	f	class:DSNetwork	typeref:typename:std::map<int,Connection * >
getLastLevelConnections	src/DSNetworkTop.cpp	/^std::map<int, Connection*> DSNetworkTop::getLastLevelConnections() {$/;"	f	class:DSNetworkTop	typeref:typename:std::map<int,Connection * >
getLastLevelConnections	src/FENetwork.cpp	/^std::map<int, Connection*> FENetwork::getLastLevelConnections() {$/;"	f	class:FENetwork	typeref:typename:std::map<int,Connection * >
getLastLevelConnections	src/TemporalRN.cpp	/^std::map<int, Connection*> TemporalRN::getLastLevelConnections() {$/;"	f	class:TemporalRN	typeref:typename:std::map<int,Connection * >
getLatency	include/ASwitch.h	/^    const cycles_t getLatency()    const {return this->latency;}                        \/\/ Get/;"	f	class:ASwitch	typeref:typename:const cycles_t
getLatency	include/FEASwitch.h	/^    const cycles_t getLatency()    const {return this->latency;}                        \/\/ Get/;"	f	class:FEASwitch	typeref:typename:const cycles_t
getLevel	include/ASwitch.h	/^    const unsigned int getLevel()      const {return this->level;}$/;"	f	class:ASwitch	typeref:typename:const unsigned int
getLevel	include/FEASwitch.h	/^    const unsigned int getLevel()      const {return this->level;}$/;"	f	class:FEASwitch	typeref:typename:const unsigned int
getMSwitches	src/MSNetwork.cpp	/^std::map<int, MSwitch*> MSNetwork::getMSwitches()$/;"	f	class:MSNetwork	typeref:typename:std::map<int,MSwitch * >
getMSwitches	src/OSMeshMN.cpp	/^std::map<std::pair<int,int>, MultiplierOS*> OSMeshMN::getMSwitches() {$/;"	f	class:OSMeshMN	typeref:typename:std::map<std::pair<int,int>,MultiplierOS * >
getMsSize	include/ASNetwork.h	/^    const int getMsSize()   const { return this->ms_size; }$/;"	f	class:ASNetwork	typeref:typename:const int
getMsSize	include/DSNetwork.h	/^    const int getMsSize()   const { return this->ms_size; }$/;"	f	class:DSNetwork	typeref:typename:const int
getMsSize	include/FENetwork.h	/^    const int getMsSize()   const { return this->ms_size; }$/;"	f	class:FENetwork	typeref:typename:const int
getNAcummulator	include/Accumulator.h	/^    const unsigned int getNAcummulator()      const {return this->n_accumulator;}$/;"	f	class:Accumulator	typeref:typename:const unsigned int
getNBusLines	include/CollectionBus.h	/^    unsigned int getNBusLines()    {return this->n_bus_lines;}$/;"	f	class:Bus	typeref:typename:unsigned int
getNLevels	include/ASNetwork.h	/^    const int getNLevels()  const { return this->nlevels; }$/;"	f	class:ASNetwork	typeref:typename:const int
getNLevels	include/DSNetwork.h	/^    const int getNLevels()  const { return this->nlevels; }$/;"	f	class:DSNetwork	typeref:typename:const int
getNLevels	include/FENetwork.h	/^    const int getNLevels()  const { return this->nlevels; }$/;"	f	class:FENetwork	typeref:typename:const int
getNumInLevel	include/ASwitch.h	/^    const unsigned int getNumInLevel() const {return this->num_in_level;}$/;"	f	class:ASwitch	typeref:typename:const unsigned int
getNumInLevel	include/FEASwitch.h	/^    const unsigned int getNumInLevel() const {return this->num_in_level;}$/;"	f	class:FEASwitch	typeref:typename:const unsigned int
getOperationMode	include/ASwitch.h	/^    const adderoperation_t getOperationMode() const {return this->operation_mode;}             \//;"	f	class:ASwitch	typeref:typename:const adderoperation_t
getOperationMode	include/FEASwitch.h	/^    const adderoperation_t getOperationMode() const {return this->operation_mode;}             \//;"	f	class:FEASwitch	typeref:typename:const adderoperation_t
getOutputConnections	src/CollectionBus.cpp	/^std::vector<Connection*> Bus::getOutputConnections() {$/;"	f	class:Bus	typeref:typename:std::vector<Connection * >
getOutputPort	include/CollectionBusLine.h	/^    Connection* getOutputPort() {return this->output_port;}$/;"	f	class:CollectionBusLine	typeref:typename:Connection *
getOutputPort	include/DataPackage.h	/^    unsigned int getOutputPort()           const {return this->output_port;}$/;"	f	class:DataPackage	typeref:typename:unsigned int
getOutputPorts	include/ASwitch.h	/^    const unsigned int getOutputPorts() const {return this->output_ports;}                      /;"	f	class:ASwitch	typeref:typename:const unsigned int
getOutputPorts	include/Accumulator.h	/^    const unsigned int getOutputPorts() const {return this->output_ports;}                      /;"	f	class:Accumulator	typeref:typename:const unsigned int
getOutputPorts	include/DSwitch.h	/^    const unsigned int getOutputPorts() const {return this->output_ports;} \/\/get the output po/;"	f	class:DSwitch	typeref:typename:const unsigned int
getOutputPorts	include/FEASwitch.h	/^    const unsigned int getOutputPorts() const {return this->output_ports;}                      /;"	f	class:FEASwitch	typeref:typename:const unsigned int
getSingleSwitches	include/ASNetwork.h	/^    std::vector<ASwitch*> getSingleSwitches() {return this->single_switches;}$/;"	f	class:ASNetwork	typeref:typename:std::vector<ASwitch * >
getSingleSwitches	include/FENetwork.h	/^    std::vector<FEASwitch*> getSingleSwitches() {return this->single_switches;}$/;"	f	class:FENetwork	typeref:typename:std::vector<FEASwitch * >
getTile	include/CompilerART.h	/^    Tile* getTile() {assert(signals_configured); return this->current_tile;}$/;"	f	class:CompilerART	typeref:typename:Tile *
getTile	include/CompilerComponent.h	/^    Tile* getTile() {assert(signals_configured); return this->current_tile;}$/;"	f	class:CompilerComponent	typeref:typename:Tile *
getTile	include/CompilerFEN.h	/^    Tile* getTile() {assert(signals_configured); return this->current_tile;}$/;"	f	class:CompilerFEN	typeref:typename:Tile *
getTile	include/CompilerMSN.h	/^    Tile* getTile() {assert(signals_configured); return this->current_tile;}$/;"	f	class:CompilerMSN	typeref:typename:Tile *
getTile	include/CompilerMultiplierMesh.h	/^    Tile* getTile() {assert(signals_configured); return this->current_tile;}$/;"	f	class:CompilerMultiplierMesh	typeref:typename:Tile *
getTopConnections	include/DistributionNetwork.h	/^    virtual std::vector<Connection*> getTopConnections() {assert(false);} $/;"	f	class:DistributionNetwork	typeref:typename:std::vector<Connection * >
getTopConnections	src/DSNetworkTop.cpp	/^std::vector<Connection*> DSNetworkTop::getTopConnections() {$/;"	f	class:DSNetworkTop	typeref:typename:std::vector<Connection * >
getTotalCycles	include/Component.h	/^    const cycles_t getTotalCycles() const        {return totalCycles;}$/;"	f	class:Component	typeref:typename:const cycles_t
getWritePortConnections	include/OSMeshSDMemory.h	/^   std::vector<Connection*> getWritePortConnections()    const {return this->write_port_connecti/;"	f	class:OSMeshSDMemory	typeref:typename:std::vector<Connection * >
getWritePortConnections	include/SDMemory.h	/^   std::vector<Connection*> getWritePortConnections()    const {return this->write_port_connecti/;"	f	class:SDMemory	typeref:typename:std::vector<Connection * >
getWritePortConnections	include/SparseSDMemory.h	/^   std::vector<Connection*> getWritePortConnections()    const {return this->write_port_connecti/;"	f	class:SparseSDMemory	typeref:typename:std::vector<Connection * >
get_C	include/DNNLayer.h	/^    unsigned int get_C()          const {return this->C;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_G	include/DNNLayer.h	/^    unsigned int get_G()          const {return this->G;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_K	include/DNNLayer.h	/^    unsigned int get_K()          const {return this->K;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_N	include/DNNLayer.h	/^    unsigned int get_N()          const {return this->N;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_Num_VNs	include/Tile.h	/^    unsigned int get_Num_VNs()       const   {return this->Num_VNs;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_R	include/DNNLayer.h	/^    unsigned int get_R()          const {return this->R;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_S	include/DNNLayer.h	/^    unsigned int get_S()          const {return this->S;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_T_C	include/Tile.h	/^    unsigned int get_T_C()       const   {return this->T_C;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_G	include/Tile.h	/^    unsigned int get_T_G()       const   {return this->T_G;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_K	include/Tile.h	/^    unsigned int get_T_K()       const   {return this->T_K;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_N	include/Tile.h	/^    unsigned int get_T_N()       const   {return this->T_N;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_R	include/Tile.h	/^    unsigned int get_T_R()       const   {return this->T_R;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_S	include/Tile.h	/^    unsigned int get_T_S()       const   {return this->T_S;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_X_	include/Tile.h	/^    unsigned int get_T_X_()      const   {return this->T_X_;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_T_Y_	include/Tile.h	/^    unsigned int get_T_Y_()      const   {return this->T_Y_;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_VN_Size	include/Tile.h	/^    unsigned int  get_VN_Size() {if(this->folding) {return this->size+1;} else {return this->siz/;"	f	class:SparseVN	typeref:typename:unsigned int
get_VN_Size	include/Tile.h	/^    unsigned int get_VN_Size()       const   {return this->VN_Size;}$/;"	f	class:Tile	typeref:typename:unsigned int
get_X	include/DNNLayer.h	/^    unsigned int get_X()          const {return this->X;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_X_	include/DNNLayer.h	/^    unsigned int get_X_()         const {return this->X_;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_Y	include/DNNLayer.h	/^    unsigned int get_Y()          const {return this->Y;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_Y_	include/DNNLayer.h	/^    unsigned int get_Y_()         const {return this->Y_;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_address	src/SDMemory.cpp	/^unsigned int VNAT_Register::get_address() {$/;"	f	class:VNAT_Register	typeref:typename:unsigned int
get_array	external/cpptoml.h	/^    std::shared_ptr<array> get_array(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<array>
get_array_of	external/cpptoml.h	/^    get_array_of(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:array_of_trait<T>::return_type
get_array_of	external/cpptoml.h	/^    inline typename array_of_trait<T>::return_type get_array_of() const$/;"	f	class:cpptoml::array	typeref:typename:array_of_trait<T>::return_type
get_array_of	external/cpptoml.h	/^array::get_array_of<array>() const$/;"	f	class:cpptoml::array	typeref:typename:array_of_trait<array>::return_type
get_array_of	external/cpptoml.h	/^table::get_array_of<array>(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:array_of_trait<array>::return_type
get_array_qualified	external/cpptoml.h	/^    std::shared_ptr<array> get_array_qualified(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<array>
get_as	external/cpptoml.h	/^    option<T> get_as(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:option<T>
get_childs_enabled	include/CompilerART.h	/^    std::map<std::pair<int,int>, std::pair<bool,bool>> get_childs_enabled() const {return this->/;"	f	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,std::pair<bool,bool>>
get_childs_enabled	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, std::pair<bool,bool>> get_childs_enabled() const {return this->/;"	f	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,std::pair<bool,bool>>
get_data	include/DataPackage.h	/^    const data_t get_data()                    const {return this->data;}$/;"	f	class:DataPackage	typeref:typename:const data_t
get_data_type	include/DataPackage.h	/^    const operand_t get_data_type()            const {return this->data_type;}$/;"	f	class:DataPackage	typeref:typename:const operand_t
get_dests	include/DataPackage.h	/^    const bool* get_dests()                    const {return this->dests;}$/;"	f	class:DataPackage	typeref:typename:const bool *
get_direct_forwarding_psum_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> get_direct_forwarding_psum_enabled() const {return this->direct/;"	f	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
get_folding_enabled	include/Tile.h	/^    bool get_folding_enabled()         const {return this->folding;} \/\/Return whether this til/;"	f	class:Tile	typeref:typename:bool
get_forwarding_bottom_enabled	include/CompilerMultiplierMesh.h	/^    std::map<std::pair<int,int>, bool> get_forwarding_bottom_enabled() const {return this->forwa/;"	f	class:CompilerMultiplierMesh	typeref:typename:std::map<std::pair<int,int>,bool>
get_forwarding_psum_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> get_forwarding_psum_enabled() const {return this->forwarding_ps/;"	f	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
get_forwarding_right_enabled	include/CompilerMultiplierMesh.h	/^    std::map<std::pair<int,int>, bool> get_forwarding_right_enabled() const {return this->forwar/;"	f	class:CompilerMultiplierMesh	typeref:typename:std::map<std::pair<int,int>,bool>
get_forwarding_to_fold_node_enabled	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, bool> get_forwarding_to_fold_node_enabled() const {return this-/;"	f	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,bool>
get_forwarding_to_memory_enabled	include/CompilerART.h	/^    std::map<std::pair<int,int>, bool> get_forwarding_to_memory_enabled() const {return this->fo/;"	f	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,bool>
get_forwarding_to_memory_enabled	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, bool> get_forwarding_to_memory_enabled() const {return this->fo/;"	f	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,bool>
get_fwlinks_configuration	include/CompilerART.h	/^    std::map<std::pair<int,int>, fl_t> get_fwlinks_configuration() const {return this->fwlinks_c/;"	f	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,fl_t>
get_fwlinks_configuration	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, fl_t> get_fwlinks_configuration() const {return this->fwlinks_c/;"	f	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,fl_t>
get_impl	external/cpptoml.h	/^get_impl(const std::shared_ptr<base>& elem)$/;"	f	namespace:cpptoml
get_impl	external/cpptoml.h	/^get_impl(const std::shared_ptr<base>& elem)$/;"	f	namespace:cpptoml	typeref:typename:std::enable_if<!std::is_floating_point<T>::value && std::is_signed<T>::value,option<T>>::type
get_layer_type	include/DNNLayer.h	/^    Layer_t get_layer_type()      const {return this->layer_type;}$/;"	f	class:DNNLayer	typeref:typename:Layer_t
get_ms_fwreceive_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> get_ms_fwreceive_enabled() const {return this->ms_fwreceive_ena/;"	f	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
get_ms_fwsend_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> get_ms_fwsend_enabled() const {return this->ms_fwsend_enabled;}$/;"	f	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
get_ms_vn_configuration	include/CompilerMSN.h	/^    std::map<unsigned int, unsigned int> get_ms_vn_configuration() const {return this->ms_vn_con/;"	f	class:CompilerMSN	typeref:typename:std::map<unsigned int,unsigned int>
get_ms_vn_configuration	include/CompilerMultiplierMesh.h	/^    std::map<std::pair<int,int>, unsigned int> get_ms_vn_configuration() const {return this->ms_/;"	f	class:CompilerMultiplierMesh	typeref:typename:std::map<std::pair<int,int>,unsigned int>
get_n_dests	include/DataPackage.h	/^    unsigned int get_n_dests()                  const {return this->n_dests;}$/;"	f	class:DataPackage	typeref:typename:unsigned int
get_n_folding_configuration	include/CompilerMSN.h	/^    std::map<unsigned int, unsigned int> get_n_folding_configuration() const {return this->n_fol/;"	f	class:CompilerMSN	typeref:typename:std::map<unsigned int,unsigned int>
get_name	include/DNNLayer.h	/^    std::string get_name()        const {return this->layer_name;}$/;"	f	class:DNNLayer	typeref:typename:std::string
get_operation_mode	include/DataPackage.h	/^    adderoperation_t get_operation_mode()   const {return this->operation_mode;}$/;"	f	class:DataPackage	typeref:typename:adderoperation_t
get_qualified	external/cpptoml.h	/^    std::shared_ptr<base> get_qualified(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<base>
get_qualified_array_of	external/cpptoml.h	/^    get_qualified_array_of(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:array_of_trait<T>::return_type
get_qualified_array_of	external/cpptoml.h	/^table::get_qualified_array_of<array>(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:array_of_trait<array>::return_type
get_qualified_as	external/cpptoml.h	/^    option<T> get_qualified_as(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:option<T>
get_size_package	include/DataPackage.h	/^    const size_t get_size_package()            const {return this->size_package;}$/;"	f	class:DataPackage	typeref:typename:const size_t
get_source	include/DataPackage.h	/^    const id_t get_source()                    const {return this->source;}$/;"	f	class:DataPackage	typeref:typename:const id_t
get_strides	include/DNNLayer.h	/^    unsigned int get_strides()    const {return this->strides;}$/;"	f	class:DNNLayer	typeref:typename:unsigned int
get_string_adder_configuration	src/utility.cpp	/^std::string get_string_adder_configuration(adderconfig_t config) {$/;"	f	typeref:typename:std::string
get_string_dataflow_type	src/utility.cpp	/^std::string get_string_dataflow_type(Dataflow dataflow) {$/;"	f	typeref:typename:std::string
get_string_fwlink_direction	src/utility.cpp	/^std::string get_string_fwlink_direction(fl_t fl_direction) {$/;"	f	typeref:typename:std::string
get_string_memory_controller_type	src/utility.cpp	/^std::string get_string_memory_controller_type(MemoryController_t memory_controller_type) {$/;"	f	typeref:typename:std::string
get_string_multiplier_network_type	src/utility.cpp	/^std::string get_string_multiplier_network_type(MultiplierNetwork_t multiplier_network_type) {$/;"	f	typeref:typename:std::string
get_string_reduce_network_type	src/utility.cpp	/^std::string get_string_reduce_network_type(ReduceNetwork_t reduce_network_type) {$/;"	f	typeref:typename:std::string
get_switches_configuration	include/CompilerART.h	/^     std::map<std::pair<int,int>, adderconfig_t> get_switches_configuration() const {return this/;"	f	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,adderconfig_t>
get_switches_configuration	include/CompilerFEN.h	/^     std::map<std::pair<int,int>, adderconfig_t> get_switches_configuration() const {return this/;"	f	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,adderconfig_t>
get_table	external/cpptoml.h	/^    std::shared_ptr<table> get_table(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<table>
get_table_array	external/cpptoml.h	/^    std::shared_ptr<table_array> get_table_array(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<table_array>
get_table_array_qualified	external/cpptoml.h	/^    get_table_array_qualified(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<table_array>
get_table_qualified	external/cpptoml.h	/^    std::shared_ptr<table> get_table_qualified(const std::string& key) const$/;"	f	class:cpptoml::table	typeref:typename:std::shared_ptr<table>
get_time_routing	include/DSwitch.h	/^    unsigned long get_time_routing() const {return this->time_routing;}$/;"	f	class:DSwitch	typeref:typename:unsigned long
get_time_routing	src/DSNetwork.cpp	/^unsigned long DSNetwork::get_time_routing() {$/;"	f	class:DSNetwork	typeref:typename:unsigned long
get_traffic_type	include/DataPackage.h	/^    const traffic_t get_traffic_type()         const {return this->traffic_type;}$/;"	f	class:DataPackage	typeref:typename:const traffic_t
get_type_dataflow_type	src/utility.cpp	/^Dataflow get_type_dataflow_type(std::string dataflow_type) {$/;"	f	typeref:typename:Dataflow
get_type_memory_controller_type	src/utility.cpp	/^MemoryController_t get_type_memory_controller_type(std::string memory_controller_type) {$/;"	f	typeref:typename:MemoryController_t
get_type_multiplier_network_type	src/utility.cpp	/^MultiplierNetwork_t get_type_multiplier_network_type(std::string multiplier_network_type) {$/;"	f	typeref:typename:MultiplierNetwork_t
get_type_reduce_network_type	src/utility.cpp	/^ReduceNetwork_t get_type_reduce_network_type(std::string reduce_network_type) {$/;"	f	typeref:typename:ReduceNetwork_t
get_unicast_dest	include/DataPackage.h	/^    unsigned int get_unicast_dest()        const {return this->unicast_dest;}$/;"	f	class:DataPackage	typeref:typename:unsigned int
get_vn	include/DataPackage.h	/^    unsigned int get_vn()                  const {return this->VN;}$/;"	f	class:DataPackage	typeref:typename:unsigned int
getline	external/cpptoml.h	/^inline std::istream& getline(std::istream& input, std::string& line)$/;"	f	namespace:cpptoml::detail	typeref:typename:std::istream &
getstr	src/utility.cpp	/^std::string getstr(std::istringstream& instr) {$/;"	f	typeref:typename:std::string
group_size	include/SDMemory.h	/^    unsigned int group_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
hand_tests	src/testbench.cpp	/^void hand_tests() {$/;"	f	typeref:typename:void
has_naked_endline_	external/cpptoml.h	/^    bool has_naked_endline_;$/;"	m	class:cpptoml::toml_writer	typeref:typename:bool
hex_to_digit	external/cpptoml.h	/^    uint32_t hex_to_digit(char c)$/;"	f	class:cpptoml::parser	typeref:typename:uint32_t
hidden_channel	include/DNNModel.h	/^  int hidden_channel;$/;"	m	class:RNNHidden	typeref:typename:int
hidden_x	include/DNNModel.h	/^  int hidden_x;$/;"	m	class:RNNHidden	typeref:typename:int
hidden_y	include/DNNModel.h	/^  int hidden_y;$/;"	m	class:RNNHidden	typeref:typename:int
hmdpadd	include/define.h	/^  hmdpadd = 4,$/;"	e	enum:ConfigType
horizontalconnectiontable	include/OSMeshMN.h	/^    std::map<std::pair<int, int>,  Connection*> horizontalconnectiontable; \/\/Table with the ho/;"	m	class:OSMeshMN	typeref:typename:std::map<std::pair<int,int>,Connection * >
hour	external/cpptoml.h	/^    int hour = 0;$/;"	m	struct:cpptoml::local_time	typeref:typename:int
hour_offset	external/cpptoml.h	/^    int hour_offset = 0;$/;"	m	struct:cpptoml::zone_offset	typeref:typename:int
id	include/Component.h	/^    id_t id;$/;"	m	class:Component	typeref:typename:id_t
id	include/Unit.h	/^    id_t id;  \/\/Id of the component$/;"	m	class:Unit	typeref:typename:id_t
id_t	include/types.h	/^typedef unsigned int id_t;$/;"	t	typeref:typename:unsigned int
idleCycles	include/Component.h	/^    cycles_t idleCycles;        \/\/ Number of cycles in which the component is idle.$/;"	m	class:Component	typeref:typename:cycles_t
ind	src/utility.cpp	/^std::string ind(unsigned int indent) {$/;"	f	typeref:typename:std::string
indent	external/cpptoml.h	/^    void indent()$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
indent_	external/cpptoml.h	/^    const std::string indent_;$/;"	m	class:cpptoml::toml_writer	typeref:typename:const std::string
inputConnection	include/Accumulator.h	/^    Connection* inputConnection;                 \/\/ This is the input left connection of the A/;"	m	class:Accumulator	typeref:typename:Connection *
inputConnection	include/DSNetwork.h	/^    Connection* inputConnection;  \/\/Given by external$/;"	m	class:DSNetwork	typeref:typename:Connection *
inputConnection	include/DSwitch.h	/^    Connection* inputConnection;$/;"	m	class:DSwitch	typeref:typename:Connection *
inputConnection	include/LookupTable.h	/^    Connection* inputConnection; \/\/From the ART$/;"	m	class:LookupTable	typeref:typename:Connection *
inputConnection	include/MSwitch.h	/^  Connection* inputConnection;            \/\/ From the DistributionNetwork$/;"	m	class:MSwitch	typeref:typename:Connection *
inputConnectionsToForward	include/FEASwitch.h	/^    std::vector<Connection*> inputConnectionsToForward; \/\/Array of connections to get data to /;"	m	class:FEASwitch	typeref:typename:std::vector<Connection * >
inputForwardingConnection	include/MSwitch.h	/^  Connection* inputForwardingConnection;  \/\/ Input from the neighbour$/;"	m	class:MSwitch	typeref:typename:Connection *
inputForwardingEnabled	include/MSwitch.h	/^  bool inputForwardingEnabled; \/\/ Control signal that specifies if the input fw$/;"	m	class:MSwitch	typeref:typename:bool
inputID	include/ASwitch.h	/^    unsigned int inputID;                            \/\/Number of input of the Collection Bus b/;"	m	class:ASwitch	typeref:typename:unsigned int
inputID	include/Accumulator.h	/^    unsigned int inputID;                            \/\/Number of input of the Collection Bus b/;"	m	class:Accumulator	typeref:typename:unsigned int
inputID	include/FEASwitch.h	/^    unsigned int inputID;                            \/\/Number of input of the Collection Bus b/;"	m	class:FEASwitch	typeref:typename:unsigned int
inputLeftConnection	include/ASwitch.h	/^    Connection* inputLeftConnection;                 \/\/ This is the input left connection of t/;"	m	class:ASwitch	typeref:typename:Connection *
inputLeftConnection	include/FEASwitch.h	/^    Connection* inputLeftConnection;                 \/\/ This is the input left connection of t/;"	m	class:FEASwitch	typeref:typename:Connection *
inputRightConnection	include/ASwitch.h	/^    Connection* inputRightConnection;                \/\/ This is the input right connection of /;"	m	class:ASwitch	typeref:typename:Connection *
inputRightConnection	include/FEASwitch.h	/^    Connection* inputRightConnection;                \/\/ This is the input right connection of /;"	m	class:FEASwitch	typeref:typename:Connection *
input_	external/cpptoml.h	/^    std::istream& input_;$/;"	m	class:cpptoml::parser	typeref:typename:std::istream &
input_address	include/SDMemory.h	/^    address_t input_address;$/;"	m	class:SDMemory	typeref:typename:address_t
input_batch	include/DNNModel.h	/^  int input_batch;$/;"	m	class:CNNInput	typeref:typename:int
input_channel	include/DNNModel.h	/^  int input_channel;$/;"	m	class:CNNInput	typeref:typename:int
input_connections	include/CollectionBusLine.h	/^    std::vector<Connection*> input_connections; \/\/Every input connection for this bus line$/;"	m	class:CollectionBusLine	typeref:typename:std::vector<Connection * >
input_fifo	include/Accumulator.h	/^    Fifo* input_fifo;                          \/\/ Array of packages that are received from the/;"	m	class:Accumulator	typeref:typename:Fifo *
input_fifos	include/CollectionBusLine.h	/^    std::vector<Fifo*> input_fifos; \/\/Every fifo corresponds with an inputConnection for this /;"	m	class:CollectionBusLine	typeref:typename:std::vector<Fifo * >
input_fifos	include/OSMeshSDMemory.h	/^    std::vector<Fifo*> input_fifos; \/\/Fifos used to store the inputs before being fetched$/;"	m	class:OSMeshSDMemory	typeref:typename:std::vector<Fifo * >
input_fifos	include/SDMemory.h	/^    std::vector<Fifo*> input_fifos; \/\/Fifos used to store the inputs before being fetched$/;"	m	class:SDMemory	typeref:typename:std::vector<Fifo * >
input_fifos	include/SparseSDMemory.h	/^    std::vector<Fifo*> input_fifos; \/\/Fifos used to store the inputs before being fetched$/;"	m	class:SparseSDMemory	typeref:typename:std::vector<Fifo * >
input_finished	include/SDMemory.h	/^    bool input_finished;  \/\/Flag that indicates that all the inputs have been delivered$/;"	m	class:SDMemory	typeref:typename:bool
input_fw_below_nodes_fifo	include/FEASwitch.h	/^    Fifo* input_fw_below_nodes_fifo; $/;"	m	class:FEASwitch	typeref:typename:Fifo *
input_fw_fifo	include/ASwitch.h	/^    Fifo* input_fw_fifo;                          \/\/ Array of packages that are received thoug/;"	m	class:ASwitch	typeref:typename:Fifo *
input_fw_fifo	include/FEASwitch.h	/^    Fifo* input_fw_fifo;                          \/\/ Array of packages that are received thoug/;"	m	class:FEASwitch	typeref:typename:Fifo *
input_ports	include/ASwitch.h	/^    unsigned int input_ports;                        \/\/ Input port per branch (left, right).$/;"	m	class:ASwitch	typeref:typename:unsigned int
input_ports	include/Accumulator.h	/^    unsigned int input_ports;                        \/\/ Input port $/;"	m	class:Accumulator	typeref:typename:unsigned int
input_ports	include/CollectionBusLine.h	/^    unsigned int input_ports;  \/\/Number of input connections that correspond with input_connec/;"	m	class:CollectionBusLine	typeref:typename:unsigned int
input_ports	include/Config.h	/^    unsigned int input_ports; \/\/Number of input ports of the ASwitch. By  default in MAERI thi/;"	m	class:ASwitchConfig	typeref:typename:unsigned int
input_ports	include/Config.h	/^    unsigned int input_ports; \/\/Number of input ports of the MS. This number is 1 by default i/;"	m	class:MSwitchConfig	typeref:typename:unsigned int
input_ports	include/Config.h	/^    unsigned int input_ports; \/\/Number of input_ports. By default this will be 1$/;"	m	class:DSwitchConfig	typeref:typename:unsigned int
input_ports	include/DSwitch.h	/^    unsigned int input_ports;           \/\/ Number of input ports in the DSwitch$/;"	m	class:DSwitch	typeref:typename:unsigned int
input_ports	include/FEASwitch.h	/^    unsigned int input_ports;                        \/\/ Input port per branch (left, right).$/;"	m	class:FEASwitch	typeref:typename:unsigned int
input_ports	include/MSwitch.h	/^  unsigned int input_ports;$/;"	m	class:MSwitch	typeref:typename:unsigned int
input_ports	include/MultiplierOS.h	/^    unsigned int input_ports;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
input_ports_bus_line	include/CollectionBus.h	/^    unsigned int input_ports_bus_line;$/;"	m	class:Bus	typeref:typename:unsigned int
input_psum_left_fifo	include/ASwitch.h	/^    Fifo* input_psum_left_fifo;                            \/\/ Array of packages that are recei/;"	m	class:ASwitch	typeref:typename:Fifo *
input_psum_left_fifo	include/FEASwitch.h	/^    Fifo* input_psum_left_fifo;                            \/\/ Array of packages that are recei/;"	m	class:FEASwitch	typeref:typename:Fifo *
input_psum_right_fifo	include/ASwitch.h	/^    Fifo* input_psum_right_fifo;                           \/\/ Array of packages that are recei/;"	m	class:ASwitch	typeref:typename:Fifo *
input_psum_right_fifo	include/FEASwitch.h	/^    Fifo* input_psum_right_fifo;                           \/\/ Array of packages that are recei/;"	m	class:FEASwitch	typeref:typename:Fifo *
input_size	include/SDMemory.h	/^    unsigned int input_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
input_x	include/DNNModel.h	/^  int input_x;$/;"	m	class:CNNInput	typeref:typename:int
input_y	include/DNNModel.h	/^  int input_y;$/;"	m	class:CNNInput	typeref:typename:int
inputconnectiontable	include/ASNetwork.h	/^    std::map<std::pair<int, int>, Connection*> inputconnectiontable; \/\/ input connections of e/;"	m	class:ASNetwork	typeref:typename:std::map<std::pair<int,int>,Connection * >
inputconnectiontable	include/AccumulationBuffer.h	/^    std::map<int, Connection*> inputconnectiontable; \/\/ input connections$/;"	m	class:AccumulationBuffer	typeref:typename:std::map<int,Connection * >
inputconnectiontable	include/FENetwork.h	/^    std::map<std::pair<int, int>, Connection*> inputconnectiontable; \/\/ input connections of e/;"	m	class:FENetwork	typeref:typename:std::map<std::pair<int,int>,Connection * >
inputconnectiontable	include/TemporalRN.h	/^    std::vector<Connection*> inputconnectiontable; \/\/Connections to the accumulation buffer $/;"	m	class:TemporalRN	typeref:typename:std::vector<Connection * >
insert	external/cpptoml.h	/^    iterator insert(iterator position, T&& val,$/;"	f	class:cpptoml::array	typeref:typename:iterator
insert	external/cpptoml.h	/^    iterator insert(iterator position, const std::shared_ptr<array>& value)$/;"	f	class:cpptoml::array	typeref:typename:iterator
insert	external/cpptoml.h	/^    iterator insert(iterator position, const std::shared_ptr<table>& value)$/;"	f	class:cpptoml::table_array	typeref:typename:iterator
insert	external/cpptoml.h	/^    iterator insert(iterator position, const std::shared_ptr<value<T>>& value)$/;"	f	class:cpptoml::array	typeref:typename:iterator
insert	external/cpptoml.h	/^    void insert(const std::string& key, T&& val,$/;"	f	class:cpptoml::table	typeref:typename:void
insert	external/cpptoml.h	/^    void insert(const std::string& key, const std::shared_ptr<base>& value)$/;"	f	class:cpptoml::table	typeref:typename:void
isBroadcast	include/DataPackage.h	/^    bool isBroadcast()                   const {return this->traffic_type==BROADCAST;}$/;"	f	class:DataPackage	typeref:typename:bool
isEmpty	src/Fifo.cpp	/^bool Fifo::isEmpty() {$/;"	f	class:Fifo	typeref:typename:bool
isEnabled	include/Component.h	/^    const bool isEnabled() const                 {return enabled;}$/;"	f	class:Component	typeref:typename:const bool
isExecutionFinished	include/MemoryController.h	/^    virtual bool isExecutionFinished() {assert(false);}$/;"	f	class:MemoryController	typeref:typename:bool
isExecutionFinished	src/OSMeshSDMemory.cpp	/^bool OSMeshSDMemory::isExecutionFinished() {$/;"	f	class:OSMeshSDMemory	typeref:typename:bool
isExecutionFinished	src/SDMemory.cpp	/^bool SDMemory::isExecutionFinished() {$/;"	f	class:SDMemory	typeref:typename:bool
isExecutionFinished	src/SparseSDMemory.cpp	/^bool SparseSDMemory::isExecutionFinished() {$/;"	f	class:SparseSDMemory	typeref:typename:bool
isFull	src/Fifo.cpp	/^bool Fifo::isFull() {$/;"	f	class:Fifo	typeref:typename:bool
isFwEnabled	include/ASwitch.h	/^    bool isFwEnabled()             const {return this->fw_enabled;}$/;"	f	class:ASwitch	typeref:typename:bool
isFwEnabled	include/FEASwitch.h	/^    bool isFwEnabled()             const {return this->fw_enabled;}$/;"	f	class:FEASwitch	typeref:typename:bool
isMulticast	include/DataPackage.h	/^    bool isMulticast()                   const {return this->traffic_type==MULTICAST;}$/;"	f	class:DataPackage	typeref:typename:bool
isNum	src/utility.cpp	/^bool isNum(std::string str) {$/;"	f	typeref:typename:bool
isUnicast	include/DataPackage.h	/^    bool isUnicast()                     const {return this->traffic_type==UNICAST;}$/;"	f	class:DataPackage	typeref:typename:bool
is_array	external/cpptoml.h	/^    virtual bool is_array() const override$/;"	f	class:cpptoml::array	typeref:typename:bool
is_array	external/cpptoml.h	/^    virtual bool is_array() const$/;"	f	class:cpptoml::base	typeref:typename:bool
is_hex	external/cpptoml.h	/^inline bool is_hex(char c)$/;"	f	namespace:cpptoml	typeref:typename:bool
is_inline	external/cpptoml.h	/^    bool is_inline() const$/;"	f	class:cpptoml::table_array	typeref:typename:bool
is_inline_	external/cpptoml.h	/^    const bool is_inline_ = false;$/;"	m	class:cpptoml::table_array	typeref:typename:const bool
is_number	external/cpptoml.h	/^inline bool is_number(char c)$/;"	f	namespace:cpptoml	typeref:typename:bool
is_one_of	external/cpptoml.h	/^struct is_one_of<T, V, Ts...>$/;"	s	namespace:cpptoml
is_one_of	external/cpptoml.h	/^struct is_one_of<T, V> : std::is_same<T, V>$/;"	s	namespace:cpptoml
is_table	external/cpptoml.h	/^    bool is_table() const override$/;"	f	class:cpptoml::table	typeref:typename:bool
is_table	external/cpptoml.h	/^    virtual bool is_table() const$/;"	f	class:cpptoml::base	typeref:typename:bool
is_table_array	external/cpptoml.h	/^    virtual bool is_table_array() const override$/;"	f	class:cpptoml::table_array	typeref:typename:bool
is_table_array	external/cpptoml.h	/^    virtual bool is_table_array() const$/;"	f	class:cpptoml::base	typeref:typename:bool
is_time	external/cpptoml.h	/^    bool is_time(const std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:bool
is_value	external/cpptoml.h	/^    bool is_value() const override$/;"	f	class:cpptoml::value	typeref:typename:bool
is_value	external/cpptoml.h	/^    virtual bool is_value() const$/;"	f	class:cpptoml::base	typeref:typename:bool
ispowerof2	src/utility.cpp	/^bool ispowerof2(unsigned int x) {$/;"	f	typeref:typename:bool
it_	external/cpptoml.h	/^    std::string::iterator& it_;$/;"	m	class:cpptoml::consumer	typeref:typename:std::string::iterator &
iter_C	include/SDMemory.h	/^    unsigned int iter_C;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_C	include/SDMemory.h	/^    unsigned int iter_C;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_G	include/SDMemory.h	/^    unsigned int iter_G;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_G	include/SDMemory.h	/^    unsigned int iter_G;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_K	include/OSMeshSDMemory.h	/^    unsigned int iter_K;  $/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
iter_K	include/SDMemory.h	/^    unsigned int iter_K;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_K	include/SDMemory.h	/^    unsigned int iter_K;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_M	include/OSMeshSDMemory.h	/^    unsigned int iter_M;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
iter_N	include/OSMeshSDMemory.h	/^    unsigned int iter_N;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
iter_N	include/SDMemory.h	/^    unsigned int iter_N; $/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_N	include/SDMemory.h	/^    unsigned int iter_N;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_R	include/SDMemory.h	/^    unsigned int iter_R;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_R	include/SDMemory.h	/^    unsigned int iter_R;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_S	include/SDMemory.h	/^    unsigned int iter_S;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_S	include/SDMemory.h	/^    unsigned int iter_S;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_X	include/SDMemory.h	/^    unsigned int iter_X;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_X	include/SDMemory.h	/^    unsigned int iter_X;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iter_Y	include/SDMemory.h	/^    unsigned int iter_Y;$/;"	m	class:SDMemory	typeref:typename:unsigned int
iter_Y	include/SDMemory.h	/^    unsigned int iter_Y;$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
iteration_completed	include/OSMeshSDMemory.h	/^    bool iteration_completed;$/;"	m	class:OSMeshSDMemory	typeref:typename:bool
iteration_g	include/DataPackage.h	/^    unsigned int iteration_g; \/\/Indicates the g value of this package (i.e., the number of g i/;"	m	class:DataPackage	typeref:typename:unsigned int
iteration_k	include/DataPackage.h	/^    unsigned int iteration_k; \/\/Indicates the k value of this package (i.e, the number of k it/;"	m	class:DataPackage	typeref:typename:unsigned int
iterator	external/cpptoml.h	/^    using iterator = std::vector<std::shared_ptr<base>>::iterator;$/;"	t	class:cpptoml::array	typeref:typename:std::vector<std::shared_ptr<base>>::iterator
iterator	external/cpptoml.h	/^    using iterator = std::vector<std::shared_ptr<table>>::iterator;$/;"	t	class:cpptoml::table_array	typeref:typename:std::vector<std::shared_ptr<table>>::iterator
iterator	external/cpptoml.h	/^    using iterator = string_to_base_map::iterator;$/;"	t	class:cpptoml::table	typeref:typename:string_to_base_map::iterator
latency	include/ASwitch.h	/^    cycles_t latency;                                  \/\/ Number of cycles to compute a sum. T/;"	m	class:ASwitch	typeref:typename:cycles_t
latency	include/Accumulator.h	/^    cycles_t latency;                                  \/\/ Number of cycles to compute a sum. T/;"	m	class:Accumulator	typeref:typename:cycles_t
latency	include/Config.h	/^    cycles_t latency; \/\/Latency of the AS to perform. This number is expressed in number of cy/;"	m	class:ASwitchConfig	typeref:typename:cycles_t
latency	include/Config.h	/^    cycles_t latency; \/\/Latency of the LookUpTable to perform. This number must be expressed i/;"	m	class:LookUpTableConfig	typeref:typename:cycles_t
latency	include/Config.h	/^    cycles_t latency; \/\/Latency of the MS to perform a multiplication. This number is expresse/;"	m	class:MSwitchConfig	typeref:typename:cycles_t
latency	include/Config.h	/^    unsigned int latency; $/;"	m	class:DSwitchConfig	typeref:typename:unsigned int
latency	include/DSwitch.h	/^    latency_t latency;$/;"	m	class:DSwitch	typeref:typename:latency_t
latency	include/FEASwitch.h	/^    cycles_t latency;                                  \/\/ Number of cycles to compute a sum. T/;"	m	class:FEASwitch	typeref:typename:cycles_t
latency	include/LookupTable.h	/^    cycles_t latency;$/;"	m	class:LookupTable	typeref:typename:cycles_t
latency	include/MSwitch.h	/^  cycles_t latency;                       \/\/ latency in number of cycles$/;"	m	class:MSwitch	typeref:typename:cycles_t
latency	include/MultiplierOS.h	/^    cycles_t  latency;  \/\/latency in number of cycles$/;"	m	class:MultiplierOS	typeref:typename:cycles_t
latency_t	include/types.h	/^typedef unsigned int latency_t;$/;"	t	typeref:typename:unsigned int
layerTest	include/types.h	/^enum layerTest {TINY, LATE_SYNTHETIC, EARLY_SYNTHETIC, VGG_CONV11, VGG_CONV1};$/;"	g
layer_loaded	include/OSMeshSDMemory.h	/^    bool layer_loaded; \/\/Flag that indicates whether the layer has been loaded.$/;"	m	class:OSMeshSDMemory	typeref:typename:bool
layer_loaded	include/STONNEModel.h	/^    bool layer_loaded; \/\/Indicates if the function loadDNN$/;"	m	class:Stonne	typeref:typename:bool
layer_loaded	include/SparseSDMemory.h	/^    bool layer_loaded; \/\/Flag that indicates whether the layer has been loaded.$/;"	m	class:SparseSDMemory	typeref:typename:bool
layer_name	include/DNNLayer.h	/^    std::string layer_name;        \/\/ Layer name used to create the output file$/;"	m	class:DNNLayer	typeref:typename:std::string
layer_num	include/DNNModel.h	/^  std::string layer_num;$/;"	m	class:DNNModel	typeref:typename:std::string
layer_type	include/DNNLayer.h	/^    Layer_t layer_type;$/;"	m	class:DNNLayer	typeref:typename:Layer_t
layer_type	include/DNNModel.h	/^  std::string layer_type;$/;"	m	class:DNNModel	typeref:typename:std::string
leftConnection	include/DSwitch.h	/^    Connection* leftConnection;   \/\/ This is the left connection of the switch$/;"	m	class:DSwitch	typeref:typename:Connection *
left_child_enabled	include/ASwitch.h	/^    bool left_child_enabled;                          \/\/ Indicates if the as receives data fro/;"	m	class:ASwitch	typeref:typename:bool
left_child_enabled	include/FEASwitch.h	/^    bool left_child_enabled;                          \/\/ Indicates if the as receives data fro/;"	m	class:FEASwitch	typeref:typename:bool
left_connection	include/MultiplierOS.h	/^    Connection* left_connection;  \/\/ To the left neighbour or memory port$/;"	m	class:MultiplierOS	typeref:typename:Connection *
left_fifo	include/MultiplierOS.h	/^    Fifo* left_fifo; \/\/Packages recieved from legt (i.e., activations)$/;"	m	class:MultiplierOS	typeref:typename:Fifo *
level	include/ASwitch.h	/^    unsigned int level;                              \/\/ Level where the Adder is set in the tr/;"	m	class:ASwitch	typeref:typename:unsigned int
level	include/DSwitch.h	/^    unsigned int level; \/\/Level where the switch is set in the tree$/;"	m	class:DSwitch	typeref:typename:unsigned int
level	include/FEASwitch.h	/^    unsigned int level;                              \/\/ Level where the Adder is set in the tr/;"	m	class:FEASwitch	typeref:typename:unsigned int
line_	external/cpptoml.h	/^    std::string line_;$/;"	m	class:cpptoml::parser	typeref:typename:std::string
line_number_	external/cpptoml.h	/^    std::size_t line_number_ = 0;$/;"	m	class:cpptoml::parser	typeref:typename:std::size_t
loadCONVLayer	src/STONNEModel.cpp	/^void Stonne::loadCONVLayer(std::string layer_name, unsigned int R, unsigned int S, unsigned int /;"	f	class:Stonne	typeref:typename:void
loadDNNLayer	src/STONNEModel.cpp	/^void Stonne::loadDNNLayer(Layer_t layer_type, std::string layer_name, unsigned int R, unsigned i/;"	f	class:Stonne	typeref:typename:void
loadDenseGEMM	src/STONNEModel.cpp	/^void Stonne::loadDenseGEMM(std::string layer_name, unsigned int N, unsigned int K, unsigned int /;"	f	class:Stonne	typeref:typename:void
loadFCLayer	src/STONNEModel.cpp	/^void Stonne::loadFCLayer(std::string layer_name, unsigned int N, unsigned int S, unsigned int K,/;"	f	class:Stonne	typeref:typename:void
loadFCTile	src/STONNEModel.cpp	/^void Stonne::loadFCTile(unsigned int T_S, unsigned int T_N, unsigned int T_K)  {$/;"	f	class:Stonne	typeref:typename:void
loadFile	src/Config.cpp	/^void Config::loadFile(std::string config_file) {$/;"	f	class:Config	typeref:typename:void
loadGEMM	src/STONNEModel.cpp	/^void Stonne::loadGEMM(std::string layer_name, unsigned int N, unsigned int K, unsigned int M, ad/;"	f	class:Stonne	typeref:typename:void
loadGEMMTile	src/STONNEModel.cpp	/^void Stonne::loadGEMMTile(unsigned int T_N, unsigned int T_K, unsigned int T_M)  {$/;"	f	class:Stonne	typeref:typename:void
loadSparseDense	src/STONNEModel.cpp	/^void Stonne::loadSparseDense(std::string layer_name, unsigned int N, unsigned int K, unsigned in/;"	f	class:Stonne	typeref:typename:void
loadTile	src/STONNEModel.cpp	/^void Stonne::loadTile(unsigned int T_R, unsigned int T_S, unsigned int T_C, unsigned int T_K, un/;"	f	class:Stonne	typeref:typename:void
local_cycle	include/ASwitch.h	/^    cycles_t local_cycle;$/;"	m	class:ASwitch	typeref:typename:cycles_t
local_cycle	include/Accumulator.h	/^    cycles_t local_cycle;$/;"	m	class:Accumulator	typeref:typename:cycles_t
local_cycle	include/FEASwitch.h	/^    cycles_t local_cycle;$/;"	m	class:FEASwitch	typeref:typename:cycles_t
local_cycle	include/MSwitch.h	/^  cycles_t local_cycle;$/;"	m	class:MSwitch	typeref:typename:cycles_t
local_cycle	include/MultiplierOS.h	/^    cycles_t local_cycle;$/;"	m	class:MultiplierOS	typeref:typename:cycles_t
local_cycle	include/OSMeshSDMemory.h	/^   cycles_t local_cycle;$/;"	m	class:OSMeshSDMemory	typeref:typename:cycles_t
local_cycle	include/SDMemory.h	/^   cycles_t local_cycle;$/;"	m	class:SDMemory	typeref:typename:cycles_t
local_cycle	include/SparseSDMemory.h	/^   cycles_t local_cycle;$/;"	m	class:SparseSDMemory	typeref:typename:cycles_t
local_date	external/cpptoml.h	/^struct local_date$/;"	s	namespace:cpptoml
local_datetime	external/cpptoml.h	/^struct local_datetime : local_date, local_time$/;"	s	namespace:cpptoml
local_time	external/cpptoml.h	/^struct local_time$/;"	s	namespace:cpptoml
lstm	include/define.h	/^  lstm = 3,$/;"	e	enum:ConfigType
lt	include/STONNEModel.h	/^    LookupTable* lt; \/\/Lookuptable$/;"	m	class:Stonne	typeref:typename:LookupTable *
m_ASNetworkCfg	include/Config.h	/^    ASNetworkConfig m_ASNetworkCfg;$/;"	m	class:Config	typeref:typename:ASNetworkConfig
m_ASwitchCfg	include/Config.h	/^    ASwitchConfig m_ASwitchCfg;$/;"	m	class:Config	typeref:typename:ASwitchConfig
m_DSNetworkCfg	include/Config.h	/^    DSNetworkConfig m_DSNetworkCfg;$/;"	m	class:Config	typeref:typename:DSNetworkConfig
m_DSwitchCfg	include/Config.h	/^    DSwitchConfig m_DSwitchCfg;$/;"	m	class:Config	typeref:typename:DSwitchConfig
m_LookUpTableCfg	include/Config.h	/^    LookUpTableConfig m_LookUpTableCfg;$/;"	m	class:Config	typeref:typename:LookUpTableConfig
m_MSNetworkCfg	include/Config.h	/^    MSNetworkConfig m_MSNetworkCfg;$/;"	m	class:Config	typeref:typename:MSNetworkConfig
m_MSwitchCfg	include/Config.h	/^    MSwitchConfig m_MSwitchCfg;$/;"	m	class:Config	typeref:typename:MSwitchConfig
m_SDMemoryCfg	include/Config.h	/^    SDMemoryConfig m_SDMemoryCfg;$/;"	m	class:Config	typeref:typename:SDMemoryConfig
main	energy_tables/calculate_energy.py	/^def main():$/;"	f
main	src/main.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	stonne_experiments.py	/^def main():$/;"	f
make_array	external/cpptoml.h	/^inline std::shared_ptr<array> make_array()$/;"	f	namespace:cpptoml	typeref:typename:std::shared_ptr<array>
make_consumer	external/cpptoml.h	/^consumer<OnError> make_consumer(std::string::iterator& it,$/;"	f	namespace:cpptoml	typeref:typename:consumer<OnError>
make_element	external/cpptoml.h	/^inline std::shared_ptr<array> make_element<array>()$/;"	f	namespace:cpptoml::detail	typeref:typename:std::shared_ptr<array>
make_element	external/cpptoml.h	/^inline std::shared_ptr<table> make_element<table>()$/;"	f	namespace:cpptoml::detail	typeref:typename:std::shared_ptr<table>
make_element	external/cpptoml.h	/^inline std::shared_ptr<table_array> make_element<table_array>()$/;"	f	namespace:cpptoml::detail	typeref:typename:std::shared_ptr<table_array>
make_shared_enabler	external/cpptoml.h	/^        make_shared_enabler()$/;"	f	struct:cpptoml::make_array::make_shared_enabler
make_shared_enabler	external/cpptoml.h	/^        make_shared_enabler()$/;"	f	struct:cpptoml::make_table::make_shared_enabler
make_shared_enabler	external/cpptoml.h	/^        make_shared_enabler(bool mse_is_inline) : table_array(mse_is_inline)$/;"	f	struct:cpptoml::make_table_array::make_shared_enabler
make_shared_enabler	external/cpptoml.h	/^    struct make_shared_enabler : public array$/;"	s	function:cpptoml::make_array
make_shared_enabler	external/cpptoml.h	/^    struct make_shared_enabler : public table$/;"	s	function:cpptoml::make_table
make_shared_enabler	external/cpptoml.h	/^    struct make_shared_enabler : public table_array$/;"	s	function:cpptoml::make_table_array
make_shared_enabler	external/cpptoml.h	/^    struct make_shared_enabler$/;"	s	class:cpptoml::value
make_table	external/cpptoml.h	/^std::shared_ptr<table> make_table()$/;"	f	namespace:cpptoml	typeref:typename:std::shared_ptr<table>
make_table_array	external/cpptoml.h	/^inline std::shared_ptr<table_array> make_table_array(bool is_inline)$/;"	f	namespace:cpptoml	typeref:typename:std::shared_ptr<table_array>
make_value	external/cpptoml.h	/^std::shared_ptr<typename value_traits<T>::type> make_value(T&& val)$/;"	f	namespace:cpptoml	typeref:typename:std::shared_ptr<typename value_traits<T>::type>
map_	external/cpptoml.h	/^    string_to_base_map map_;$/;"	m	class:cpptoml::table	typeref:typename:string_to_base_map
max_occupancy	include/Stats.h	/^    counter_t max_occupancy; $/;"	m	class:FifoStats	typeref:typename:counter_t
mem	include/STONNEModel.h	/^    MemoryController* mem; \/\/MemoryController abstraction (e.g., SDMemory from MAERI)$/;"	m	class:Stonne	typeref:typename:MemoryController *
mem_controller_type	include/Config.h	/^    MemoryController_t mem_controller_type; \/\/Memory controller type (e.g., DENSE_WORKLOAD or /;"	m	class:SDMemoryConfig	typeref:typename:MemoryController_t
memoryConnection	include/ASwitch.h	/^    Connection* memoryConnection;                    \/\/ This is the connection of the adder wi/;"	m	class:ASwitch	typeref:typename:Connection *
memoryConnection	include/FEASwitch.h	/^    Connection* memoryConnection;                    \/\/ This is the connection of the adder wi/;"	m	class:FEASwitch	typeref:typename:Connection *
metadata_address_t	include/types.h	/^typedef unsigned int* metadata_address_t;$/;"	t	typeref:typename:unsigned int *
metadata_loaded	include/OSMeshSDMemory.h	/^    bool metadata_loaded;   \/\/Flag that indicates whether the metadata has been loaded $/;"	m	class:OSMeshSDMemory	typeref:typename:bool
metadata_loaded	include/SparseSDMemory.h	/^    bool metadata_loaded;   \/\/Flag that indicates whether the metadata has been loaded $/;"	m	class:SparseSDMemory	typeref:typename:bool
microsecond	external/cpptoml.h	/^    int microsecond = 0;$/;"	m	struct:cpptoml::local_time	typeref:typename:int
minute	external/cpptoml.h	/^    int minute = 0;$/;"	m	struct:cpptoml::local_time	typeref:typename:int
minute_offset	external/cpptoml.h	/^    int minute_offset = 0;$/;"	m	struct:cpptoml::zone_offset	typeref:typename:int
model_name	include/DNNModel.h	/^  std::string model_name;$/;"	m	class:DNNModel	typeref:typename:std::string
month	external/cpptoml.h	/^    int month = 0;$/;"	m	struct:cpptoml::local_date	typeref:typename:int
ms_cols	include/CompilerMultiplierMesh.h	/^    unsigned int ms_cols;$/;"	m	class:CompilerMultiplierMesh	typeref:typename:unsigned int
ms_cols	include/Config.h	/^    unsigned int ms_cols; $/;"	m	class:MSNetworkConfig	typeref:typename:unsigned int
ms_cols	include/MultiplierOS.h	/^    unsigned int ms_cols;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
ms_cols	include/OSMeshMN.h	/^    unsigned int ms_cols; \/\/ Number of columns in the ms array$/;"	m	class:OSMeshMN	typeref:typename:unsigned int
ms_cols	include/OSMeshSDMemory.h	/^    unsigned int ms_cols;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
ms_fwreceive_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> ms_fwreceive_enabled; \/\/Indicates for each MS if must receive/;"	m	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
ms_fwsend_enabled	include/CompilerMSN.h	/^    std::map<unsigned int, bool> ms_fwsend_enabled; \/\/Indicates for each MS if must send data /;"	m	class:CompilerMSN	typeref:typename:std::map<unsigned int,bool>
ms_rows	include/CompilerMultiplierMesh.h	/^    unsigned int ms_rows;$/;"	m	class:CompilerMultiplierMesh	typeref:typename:unsigned int
ms_rows	include/Config.h	/^    unsigned int ms_rows;$/;"	m	class:MSNetworkConfig	typeref:typename:unsigned int
ms_rows	include/MultiplierOS.h	/^    unsigned int ms_rows;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
ms_rows	include/OSMeshMN.h	/^    unsigned int ms_rows; \/\/ Number of rows in the ms array$/;"	m	class:OSMeshMN	typeref:typename:unsigned int
ms_rows	include/OSMeshSDMemory.h	/^    unsigned int ms_rows;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
ms_size	include/ASNetwork.h	/^    unsigned int ms_size; \/\/Number of multipliers. i.e., the leaves of the network $/;"	m	class:ASNetwork	typeref:typename:unsigned int
ms_size	include/Config.h	/^    unsigned int ms_size; \/\/Number of multiplier switches. $/;"	m	class:MSNetworkConfig	typeref:typename:unsigned int
ms_size	include/DSNetwork.h	/^    unsigned int ms_size; \/\/Number of multipliers. i.e., the leaves of the network $/;"	m	class:DSNetwork	typeref:typename:unsigned int
ms_size	include/FENetwork.h	/^    unsigned int ms_size; \/\/Number of multipliers. i.e., the leaves of the network $/;"	m	class:FENetwork	typeref:typename:unsigned int
ms_size	include/MSNetwork.h	/^    unsigned int ms_size; \/\/ Number of multipliers$/;"	m	class:MSNetwork	typeref:typename:unsigned int
ms_size	include/STONNEModel.h	/^    unsigned int ms_size; \/\/Number of multipliers$/;"	m	class:Stonne	typeref:typename:unsigned int
ms_size_per_input_port	include/OSMeshSDMemory.h	/^    unsigned int ms_size_per_input_port;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
ms_size_per_input_port	include/SDMemory.h	/^    unsigned int ms_size_per_input_port;$/;"	m	class:SDMemory	typeref:typename:unsigned int
ms_size_per_input_port	include/SparseSDMemory.h	/^    unsigned int ms_size_per_input_port;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
ms_size_per_port	include/DSNetworkTop.h	/^    unsigned int ms_size_per_port; \/\/Number of multipliers per each ds tree$/;"	m	class:DSNetworkTop	typeref:typename:unsigned int
ms_vn_configuration	include/CompilerMSN.h	/^    std::map<unsigned int, unsigned int> ms_vn_configuration; \/\/Virtual neuron of each MS conf/;"	m	class:CompilerMSN	typeref:typename:std::map<unsigned int,unsigned int>
ms_vn_configuration	include/CompilerMultiplierMesh.h	/^    std::map<std::pair<int,int>, unsigned int> ms_vn_configuration;$/;"	m	class:CompilerMultiplierMesh	typeref:typename:std::map<std::pair<int,int>,unsigned int>
msnet	include/STONNEModel.h	/^    MultiplierNetwork* msnet; \/\/Multiplier Network$/;"	m	class:Stonne	typeref:typename:MultiplierNetwork *
mswitchStats	include/MSwitch.h	/^  MSwitchStats mswitchStats; \/\/ Object to track the behaviour of the MSwitch$/;"	m	class:MSwitch	typeref:typename:MSwitchStats
mswitchStats	include/MultiplierOS.h	/^    MultiplierOSStats mswitchStats; \/\/Object to track the behaviour of the MSwitch$/;"	m	class:MultiplierOS	typeref:typename:MultiplierOSStats
mswitchtable	include/MSNetwork.h	/^    std::map<int, MSwitch*> mswitchtable; \/\/Table with the multiplier switches$/;"	m	class:MSNetwork	typeref:typename:std::map<int,MSwitch * >
mswitchtable	include/OSMeshMN.h	/^    std::map<std::pair<int, int>, MultiplierOS* > mswitchtable;$/;"	m	class:OSMeshMN	typeref:typename:std::map<std::pair<int,int>,MultiplierOS * >
multiplier_network	include/OSMeshSDMemory.h	/^    MultiplierNetwork* multiplier_network; \/\/Multiplier network used to be reconfigured$/;"	m	class:OSMeshSDMemory	typeref:typename:MultiplierNetwork *
multiplier_network	include/SDMemory.h	/^    MultiplierNetwork* multiplier_network; \/\/Idem as reduce_network$/;"	m	class:SDMemory	typeref:typename:MultiplierNetwork *
multiplier_network	include/SparseSDMemory.h	/^    MultiplierNetwork* multiplier_network; \/\/Multiplier network used to be reconfigured$/;"	m	class:SparseSDMemory	typeref:typename:MultiplierNetwork *
multiplier_network_type	include/Config.h	/^    MultiplierNetwork_t multiplier_network_type;$/;"	m	class:MSNetworkConfig	typeref:typename:MultiplierNetwork_t
nFoldingConfig	src/MSNetwork.cpp	/^void MSNetwork::nFoldingConfig($/;"	f	class:MSNetwork	typeref:typename:void
nWindowsConfig	src/MSNetwork.cpp	/^void MSNetwork::nWindowsConfig(unsigned int n_windows)$/;"	f	class:MSNetwork	typeref:typename:void
n_2_1_comps	include/Stats.h	/^    counter_t n_2_1_comps;                              \/\/N cycles the ASwitch performs a 2_1 /;"	m	class:ASwitchStats	typeref:typename:counter_t
n_2_1_sums	include/Stats.h	/^    counter_t n_2_1_sums;                               \/\/N cycles the ASwitch performs a 2_1 /;"	m	class:ASwitchStats	typeref:typename:counter_t
n_3_1_comps	include/Stats.h	/^    counter_t n_3_1_comps;                              \/\/N cycles the ASwitch performs a 3_1 /;"	m	class:ASwitchStats	typeref:typename:counter_t
n_3_1_sums	include/Stats.h	/^    counter_t n_3_1_sums;                               \/\/N cycles the ASwitch performs a 3_1 /;"	m	class:ASwitchStats	typeref:typename:counter_t
n_SRAM_input_reads	include/Stats.h	/^    counter_t n_SRAM_input_reads;                                \/\/Number of SRAM input reads$/;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_SRAM_psum_reads	include/Stats.h	/^    counter_t n_SRAM_psum_reads;                                 \/\/Number of SRAM psum reads$/;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_SRAM_psum_writes	include/Stats.h	/^    counter_t n_SRAM_psum_writes;                                \/\/Number of SRAM psum writes$/;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_SRAM_read_ports_inputs_use	include/Stats.h	/^    std::vector<counter_t> n_SRAM_read_ports_inputs_use;         \/\/Number of times each read p/;"	m	class:SDMemoryStats	typeref:typename:std::vector<counter_t>
n_SRAM_read_ports_psums_use	include/Stats.h	/^    std::vector<counter_t> n_SRAM_read_ports_psums_use;          \/\/Number of times each read p/;"	m	class:SDMemoryStats	typeref:typename:std::vector<counter_t>
n_SRAM_read_ports_weights_use	include/Stats.h	/^    std::vector<counter_t> n_SRAM_read_ports_weights_use;        \/\/Number of times each read p/;"	m	class:SDMemoryStats	typeref:typename:std::vector<counter_t>
n_SRAM_weight_reads	include/Stats.h	/^    counter_t n_SRAM_weight_reads;                               \/\/Number of SRAM weight reads$/;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_SRAM_write_ports_use	include/Stats.h	/^    std::vector<counter_t> n_SRAM_write_ports_use;               \/\/Number of times each write /;"	m	class:SDMemoryStats	typeref:typename:std::vector<counter_t>
n_accumulator	include/Accumulator.h	/^    unsigned int n_accumulator;$/;"	m	class:Accumulator	typeref:typename:unsigned int
n_accumulators	include/AccumulationBuffer.h	/^    unsigned int n_accumulators; \/\/Number of accumulator array$/;"	m	class:AccumulationBuffer	typeref:typename:unsigned int
n_adders	include/STONNEModel.h	/^    unsigned int n_adders; \/\/Number of adders obtained from ms_size$/;"	m	class:Stonne	typeref:typename:unsigned int
n_adds	include/Stats.h	/^    counter_t n_adds;                                   \/\/N cycles the Accumulator performs a /;"	m	class:AccumulatorStats	typeref:typename:counter_t
n_augmented_link_send	include/Stats.h	/^    counter_t n_augmented_link_send;                    \/\/N cycles the ASwitch send a data to /;"	m	class:ASwitchStats	typeref:typename:counter_t
n_bottom_forwardings_send	include/Stats.h	/^    counter_t n_bottom_forwardings_send;             \/\/N cycles the Multiplier sends an weight/;"	m	class:MultiplierOSStats	typeref:typename:counter_t
n_broadcasts	include/Stats.h	/^    counter_t n_broadcasts;         \/\/N cycles the ASwitch send the input data through both ou/;"	m	class:DSwitchStats	typeref:typename:counter_t
n_bus_lines	include/CollectionBus.h	/^    unsigned int n_bus_lines;  \/\/Number of outputs from the bus$/;"	m	class:Bus	typeref:typename:unsigned int
n_configurations	include/Stats.h	/^    counter_t n_configurations;                         \/\/N times the ASwitch has been configu/;"	m	class:ASwitchStats	typeref:typename:counter_t
n_configurations	include/Stats.h	/^    counter_t n_configurations;                         \/\/N times the Accumulator has been con/;"	m	class:AccumulatorStats	typeref:typename:counter_t
n_configurations	include/Stats.h	/^    counter_t n_configurations;                        \/\/ N times the MSwitch is configured$/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_configurations	include/Stats.h	/^    counter_t n_configurations;                      \/\/ N times the MSwitch is configured$/;"	m	class:MultiplierOSStats	typeref:typename:counter_t
n_conflicts_average	include/Stats.h	/^    counter_t n_conflicts_average;                               \/\/N inputs that there is on a/;"	m	class:CollectionBusLineStats	typeref:typename:counter_t
n_cycles	include/STONNEModel.h	/^    unsigned int n_cycles;   $/;"	m	class:Stonne	typeref:typename:unsigned int
n_dests	include/DataPackage.h	/^    unsigned int n_dests; \/\/Number of receivers in multicast operation$/;"	m	class:DataPackage	typeref:typename:unsigned int
n_folding	include/CompilerComponent.h	/^    unsigned int n_folding;$/;"	m	class:CompilerComponent	typeref:typename:unsigned int
n_folding	include/MSwitch.h	/^  unsigned int n_folding; \/\/ Control the number of partial sums that must be$/;"	m	class:MSwitch	typeref:typename:unsigned int
n_folding_configuration	include/CompilerMSN.h	/^    std::map<unsigned int, unsigned int> n_folding_configuration; \/\/Indicates the number of fo/;"	m	class:CompilerMSN	typeref:typename:std::map<unsigned int,unsigned int>
n_fronts	include/Stats.h	/^    counter_t n_fronts; \/\/Look up without poping$/;"	m	class:FifoStats	typeref:typename:counter_t
n_input_forwardings_receive	include/Stats.h	/^    counter_t n_input_forwardings_receive;             \/\/N cycles the MSwitch receives an inpu/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_input_forwardings_send	include/Stats.h	/^    counter_t n_input_forwardings_send;                \/\/N cycles the MSwitch sends an input d/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_input_ports	include/DSNetworkTop.h	/^    unsigned int n_input_ports; $/;"	m	class:DSNetworkTop	typeref:typename:unsigned int
n_inputs_receive	include/Stats.h	/^    counter_t n_inputs_receive;                        \/\/N cycles the MSwitch receives a new i/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_inputs_receive	include/Stats.h	/^    std::vector<counter_t> n_inputs_receive;                     \/\/N inputs that have been rec/;"	m	class:CollectionBusLineStats	typeref:typename:std::vector<counter_t>
n_iterations_completed	include/OSMeshSDMemory.h	/^   unsigned int n_iterations_completed;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
n_left_forwardings_receive	include/Stats.h	/^    counter_t n_left_forwardings_receive;            \/\/N cycles the Multiplier receives an inp/;"	m	class:MultiplierOSStats	typeref:typename:counter_t
n_left_sends	include/Stats.h	/^    counter_t n_left_sends;         \/\/ N cycles the ASwitch send the input data to the left co/;"	m	class:DSwitchStats	typeref:typename:counter_t
n_memory_send	include/Stats.h	/^    counter_t n_memory_send;                            \/\/N cycles the ASwitch send a data dir/;"	m	class:ASwitchStats	typeref:typename:counter_t
n_memory_send	include/Stats.h	/^    counter_t n_memory_send;                            \/\/N cycles the Accumulator sends a dat/;"	m	class:AccumulatorStats	typeref:typename:counter_t
n_multiplications	include/Stats.h	/^    counter_t n_multiplications;                       \/\/N cycles the MSwitch performs a multi/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_multiplications	include/Stats.h	/^    counter_t n_multiplications;                     \/\/N cycles the Multiplier performs a mult/;"	m	class:MultiplierOSStats	typeref:typename:counter_t
n_multiplier_configurations	include/Config.h	/^    unsigned int n_multiplier_configurations; \/\/Number of multiplier configurations$/;"	m	class:SDMemoryConfig	typeref:typename:unsigned int
n_ones_sta_matrix	include/SparseSDMemory.h	/^   unsigned int n_ones_sta_matrix;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
n_ones_str_matrix	include/SparseSDMemory.h	/^   unsigned int n_ones_str_matrix;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
n_parent_send	include/Stats.h	/^    counter_t n_parent_send;                            \/\/N cycles the ASwitch send a data to /;"	m	class:ASwitchStats	typeref:typename:counter_t
n_pops	include/Stats.h	/^    counter_t n_pops;$/;"	m	class:FifoStats	typeref:typename:counter_t
n_psum_forwarding_send	include/Stats.h	/^    counter_t n_psum_forwarding_send;                  \/\/N cycles the MSwitch forwards a psum /;"	m	class:MSwitchStats	typeref:typename:counter_t
n_psums	include/Accumulator.h	/^    unsigned int n_psums; \/\/Number of psums before accumulation$/;"	m	class:Accumulator	typeref:typename:unsigned int
n_psums	include/FEASwitch.h	/^    unsigned int n_psums; \/\/Number of psums before accumulation$/;"	m	class:FEASwitch	typeref:typename:unsigned int
n_psums	include/SDMemory.h	/^    unsigned int n_psums; \/\/psums per window$/;"	m	class:VNAT_Register	typeref:typename:unsigned int
n_psums_receive	include/Stats.h	/^    counter_t n_psums_receive;                         \/\/N cycles the MSwitch receives a new p/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_pushes	include/Stats.h	/^    counter_t n_pushes;$/;"	m	class:FifoStats	typeref:typename:counter_t
n_read_ports	include/Config.h	/^    unsigned int n_read_ports; \/\/dn_bw$/;"	m	class:SDMemoryConfig	typeref:typename:unsigned int
n_read_ports	include/OSMeshSDMemory.h	/^    unsigned int n_read_ports;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
n_read_ports	include/SDMemory.h	/^    unsigned int n_read_ports;$/;"	m	class:SDMemory	typeref:typename:unsigned int
n_read_ports	include/SparseSDMemory.h	/^    unsigned int n_read_ports;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
n_receives	include/Stats.h	/^    counter_t n_receives;                               \/\/N cycles the Accumulator receives a /;"	m	class:AccumulatorStats	typeref:typename:counter_t
n_receives	include/Stats.h	/^    counter_t n_receives;       \/\/ n times the connection is used to receive a data$/;"	m	class:ConnectionStats	typeref:typename:counter_t
n_reconfigurations	include/Stats.h	/^    counter_t n_reconfigurations;                                \/\/Number of reconfigurations /;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_reduce_network_configurations	include/Config.h	/^    unsigned int n_reduce_network_configurations; \/\/Number of reduce network configurations$/;"	m	class:SDMemoryConfig	typeref:typename:unsigned int
n_register_reads	include/Stats.h	/^    counter_t n_register_reads;                         \/\/N cycles the Accumulator reads from /;"	m	class:AccumulatorStats	typeref:typename:counter_t
n_register_writes	include/Stats.h	/^    counter_t n_register_writes;                        \/\/N cycles the Accumulator writes to i/;"	m	class:AccumulatorStats	typeref:typename:counter_t
n_right_forwardings_send	include/Stats.h	/^    counter_t n_right_forwardings_send;              \/\/N cycles the Multiplier sends an input /;"	m	class:MultiplierOSStats	typeref:typename:counter_t
n_right_sends	include/Stats.h	/^    counter_t n_right_sends;        \/\/ N cycles the ASwitch send the input data to the right c/;"	m	class:DSwitchStats	typeref:typename:counter_t
n_sends	include/Stats.h	/^    counter_t n_sends;                                           \/\/N times the bus send a data/;"	m	class:CollectionBusLineStats	typeref:typename:counter_t
n_sends	include/Stats.h	/^    counter_t n_sends;          \/\/ n times the connection is used to send a data$/;"	m	class:ConnectionStats	typeref:typename:counter_t
n_sta_vectors_at_once_avg	include/Stats.h	/^    counter_t n_sta_vectors_at_once_avg;                             \/\/Number of sta vectors t/;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_sta_vectors_at_once_max	include/Stats.h	/^    counter_t n_sta_vectors_at_once_max;                         \/\/ Maximum number of vectors /;"	m	class:SDMemoryStats	typeref:typename:counter_t
n_switches_traversed_by_cycle	include/Config.h	/^    unsigned int n_switches_traversed_by_cycle; \/\/TODO Not implemented yet$/;"	m	class:DSNetworkConfig	typeref:typename:unsigned int
n_times_conflicts	include/Stats.h	/^    counter_t n_times_conflicts;                                 \/\/N times there is more than /;"	m	class:CollectionBusLineStats	typeref:typename:counter_t
n_top_forwardings_receive	include/Stats.h	/^    counter_t n_top_forwardings_receive;             \/\/N cycles the Multiplier receives a weig/;"	m	class:MultiplierOSStats	typeref:typename:counter_t
n_unicasts	include/Stats.h	/^    counter_t n_unicasts;           \/\/ N cycles the ASwitch send the input data throgh a singl/;"	m	class:DSwitchStats	typeref:typename:counter_t
n_weight_fifo_flush	include/Stats.h	/^    counter_t n_weight_fifo_flush;                     \/\/N cycles the MSwitch has to flush the/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_weights_receive	include/Stats.h	/^    counter_t n_weights_receive;                       \/\/N cycles the MSwitch receives a new w/;"	m	class:MSwitchStats	typeref:typename:counter_t
n_windows	include/MSwitch.h	/^    n_windows; \/\/ Control number that specifies the number of slides (shifts) a$/;"	m	class:MSwitch	typeref:typename:unsigned int
n_write_ports	include/Config.h	/^    unsigned int n_write_ports;  \/\/rn_bw$/;"	m	class:SDMemoryConfig	typeref:typename:unsigned int
n_write_ports	include/OSMeshSDMemory.h	/^    unsigned int n_write_ports; $/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
n_write_ports	include/SDMemory.h	/^    unsigned int n_write_ports; $/;"	m	class:SDMemory	typeref:typename:unsigned int
n_write_ports	include/SparseSDMemory.h	/^    unsigned int n_write_ports; $/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
name	include/Unit.h	/^    std::string name; \/\/Name of the component$/;"	m	class:Unit	typeref:typename:std::string
nested_array	external/cpptoml.h	/^    std::vector<std::shared_ptr<array>> nested_array() const$/;"	f	class:cpptoml::array	typeref:typename:std::vector<std::shared_ptr<array>>
next_input_selected	include/CollectionBusLine.h	/^    unsigned int next_input_selected; \/\/Using RR policy$/;"	m	class:CollectionBusLine	typeref:typename:unsigned int
nlevels	include/ASNetwork.h	/^    int nlevels; \/\/Number of levels of the AS without taking into account the MS level$/;"	m	class:ASNetwork	typeref:typename:int
nlevels	include/DSNetwork.h	/^    int nlevels; \/\/Number of levels of the DS without taking into account the MS level$/;"	m	class:DSNetwork	typeref:typename:int
nlevels	include/FENetwork.h	/^    int nlevels; \/\/Number of levels of the AS without taking into account the MS level$/;"	m	class:FENetwork	typeref:typename:int
num	include/MSwitch.h	/^  int num;$/;"	m	class:MSwitch	typeref:typename:int
num	include/MultiplierOS.h	/^    int num; \/\/General num, just used for information (num = row_num*ms_cols + col_num)$/;"	m	class:MultiplierOS	typeref:typename:int
num_in_level	include/ASwitch.h	/^    unsigned int num_in_level;                       \/\/ Number of the Adder in the level$/;"	m	class:ASwitch	typeref:typename:unsigned int
num_in_level	include/DSwitch.h	/^    unsigned int num_in_level;$/;"	m	class:DSwitch	typeref:typename:unsigned int
num_in_level	include/FEASwitch.h	/^    unsigned int num_in_level;                       \/\/ Number of the Adder in the level$/;"	m	class:FEASwitch	typeref:typename:unsigned int
num_ms	include/ASwitch.h	/^    unsigned int num_ms;                             \/\/ These three parameters are for routing/;"	m	class:ASwitch	typeref:typename:unsigned int
num_ms	include/CompilerComponent.h	/^    unsigned int num_ms;$/;"	m	class:CompilerComponent	typeref:typename:unsigned int
num_ms	include/DSwitch.h	/^    unsigned int num_ms; \/\/These three parameters are for routing. In hardware it is not necce/;"	m	class:DSwitch	typeref:typename:unsigned int
num_ms	include/FEASwitch.h	/^    unsigned int num_ms;                             \/\/ These three parameters are for routing/;"	m	class:FEASwitch	typeref:typename:unsigned int
num_ms	include/SDMemory.h	/^    unsigned int num_ms;$/;"	m	class:SDMemory	typeref:typename:unsigned int
num_ms	include/SparseSDMemory.h	/^    unsigned int num_ms;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
offset_datetime	external/cpptoml.h	/^struct offset_datetime : local_datetime, zone_offset$/;"	s	namespace:cpptoml
on_error_	external/cpptoml.h	/^    OnError on_error_;$/;"	m	class:cpptoml::consumer	typeref:typename:OnError
operand_t	include/types.h	/^enum operand_t {WEIGHT, IACTIVATION, OACTIVATION, PSUM};$/;"	g
operation_mode	include/ASwitch.h	/^    adderoperation_t operation_mode;                  \/\/ Operation to perform by the AS (ADDER/;"	m	class:ASwitch	typeref:typename:adderoperation_t
operation_mode	include/Accumulator.h	/^    adderoperation_t operation_mode; \/\/Adder or comp$/;"	m	class:Accumulator	typeref:typename:adderoperation_t
operation_mode	include/DataPackage.h	/^    adderoperation_t operation_mode; \/\/operation that got this psum (Comparation or SUM)$/;"	m	class:DataPackage	typeref:typename:adderoperation_t
operation_mode	include/FEASwitch.h	/^    adderoperation_t operation_mode;                  \/\/ Operation to perform by the AS (ADDER/;"	m	class:FEASwitch	typeref:typename:adderoperation_t
operator ()	external/cpptoml.h	/^    void operator()(char c)$/;"	f	class:cpptoml::consumer	typeref:typename:void
operator ()	external/cpptoml.h	/^    void operator()(const char (&str)[N])$/;"	f	class:cpptoml::consumer	typeref:typename:void
operator *	external/cpptoml.h	/^    const T& operator*() const$/;"	f	class:cpptoml::option	typeref:typename:const T &
operator ->	external/cpptoml.h	/^    const T* operator->() const$/;"	f	class:cpptoml::option	typeref:typename:const T *
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& os, const local_date& dt)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& os, const local_datetime& dt)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& os, const local_time& ltime)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& os, const offset_datetime& dt)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& os, const zone_offset& zo)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& stream, const array& a)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& stream, const base& b)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& stream, const table& t)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^inline std::ostream& operator<<(std::ostream& stream, const table_array& t)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator <<	external/cpptoml.h	/^std::ostream& operator<<(std::ostream& stream, const value<T>& v)$/;"	f	namespace:cpptoml	typeref:typename:std::ostream &
operator bool	external/cpptoml.h	/^    explicit operator bool() const$/;"	f	class:cpptoml::option
option	external/cpptoml.h	/^    option() : empty_{true}$/;"	f	class:cpptoml::option
option	external/cpptoml.h	/^    option(T value) : empty_{false}, value_(std::move(value))$/;"	f	class:cpptoml::option
option	external/cpptoml.h	/^class option$/;"	c	namespace:cpptoml
organizeMatrix	src/utility.cpp	/^void organizeMatrix (float* matrix, unsigned int rows, unsigned int cols, unsigned int* pointer_/;"	f	typeref:typename:void
organizeMatrixBack	src/utility.cpp	/^void organizeMatrixBack (float* matrix, unsigned int rows, unsigned int cols, unsigned int* poin/;"	f	typeref:typename:void
os_	external/cpptoml.h	/^    std::ostream& os_;$/;"	m	class:cpptoml::fill_guard	typeref:typename:std::ostream &
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/ASNetwork.o"$/;"	s	object:2
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/ASwitch.o"$/;"	s	object:3
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/AccumulationBuffer.o"$/;"	s	object:0
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/Accumulator.o"$/;"	s	object:1
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/CollectionBus.o"$/;"	s	object:4
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/CollectionBusLine.o"$/;"	s	object:5
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/CompilerART.o"$/;"	s	object:6
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/CompilerFEN.o"$/;"	s	object:7
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/CompilerMSN.o"$/;"	s	object:8
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/CompilerMultiplierMesh.o"$/;"	s	object:9
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/Config.o"$/;"	s	object:10
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/Connection.o"$/;"	s	object:11
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/DNNLayer.o"$/;"	s	object:13
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/DNNModel.o"$/;"	s	object:14
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/DSNetwork.o"$/;"	s	object:15
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/DSNetworkTop.o"$/;"	s	object:16
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/DSwitch.o"$/;"	s	object:17
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/DataPackage.o"$/;"	s	object:12
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/FEASwitch.o"$/;"	s	object:18
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/FENetwork.o"$/;"	s	object:19
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/Fifo.o"$/;"	s	object:20
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/LookupTable.o"$/;"	s	object:21
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/MSNetwork.o"$/;"	s	object:23
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/MSwitch.o"$/;"	s	object:24
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/MultiplierOS.o"$/;"	s	object:25
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/OSMeshMN.o"$/;"	s	object:26
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/OSMeshSDMemory.o"$/;"	s	object:27
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/SDMemory.o"$/;"	s	object:28
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/STONNEModel.o"$/;"	s	object:31
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/SparseSDMemory.o"$/;"	s	object:29
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/Stats.o"$/;"	s	object:30
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/TemporalRN.o"$/;"	s	object:32
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/Tile.o"$/;"	s	object:34
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/main.o"$/;"	s	object:22
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/testbench.o"$/;"	s	object:33
output	compile_commands.json	/^    "output": "\/home\/dalton\/desktop\/stonne\/stonne\/objs\/utility.o"$/;"	s	object:35
outputASConnection	include/STONNEModel.h	/^    Connection* outputASConnection; \/\/The last connection of the AS and input to the lookuptab/;"	m	class:Stonne	typeref:typename:Connection *
outputConnection	include/ASNetwork.h	/^    Connection* outputConnection;  \/\/Given by external$/;"	m	class:ASNetwork	typeref:typename:Connection *
outputConnection	include/ASwitch.h	/^    Connection* outputConnection;                    \/\/ This is the output connection of the a/;"	m	class:ASwitch	typeref:typename:Connection *
outputConnection	include/Accumulator.h	/^    Connection* outputConnection;                    \/\/ This is the output connection of the a/;"	m	class:Accumulator	typeref:typename:Connection *
outputConnection	include/FEASwitch.h	/^    Connection* outputConnection;                    \/\/ This is the output connection of the a/;"	m	class:FEASwitch	typeref:typename:Connection *
outputConnection	include/FENetwork.h	/^    Connection* outputConnection;  \/\/Given by external$/;"	m	class:FENetwork	typeref:typename:Connection *
outputConnection	include/LookupTable.h	/^    Connection* outputConnection; \/\/Torwards the memory$/;"	m	class:LookupTable	typeref:typename:Connection *
outputConnection	include/MSwitch.h	/^  Connection* outputConnection;           \/\/ Towards the Reduce Network$/;"	m	class:MSwitch	typeref:typename:Connection *
outputConnection	include/TemporalRN.h	/^    Connection* outputConnection;  \/\/Given by external$/;"	m	class:TemporalRN	typeref:typename:Connection *
outputForwardingConnection	include/MSwitch.h	/^  Connection* outputForwardingConnection; \/\/ To the neighbour MS$/;"	m	class:MSwitch	typeref:typename:Connection *
outputForwardingEnabled	include/MSwitch.h	/^  bool outputForwardingEnabled; \/\/ Control signal that specifies if the output$/;"	m	class:MSwitch	typeref:typename:bool
outputLTConnection	include/STONNEModel.h	/^    Connection* outputLTConnection; \/\/Output of the lookup table connection and write port to /;"	m	class:Stonne	typeref:typename:Connection *
output_address	include/OSMeshSDMemory.h	/^    address_t output_address;$/;"	m	class:OSMeshSDMemory	typeref:typename:address_t
output_address	include/SDMemory.h	/^    address_t output_address;$/;"	m	class:SDMemory	typeref:typename:address_t
output_address	include/SparseSDMemory.h	/^    address_t output_address;$/;"	m	class:SparseSDMemory	typeref:typename:address_t
output_batch	include/DNNModel.h	/^  int output_batch;$/;"	m	class:CNNOutput	typeref:typename:int
output_channel	include/DNNModel.h	/^  int output_channel;$/;"	m	class:CNNOutput	typeref:typename:int
output_fifo	include/Accumulator.h	/^    Fifo* output_fifo;                      \/\/ Output fifo to the parent$/;"	m	class:Accumulator	typeref:typename:Fifo *
output_fw_fifo	include/ASwitch.h	/^    Fifo* output_fw_fifo;                        \/\/ Ouptut fifo to the fw link$/;"	m	class:ASwitch	typeref:typename:Fifo *
output_fw_fifo	include/FEASwitch.h	/^    Fifo* output_fw_fifo;                        \/\/ Ouptut fifo to the fw link$/;"	m	class:FEASwitch	typeref:typename:Fifo *
output_metadata	include/SparseSDMemory.h	/^    metadata_address_t output_metadata;$/;"	m	class:SparseSDMemory	typeref:typename:metadata_address_t
output_pixels_to_compute	include/SDMemory.h	/^    unsigned int output_pixels_to_compute;  \/\/This variable has the number of output pixels th/;"	m	class:SDMemory	typeref:typename:unsigned int
output_port	include/CollectionBusLine.h	/^    Connection* output_port;      \/\/Output connection with memory$/;"	m	class:CollectionBusLine	typeref:typename:Connection *
output_port	include/DataPackage.h	/^    unsigned int output_port; \/\/Used in the psum package to get the output port that was used /;"	m	class:DataPackage	typeref:typename:unsigned int
output_ports	include/ASwitch.h	/^    unsigned int output_ports;                       \/\/ output port $/;"	m	class:ASwitch	typeref:typename:unsigned int
output_ports	include/Accumulator.h	/^    unsigned int output_ports;                       \/\/ output port $/;"	m	class:Accumulator	typeref:typename:unsigned int
output_ports	include/Config.h	/^    unsigned int output_ports; \/\/ Number of output ports of the MS. $/;"	m	class:MSwitchConfig	typeref:typename:unsigned int
output_ports	include/Config.h	/^    unsigned int output_ports; \/\/Number of output ports of the ASwitch. By default  in MAERI t/;"	m	class:ASwitchConfig	typeref:typename:unsigned int
output_ports	include/Config.h	/^    unsigned int output_ports; \/\/Number of output ports. By default this will be 2$/;"	m	class:DSwitchConfig	typeref:typename:unsigned int
output_ports	include/DSwitch.h	/^    unsigned int output_ports;     \/\/Number of output ports in the DSwitch$/;"	m	class:DSwitch	typeref:typename:unsigned int
output_ports	include/FEASwitch.h	/^    unsigned int output_ports;                       \/\/ output port $/;"	m	class:FEASwitch	typeref:typename:unsigned int
output_ports	include/MSwitch.h	/^  unsigned int output_ports;$/;"	m	class:MSwitch	typeref:typename:unsigned int
output_ports	include/MultiplierOS.h	/^    unsigned int output_ports;$/;"	m	class:MultiplierOS	typeref:typename:unsigned int
output_psum_fifo	include/ASwitch.h	/^    Fifo* output_psum_fifo;                      \/\/ Output fifo to the parent$/;"	m	class:ASwitch	typeref:typename:Fifo *
output_psum_fifo	include/FEASwitch.h	/^    Fifo* output_psum_fifo;                      \/\/ Output fifo to the parent$/;"	m	class:FEASwitch	typeref:typename:Fifo *
output_psums_per_channel	include/SDMemory.h	/^    unsigned int output_psums_per_channel;$/;"	m	class:SDMemory	typeref:typename:unsigned int
output_size	include/OSMeshSDMemory.h	/^   unsigned int output_size; $/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
output_size	include/SDMemory.h	/^    unsigned int output_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
output_size	include/SparseSDMemory.h	/^   unsigned int output_size; $/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
output_size_iteration	include/OSMeshSDMemory.h	/^   unsigned int output_size_iteration;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
output_size_iteration	include/SparseSDMemory.h	/^   unsigned int output_size_iteration;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
output_x	include/DNNModel.h	/^  int output_x;$/;"	m	class:CNNOutput	typeref:typename:int
output_y	include/DNNModel.h	/^  int output_y;$/;"	m	class:CNNOutput	typeref:typename:int
outputconnectiontable	include/AccumulationBuffer.h	/^    std::map<int, Connection*> outputconnectiontable; \/\/ Output connections$/;"	m	class:AccumulationBuffer	typeref:typename:std::map<int,Connection * >
outputconnectiontable	include/TemporalRN.h	/^    std::vector<Connection*> outputconnectiontable; \/\/Connection to the collection bus$/;"	m	class:TemporalRN	typeref:typename:std::vector<Connection * >
packages_created	include/SDMemory.h	/^    std::list<DataPackage*> packages_created; \/\/ Vector used to track the packages and delete /;"	m	class:SDMemory	typeref:typename:std::list<DataPackage * >
parse	external/cpptoml.h	/^    std::shared_ptr<table> parse()$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<table>
parseHidden	src/DNNModel.cpp	/^void DNNModel::parseHidden(std::ifstream& infile) {$/;"	f	class:DNNModel	typeref:typename:void
parseInput	src/DNNModel.cpp	/^void DNNModel::parseInput(std::ifstream& infile) {$/;"	f	class:DNNModel	typeref:typename:void
parseLayerNumber	src/DNNModel.cpp	/^void DNNModel::parseLayerNumber(std::istringstream& instr) {$/;"	f	class:DNNModel	typeref:typename:void
parseLayerType	src/DNNModel.cpp	/^void DNNModel::parseLayerType(std::istringstream& instr) {$/;"	f	class:DNNModel	typeref:typename:void
parseModelName	src/DNNModel.cpp	/^void DNNModel::parseModelName(std::istringstream& instr) {$/;"	f	class:DNNModel	typeref:typename:void
parseOutput	src/DNNModel.cpp	/^void DNNModel::parseOutput(std::ifstream& infile) {$/;"	f	class:DNNModel	typeref:typename:void
parseWeight	src/DNNModel.cpp	/^void DNNModel::parseWeight(std::ifstream& infile) {$/;"	f	class:DNNModel	typeref:typename:void
parse_array	external/cpptoml.h	/^    std::shared_ptr<base> parse_array(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<base>
parse_bare_key	external/cpptoml.h	/^    std::string parse_bare_key(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string
parse_bool	external/cpptoml.h	/^    std::shared_ptr<value<bool>> parse_bool(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<value<bool>>
parse_date	external/cpptoml.h	/^    std::shared_ptr<base> parse_date(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<base>
parse_escape_code	external/cpptoml.h	/^    std::string parse_escape_code(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string
parse_exception	external/cpptoml.h	/^    parse_exception(const std::string& err) : std::runtime_error{err}$/;"	f	class:cpptoml::parse_exception
parse_exception	external/cpptoml.h	/^    parse_exception(const std::string& err, std::size_t line_number)$/;"	f	class:cpptoml::parse_exception
parse_exception	external/cpptoml.h	/^class parse_exception : public std::runtime_error$/;"	c	namespace:cpptoml
parse_file	external/cpptoml.h	/^inline std::shared_ptr<table> parse_file(const std::string& filename)$/;"	f	namespace:cpptoml	typeref:typename:std::shared_ptr<table>
parse_float	external/cpptoml.h	/^    std::shared_ptr<value<double>> parse_float(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<value<double>>
parse_hex	external/cpptoml.h	/^    uint32_t parse_hex(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:uint32_t
parse_inline_table	external/cpptoml.h	/^    std::shared_ptr<table> parse_inline_table(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<table>
parse_int	external/cpptoml.h	/^    std::shared_ptr<value<int64_t>> parse_int(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<value<int64_t>>
parse_key	external/cpptoml.h	/^    parse_key(std::string::iterator& it, const std::string::iterator& end,$/;"	f	class:cpptoml::parser	typeref:typename:std::string
parse_key_value	external/cpptoml.h	/^    void parse_key_value(std::string::iterator& it, std::string::iterator& end,$/;"	f	class:cpptoml::parser	typeref:typename:void
parse_multiline_string	external/cpptoml.h	/^    parse_multiline_string(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<value<std::string>>
parse_number	external/cpptoml.h	/^    std::shared_ptr<base> parse_number(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<base>
parse_object_array	external/cpptoml.h	/^    std::shared_ptr<Object> parse_object_array(Function&& fun, char delim,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<Object>
parse_simple_key	external/cpptoml.h	/^    std::string parse_simple_key(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string
parse_single_table	external/cpptoml.h	/^    void parse_single_table(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:void
parse_string	external/cpptoml.h	/^    std::shared_ptr<value<std::string>> parse_string(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<value<std::string>>
parse_table	external/cpptoml.h	/^    void parse_table(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:void
parse_table_array	external/cpptoml.h	/^    void parse_table_array(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:void
parse_time	external/cpptoml.h	/^    parse_time(std::string::iterator& it, const std::string::iterator& end)$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<value<local_time>>
parse_type	external/cpptoml.h	/^    enum class parse_type$/;"	g	class:cpptoml::parser
parse_unicode	external/cpptoml.h	/^    std::string parse_unicode(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string
parse_value	external/cpptoml.h	/^    std::shared_ptr<base> parse_value(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<base>
parse_value_array	external/cpptoml.h	/^    std::shared_ptr<array> parse_value_array(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::shared_ptr<array>
parsefile	src/DNNModel.cpp	/^void DNNModel::parsefile(std::ifstream& infile) {$/;"	f	class:DNNModel	typeref:typename:void
parser	external/cpptoml.h	/^    parser(std::istream& stream) : input_(stream)$/;"	f	class:cpptoml::parser
parser	external/cpptoml.h	/^class parser$/;"	c	namespace:cpptoml
path_	external/cpptoml.h	/^    std::vector<std::string> path_;$/;"	m	class:cpptoml::toml_writer	typeref:typename:std::vector<std::string>
pending_data	include/Connection.h	/^    bool pending_data;   \/\/ Indicates if data exists$/;"	m	class:Connection	typeref:typename:bool
pending_data	include/DSwitch.h	/^    bool pending_data;   \/\/ Indicates if data exists$/;"	m	class:DSwitch	typeref:typename:bool
pending_output	include/MSwitch.h	/^  bool pending_output;$/;"	m	class:MSwitch	typeref:typename:bool
pending_to_compute	include/MSwitch.h	/^  bool pending_to_compute; \/\/ Indicates there is data pending to compute$/;"	m	class:MSwitch	typeref:typename:bool
perform_operation_2_operands	src/ASwitch.cpp	/^DataPackage* ASwitch::perform_operation_2_operands(DataPackage* pck_left,$/;"	f	class:ASwitch	typeref:typename:DataPackage *
perform_operation_2_operands	src/Accumulator.cpp	/^DataPackage* Accumulator::perform_operation_2_operands(DataPackage* pck_left, DataPackage* pck_r/;"	f	class:Accumulator	typeref:typename:DataPackage *
perform_operation_2_operands	src/FEASwitch.cpp	/^DataPackage* FEASwitch::perform_operation_2_operands(DataPackage* pck_left, DataPackage* pck_rig/;"	f	class:FEASwitch	typeref:typename:DataPackage *
perform_operation_2_operands	src/MSwitch.cpp	/^DataPackage* MSwitch::perform_operation_2_operands(DataPackage* pck_left,$/;"	f	class:MSwitch	typeref:typename:DataPackage *
perform_operation_2_operands	src/MultiplierOS.cpp	/^DataPackage* MultiplierOS::perform_operation_2_operands(DataPackage* pck_left, DataPackage* pck_/;"	f	class:MultiplierOS	typeref:typename:DataPackage *
perform_operation_3_operands	src/ASwitch.cpp	/^DataPackage* ASwitch::perform_operation_3_operands(DataPackage* pck_left,$/;"	f	class:ASwitch	typeref:typename:DataPackage *
perform_operation_3_operands	src/FEASwitch.cpp	/^DataPackage* FEASwitch::perform_operation_3_operands(DataPackage* pck_left, DataPackage* pck_rig/;"	f	class:FEASwitch	typeref:typename:DataPackage *
performance	include/define.h	/^  performance = 0,$/;"	e	enum:OptGoal
pop	src/Fifo.cpp	/^DataPackage* Fifo::pop() {$/;"	f	class:Fifo	typeref:typename:DataPackage *
port_width	include/ASNetwork.h	/^    unsigned int port_width; \/\/Width in bits of each port$/;"	m	class:ASNetwork	typeref:typename:unsigned int
port_width	include/ASwitch.h	/^    unsigned int port_width;                         \/\/Bit width of each port$/;"	m	class:ASwitch	typeref:typename:unsigned int
port_width	include/AccumulationBuffer.h	/^    unsigned int port_width; \/\/Width in bits of each port$/;"	m	class:AccumulationBuffer	typeref:typename:unsigned int
port_width	include/Accumulator.h	/^    unsigned int port_width;                         \/\/Bit width of each port$/;"	m	class:Accumulator	typeref:typename:unsigned int
port_width	include/Config.h	/^    unsigned int port_width; $/;"	m	class:LookUpTableConfig	typeref:typename:unsigned int
port_width	include/Config.h	/^    unsigned int port_width; \/\/Bit width $/;"	m	class:MSwitchConfig	typeref:typename:unsigned int
port_width	include/Config.h	/^    unsigned int port_width; \/\/Bit width$/;"	m	class:ASwitchConfig	typeref:typename:unsigned int
port_width	include/Config.h	/^    unsigned int port_width; \/\/Bit width$/;"	m	class:DSwitchConfig	typeref:typename:unsigned int
port_width	include/Config.h	/^    unsigned int port_width; \/\/Bit width$/;"	m	class:SDMemoryConfig	typeref:typename:unsigned int
port_width	include/DSNetwork.h	/^    unsigned int port_width;$/;"	m	class:DSNetwork	typeref:typename:unsigned int
port_width	include/DSNetworkTop.h	/^    unsigned int port_width; $/;"	m	class:DSNetworkTop	typeref:typename:unsigned int
port_width	include/DSwitch.h	/^    unsigned int port_width;$/;"	m	class:DSwitch	typeref:typename:unsigned int
port_width	include/FEASwitch.h	/^    unsigned int port_width;                         \/\/Bit width of each port$/;"	m	class:FEASwitch	typeref:typename:unsigned int
port_width	include/FENetwork.h	/^    unsigned int port_width; \/\/Width in bits of each port$/;"	m	class:FENetwork	typeref:typename:unsigned int
port_width	include/LookupTable.h	/^    unsigned int port_width;$/;"	m	class:LookupTable	typeref:typename:unsigned int
port_width	include/MSwitch.h	/^  unsigned int port_width;$/;"	m	class:MSwitch	typeref:typename:unsigned int
port_width	include/MultiplierOS.h	/^    unsigned int port_width; $/;"	m	class:MultiplierOS	typeref:typename:unsigned int
port_width	include/OSMeshMN.h	/^    unsigned int port_width; \/\/Not used yet$/;"	m	class:OSMeshMN	typeref:typename:unsigned int
port_width	include/OSMeshSDMemory.h	/^    unsigned int port_width;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
port_width	include/SDMemory.h	/^    unsigned int port_width;$/;"	m	class:SDMemory	typeref:typename:unsigned int
port_width	include/SparseSDMemory.h	/^    unsigned int port_width;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
port_width	include/TemporalRN.h	/^    unsigned int port_width; \/\/Width in bits of each port$/;"	m	class:TemporalRN	typeref:typename:unsigned int
print	src/Stats.cpp	/^void ASwitchStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:ASwitchStats	typeref:typename:void
print	src/Stats.cpp	/^void AccumulatorStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:AccumulatorStats	typeref:typename:void
print	src/Stats.cpp	/^void CollectionBusLineStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:CollectionBusLineStats	typeref:typename:void
print	src/Stats.cpp	/^void ConnectionStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:ConnectionStats	typeref:typename:void
print	src/Stats.cpp	/^void DSwitchStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSwitchStats	typeref:typename:void
print	src/Stats.cpp	/^void FifoStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:FifoStats	typeref:typename:void
print	src/Stats.cpp	/^void MSwitchStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:MSwitchStats	typeref:typename:void
print	src/Stats.cpp	/^void MultiplierOSStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:MultiplierOSStats	typeref:typename:void
print	src/Stats.cpp	/^void SDMemoryStats::print(std::ofstream& out, unsigned int indent) {$/;"	f	class:SDMemoryStats	typeref:typename:void
printBitMap	src/utility.cpp	/^void printBitMap(unsigned int* bitmap, unsigned int rows, unsigned int cols) {$/;"	f	typeref:typename:void
printConfiguration	include/MultiplierNetwork.h	/^    virtual void printConfiguration(std::ofstream& out, unsigned int indent) {assert(false);}$/;"	f	class:MultiplierNetwork	typeref:typename:void
printConfiguration	include/ReduceNetwork.h	/^    virtual void printConfiguration(std::ofstream& out, unsigned int indent) {}  \/\/This functi/;"	f	class:ReduceNetwork	typeref:typename:void
printConfiguration	src/ASNetwork.cpp	/^void ASNetwork::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:ASNetwork	typeref:typename:void
printConfiguration	src/ASwitch.cpp	/^void ASwitch::printConfiguration(std::ofstream& out, unsigned int indent)$/;"	f	class:ASwitch	typeref:typename:void
printConfiguration	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:AccumulationBuffer	typeref:typename:void
printConfiguration	src/Config.cpp	/^void ASNetworkConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:ASNetworkConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void ASwitchConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:ASwitchConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void Config::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:Config	typeref:typename:void
printConfiguration	src/Config.cpp	/^void DSNetworkConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSNetworkConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void DSwitchConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSwitchConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void LookUpTableConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:LookUpTableConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void MSNetworkConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:MSNetworkConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void MSwitchConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:MSwitchConfig	typeref:typename:void
printConfiguration	src/Config.cpp	/^void SDMemoryConfig::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:SDMemoryConfig	typeref:typename:void
printConfiguration	src/DNNLayer.cpp	/^void DNNLayer::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:DNNLayer	typeref:typename:void
printConfiguration	src/FEASwitch.cpp	/^void FEASwitch::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:FEASwitch	typeref:typename:void
printConfiguration	src/FENetwork.cpp	/^void FENetwork::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:FENetwork	typeref:typename:void
printConfiguration	src/MSNetwork.cpp	/^void MSNetwork::printConfiguration(std::ofstream& out, unsigned int indent)$/;"	f	class:MSNetwork	typeref:typename:void
printConfiguration	src/MSwitch.cpp	/^void MSwitch::printConfiguration(std::ofstream& out, unsigned int indent)$/;"	f	class:MSwitch	typeref:typename:void
printConfiguration	src/MultiplierOS.cpp	/^void MultiplierOS::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:MultiplierOS	typeref:typename:void
printConfiguration	src/OSMeshMN.cpp	/^void OSMeshMN::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:OSMeshMN	typeref:typename:void
printConfiguration	src/TemporalRN.cpp	/^void TemporalRN::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:TemporalRN	typeref:typename:void
printConfiguration	src/Tile.cpp	/^void Tile::printConfiguration(std::ofstream& out, unsigned int indent) {$/;"	f	class:Tile	typeref:typename:void
printDenseMatrix	src/utility.cpp	/^void printDenseMatrix(float* matrix, unsigned int rows, unsigned int cols) {$/;"	f	typeref:typename:void
printEnergy	include/DistributionNetwork.h	/^    virtual void printEnergy(std::ofstream& out, unsigned int indent) {assert(false);}$/;"	f	class:DistributionNetwork	typeref:typename:void
printEnergy	include/MemoryController.h	/^    virtual void printEnergy(std::ofstream& out, unsigned int indent) {assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
printEnergy	include/MultiplierNetwork.h	/^    virtual void printEnergy(std::ofstream& out, unsigned int indent) {assert(false);}$/;"	f	class:MultiplierNetwork	typeref:typename:void
printEnergy	include/ReduceNetwork.h	/^    virtual void printEnergy(std::ofstream& out, unsigned int indent){}$/;"	f	class:ReduceNetwork	typeref:typename:void
printEnergy	include/Unit.h	/^    virtual void printEnergy(std::ofstream& out, unsigned int indent) {} \/\/Print the counters /;"	f	class:Unit	typeref:typename:void
printEnergy	src/ASNetwork.cpp	/^void ASNetwork::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:ASNetwork	typeref:typename:void
printEnergy	src/ASwitch.cpp	/^void ASwitch::printEnergy(std::ofstream& out, unsigned int indent)$/;"	f	class:ASwitch	typeref:typename:void
printEnergy	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:AccumulationBuffer	typeref:typename:void
printEnergy	src/Accumulator.cpp	/^void Accumulator::printEnergy(std::ofstream& out, unsigned int indent){$/;"	f	class:Accumulator	typeref:typename:void
printEnergy	src/CollectionBus.cpp	/^void Bus::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:Bus	typeref:typename:void
printEnergy	src/CollectionBusLine.cpp	/^void CollectionBusLine::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:CollectionBusLine	typeref:typename:void
printEnergy	src/Connection.cpp	/^void Connection::printEnergy(std::ofstream &out, unsigned int indent, std::string wire_type) {$/;"	f	class:Connection	typeref:typename:void
printEnergy	src/DSNetwork.cpp	/^void DSNetwork::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSNetwork	typeref:typename:void
printEnergy	src/DSNetworkTop.cpp	/^void DSNetworkTop::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSNetworkTop	typeref:typename:void
printEnergy	src/DSwitch.cpp	/^void DSwitch::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSwitch	typeref:typename:void
printEnergy	src/FEASwitch.cpp	/^void FEASwitch::printEnergy(std::ofstream& out, unsigned int indent){$/;"	f	class:FEASwitch	typeref:typename:void
printEnergy	src/FENetwork.cpp	/^void FENetwork::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:FENetwork	typeref:typename:void
printEnergy	src/Fifo.cpp	/^void Fifo::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:Fifo	typeref:typename:void
printEnergy	src/MSNetwork.cpp	/^void MSNetwork::printEnergy(std::ofstream& out, unsigned int indent)$/;"	f	class:MSNetwork	typeref:typename:void
printEnergy	src/MSwitch.cpp	/^void MSwitch::printEnergy(std::ofstream& out, unsigned int indent)$/;"	f	class:MSwitch	typeref:typename:void
printEnergy	src/MultiplierOS.cpp	/^void MultiplierOS::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:MultiplierOS	typeref:typename:void
printEnergy	src/OSMeshMN.cpp	/^void OSMeshMN::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:OSMeshMN	typeref:typename:void
printEnergy	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
printEnergy	src/SDMemory.cpp	/^void SDMemory::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:SDMemory	typeref:typename:void
printEnergy	src/STONNEModel.cpp	/^void Stonne::printEnergy() {$/;"	f	class:Stonne	typeref:typename:void
printEnergy	src/SparseSDMemory.cpp	/^void SparseSDMemory::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:SparseSDMemory	typeref:typename:void
printEnergy	src/TemporalRN.cpp	/^void TemporalRN::printEnergy(std::ofstream& out, unsigned int indent) {$/;"	f	class:TemporalRN	typeref:typename:void
printGlobalStats	src/STONNEModel.cpp	/^void Stonne::printGlobalStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:Stonne	typeref:typename:void
printSparseMatrix	src/utility.cpp	/^void printSparseMatrix(float* sparseMatrix, unsigned int* bitmap, unsigned int rows, unsigned in/;"	f	typeref:typename:void
printStats	include/DistributionNetwork.h	/^    virtual void printStats(std::ofstream& out, unsigned int indent) {assert(false);}$/;"	f	class:DistributionNetwork	typeref:typename:void
printStats	include/MemoryController.h	/^    virtual void printStats(std::ofstream& out, unsigned int indent) {assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
printStats	include/MultiplierNetwork.h	/^    virtual void printStats(std::ofstream &out, unsigned int indent) {assert(false);}$/;"	f	class:MultiplierNetwork	typeref:typename:void
printStats	include/ReduceNetwork.h	/^    virtual void printStats(std::ofstream& out, unsigned int indent) {} \/\/This functions print/;"	f	class:ReduceNetwork	typeref:typename:void
printStats	include/Unit.h	/^    virtual void printStats(std::ofstream& out, unsigned int indent) {} \/\/Print the stats of t/;"	f	class:Unit	typeref:typename:void
printStats	src/ASNetwork.cpp	/^void ASNetwork::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:ASNetwork	typeref:typename:void
printStats	src/ASwitch.cpp	/^void ASwitch::printStats(std::ofstream& out, unsigned int indent)$/;"	f	class:ASwitch	typeref:typename:void
printStats	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:AccumulationBuffer	typeref:typename:void
printStats	src/Accumulator.cpp	/^void Accumulator::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:Accumulator	typeref:typename:void
printStats	src/CollectionBus.cpp	/^void Bus::printStats(std::ofstream &out, unsigned int indent) {$/;"	f	class:Bus	typeref:typename:void
printStats	src/CollectionBusLine.cpp	/^void CollectionBusLine::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:CollectionBusLine	typeref:typename:void
printStats	src/DSNetwork.cpp	/^void DSNetwork::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSNetwork	typeref:typename:void
printStats	src/DSNetworkTop.cpp	/^void DSNetworkTop::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSNetworkTop	typeref:typename:void
printStats	src/DSwitch.cpp	/^void DSwitch::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:DSwitch	typeref:typename:void
printStats	src/FEASwitch.cpp	/^void FEASwitch::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:FEASwitch	typeref:typename:void
printStats	src/FENetwork.cpp	/^void FENetwork::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:FENetwork	typeref:typename:void
printStats	src/Fifo.cpp	/^void Fifo::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:Fifo	typeref:typename:void
printStats	src/MSNetwork.cpp	/^void MSNetwork::printStats(std::ofstream& out, unsigned int indent)$/;"	f	class:MSNetwork	typeref:typename:void
printStats	src/MSwitch.cpp	/^void MSwitch::printStats(std::ofstream& out, unsigned int indent)$/;"	f	class:MSwitch	typeref:typename:void
printStats	src/MultiplierOS.cpp	/^void MultiplierOS::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:MultiplierOS	typeref:typename:void
printStats	src/OSMeshMN.cpp	/^void OSMeshMN::printStats(std::ofstream &out, unsigned int indent) {$/;"	f	class:OSMeshMN	typeref:typename:void
printStats	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
printStats	src/SDMemory.cpp	/^void SDMemory::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:SDMemory	typeref:typename:void
printStats	src/STONNEModel.cpp	/^void Stonne::printStats() {$/;"	f	class:Stonne	typeref:typename:void
printStats	src/SparseSDMemory.cpp	/^void SparseSDMemory::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:SparseSDMemory	typeref:typename:void
printStats	src/TemporalRN.cpp	/^void TemporalRN::printStats(std::ofstream& out, unsigned int indent) {$/;"	f	class:TemporalRN	typeref:typename:void
print_stats_enabled	include/Config.h	/^    unsigned int print_stats_enabled;    \/\/Specified whether the statistics must be printed. $/;"	m	class:Config	typeref:typename:unsigned int
ps	include/define.h	/^  ps = 1,$/;"	e	enum:ConfigType
psum_fifo	include/MSwitch.h	/^  Fifo* psum_fifo;   \/\/ Psum ready to be sent to the parent$/;"	m	class:MSwitch	typeref:typename:Fifo *
psum_fifos	include/OSMeshSDMemory.h	/^    std::vector<Fifo*> psum_fifos; \/\/Fifos used to store partial psums before being fetched$/;"	m	class:OSMeshSDMemory	typeref:typename:std::vector<Fifo * >
psum_fifos	include/SDMemory.h	/^    std::vector<Fifo*> psum_fifos; \/\/Fifos used to store partial psums before being fetched$/;"	m	class:SDMemory	typeref:typename:std::vector<Fifo * >
psum_fifos	include/SparseSDMemory.h	/^    std::vector<Fifo*> psum_fifos; \/\/Fifos used to store partial psums before being fetched$/;"	m	class:SparseSDMemory	typeref:typename:std::vector<Fifo * >
psums_created	include/ASwitch.h	/^    std::vector<DataPackage*> psums_created;         \/\/ Array of packages generated by this sp/;"	m	class:ASwitch	typeref:typename:std::vector<DataPackage * >
psums_created	include/FEASwitch.h	/^    std::vector<DataPackage*> psums_created;         \/\/ Array of packages generated by this sp/;"	m	class:FEASwitch	typeref:typename:std::vector<DataPackage * >
psums_created	include/MSwitch.h	/^    psums_created; \/\/ All the psums created by this multiplier used to delete$/;"	m	class:MSwitch	typeref:typename:std::vector<DataPackage * >
push	src/Fifo.cpp	/^void Fifo::push(DataPackage* data) {$/;"	f	class:Fifo	typeref:typename:void
push_back	external/cpptoml.h	/^    void push_back(T&& val, typename value_traits<T>::type* = 0)$/;"	f	class:cpptoml::array	typeref:typename:void
push_back	external/cpptoml.h	/^    void push_back(const std::shared_ptr<array>& val)$/;"	f	class:cpptoml::array	typeref:typename:void
push_back	external/cpptoml.h	/^    void push_back(const std::shared_ptr<table>& val)$/;"	f	class:cpptoml::table_array	typeref:typename:void
push_back	external/cpptoml.h	/^    void push_back(const std::shared_ptr<value<T>>& val)$/;"	f	class:cpptoml::array	typeref:typename:void
read_arguments	energy_tables/calculate_energy.py	/^def read_arguments():$/;"	f
read_connections	include/OSMeshSDMemory.h	/^    std::vector<Connection*> read_connections; \/\/Input port connections. There are as many con/;"	m	class:OSMeshSDMemory	typeref:typename:std::vector<Connection * >
read_connections	include/SDMemory.h	/^    std::vector<Connection*> read_connections; \/\/Input port connections. There are as many con/;"	m	class:SDMemory	typeref:typename:std::vector<Connection * >
read_connections	include/SparseSDMemory.h	/^    std::vector<Connection*> read_connections; \/\/Input port connections. There are as many con/;"	m	class:SparseSDMemory	typeref:typename:std::vector<Connection * >
read_time	external/cpptoml.h	/^    local_time read_time(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:local_time
receive	src/Accumulator.cpp	/^void Accumulator::receive() { $/;"	f	class:Accumulator	typeref:typename:void
receive	src/CollectionBusLine.cpp	/^void CollectionBusLine::receive() {$/;"	f	class:CollectionBusLine	typeref:typename:void
receive	src/Connection.cpp	/^vector<DataPackage*> Connection::receive() { $/;"	f	class:Connection	typeref:typename:vector<DataPackage * >
receive	src/DSwitch.cpp	/^void DSwitch::receive() { $/;"	f	class:DSwitch	typeref:typename:void
receive	src/MSwitch.cpp	/^void MSwitch::receive(Connection* connection)$/;"	f	class:MSwitch	typeref:typename:void
receive	src/MultiplierOS.cpp	/^void MultiplierOS::receive() {  \/\/Receive a package either from the left or the top connection$/;"	f	class:MultiplierOS	typeref:typename:void
receive	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::receive() { \/\/TODO control if there is no space in queue$/;"	f	class:OSMeshSDMemory	typeref:typename:void
receive	src/SDMemory.cpp	/^void SDMemory::receive() { \/\/TODO control if there is no space in queue$/;"	f	class:SDMemory	typeref:typename:void
receive	src/SparseSDMemory.cpp	/^void SparseSDMemory::receive() { \/\/TODO control if there is no space in queue$/;"	f	class:SparseSDMemory	typeref:typename:void
receive_below_nodes_fwlinks	src/FEASwitch.cpp	/^void FEASwitch::receive_below_nodes_fwlinks() {$/;"	f	class:FEASwitch	typeref:typename:void
receive_childs	src/ASwitch.cpp	/^void ASwitch::receive_childs()$/;"	f	class:ASwitch	typeref:typename:void
receive_childs	src/FEASwitch.cpp	/^void FEASwitch::receive_childs() { $/;"	f	class:FEASwitch	typeref:typename:void
receive_fwlink	src/ASwitch.cpp	/^void ASwitch::receive_fwlink()$/;"	f	class:ASwitch	typeref:typename:void
receive_fwlink	src/FEASwitch.cpp	/^void FEASwitch::receive_fwlink() {$/;"	f	class:FEASwitch	typeref:typename:void
reduce_network	include/OSMeshSDMemory.h	/^    ReduceNetwork* reduce_network; \/\/Reduce network used to be reconfigured$/;"	m	class:OSMeshSDMemory	typeref:typename:ReduceNetwork *
reduce_network	include/SDMemory.h	/^    ReduceNetwork* reduce_network; \/\/This is not used in this controller as the configuration /;"	m	class:SDMemory	typeref:typename:ReduceNetwork *
reduce_network	include/SparseSDMemory.h	/^    ReduceNetwork* reduce_network; \/\/Reduce network used to be reconfigured$/;"	m	class:SparseSDMemory	typeref:typename:ReduceNetwork *
reduce_network_type	include/Config.h	/^    ReduceNetwork_t reduce_network_type; \/\/Type of the ReduceNetwork configured in this moment$/;"	m	class:ASNetworkConfig	typeref:typename:ReduceNetwork_t
reserve	external/cpptoml.h	/^    void reserve(size_type n)$/;"	f	class:cpptoml::array	typeref:typename:void
reserve	external/cpptoml.h	/^    void reserve(size_type n)$/;"	f	class:cpptoml::table_array	typeref:typename:void
reset	src/Config.cpp	/^void Config::reset() {$/;"	f	class:Config	typeref:typename:void
reset	src/Stats.cpp	/^void ASwitchStats::reset() {$/;"	f	class:ASwitchStats	typeref:typename:void
reset	src/Stats.cpp	/^void AccumulatorStats::reset() {$/;"	f	class:AccumulatorStats	typeref:typename:void
reset	src/Stats.cpp	/^void CollectionBusLineStats::reset() {$/;"	f	class:CollectionBusLineStats	typeref:typename:void
reset	src/Stats.cpp	/^void ConnectionStats::reset() {$/;"	f	class:ConnectionStats	typeref:typename:void
reset	src/Stats.cpp	/^void DSwitchStats::reset() {$/;"	f	class:DSwitchStats	typeref:typename:void
reset	src/Stats.cpp	/^void FifoStats::reset() {$/;"	f	class:FifoStats	typeref:typename:void
reset	src/Stats.cpp	/^void MSwitchStats::reset() {$/;"	f	class:MSwitchStats	typeref:typename:void
reset	src/Stats.cpp	/^void MultiplierOSStats::reset() {$/;"	f	class:MultiplierOSStats	typeref:typename:void
reset	src/Stats.cpp	/^void SDMemoryStats::reset() {$/;"	f	class:SDMemoryStats	typeref:typename:void
resetSignals	include/MultiplierNetwork.h	/^    virtual void resetSignals() {assert(false);}$/;"	f	class:MultiplierNetwork	typeref:typename:void
resetSignals	include/ReduceNetwork.h	/^    virtual void resetSignals() {assert(false);}$/;"	f	class:ReduceNetwork	typeref:typename:void
resetSignals	src/ASNetwork.cpp	/^void ASNetwork::resetSignals() {$/;"	f	class:ASNetwork	typeref:typename:void
resetSignals	src/ASwitch.cpp	/^void ASwitch::resetSignals()$/;"	f	class:ASwitch	typeref:typename:void
resetSignals	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::resetSignals() {$/;"	f	class:AccumulationBuffer	typeref:typename:void
resetSignals	src/Accumulator.cpp	/^void Accumulator::resetSignals() {$/;"	f	class:Accumulator	typeref:typename:void
resetSignals	src/MSNetwork.cpp	/^void MSNetwork::resetSignals()$/;"	f	class:MSNetwork	typeref:typename:void
resetSignals	src/MSwitch.cpp	/^void MSwitch::resetSignals()$/;"	f	class:MSwitch	typeref:typename:void
resetSignals	src/MultiplierOS.cpp	/^void MultiplierOS::resetSignals() {$/;"	f	class:MultiplierOS	typeref:typename:void
resetSignals	src/OSMeshMN.cpp	/^void OSMeshMN::resetSignals() {$/;"	f	class:OSMeshMN	typeref:typename:void
resetSignals	src/TemporalRN.cpp	/^void TemporalRN::resetSignals() {$/;"	f	class:TemporalRN	typeref:typename:void
resolve_qualified	external/cpptoml.h	/^    bool resolve_qualified(const std::string& key,$/;"	f	class:cpptoml::table	typeref:typename:bool
return_type	external/cpptoml.h	/^    using return_type = option<std::vector<T>>;$/;"	t	struct:cpptoml::array_of_trait	typeref:typename:option<std::vector<T>>
return_type	external/cpptoml.h	/^    using return_type = option<std::vector<std::shared_ptr<array>>>;$/;"	t	struct:cpptoml::array_of_trait	typeref:typename:option<std::vector<std::shared_ptr<array>>>
rightConnection	include/DSwitch.h	/^    Connection* rightConnection;  \/\/ This is the right connection of the switch$/;"	m	class:DSwitch	typeref:typename:Connection *
right_child_enabled	include/ASwitch.h	/^    bool right_child_enabled;                         \/\/ Indicates if the as receives data fro/;"	m	class:ASwitch	typeref:typename:bool
right_child_enabled	include/FEASwitch.h	/^    bool right_child_enabled;                         \/\/ Indicates if the as receives data fro/;"	m	class:FEASwitch	typeref:typename:bool
right_connection	include/MultiplierOS.h	/^    Connection* right_connection; \/\/To the right neighbour$/;"	m	class:MultiplierOS	typeref:typename:Connection *
right_fifo	include/MultiplierOS.h	/^    Fifo* right_fifo; \/\/Packages to be sent to the right (i.e., activations)$/;"	m	class:MultiplierOS	typeref:typename:Fifo *
route	src/Accumulator.cpp	/^void Accumulator::route() {$/;"	f	class:Accumulator	typeref:typename:void
route_1_1_plus_fw_1_1_config	src/ASwitch.cpp	/^void ASwitch::route_1_1_plus_fw_1_1_config()$/;"	f	class:ASwitch	typeref:typename:void
route_1_1_plus_fw_1_1_config	src/FEASwitch.cpp	/^void FEASwitch::route_1_1_plus_fw_1_1_config() {$/;"	f	class:FEASwitch	typeref:typename:void
route_2_1_config	src/ASwitch.cpp	/^void ASwitch::route_2_1_config()$/;"	f	class:ASwitch	typeref:typename:void
route_2_1_config	src/FEASwitch.cpp	/^void FEASwitch::route_2_1_config() {$/;"	f	class:FEASwitch	typeref:typename:void
route_3_1_config	src/ASwitch.cpp	/^void ASwitch::route_3_1_config()$/;"	f	class:ASwitch	typeref:typename:void
route_3_1_config	src/FEASwitch.cpp	/^void FEASwitch::route_3_1_config() {$/;"	f	class:FEASwitch	typeref:typename:void
route_fold_config	src/FEASwitch.cpp	/^void FEASwitch::route_fold_config() {$/;"	f	class:FEASwitch	typeref:typename:void
route_fw_2_2_config	src/ASwitch.cpp	/^void ASwitch::route_fw_2_2_config()$/;"	f	class:ASwitch	typeref:typename:void
route_fw_2_2_config	src/FEASwitch.cpp	/^void FEASwitch::route_fw_2_2_config() {$/;"	f	class:FEASwitch	typeref:typename:void
route_packages	src/DSwitch.cpp	/^void DSwitch::route_packages() { \/\/TODO It is supposing you have enouth bandwidth in the conne/;"	f	class:DSwitch	typeref:typename:void
row_filter_size	include/SDMemory.h	/^    unsigned int row_filter_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
row_input_size	include/SDMemory.h	/^    unsigned int row_input_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
row_num	include/MultiplierOS.h	/^    int row_num;$/;"	m	class:MultiplierOS	typeref:typename:int
row_output_size	include/SDMemory.h	/^    unsigned int row_output_size;$/;"	m	class:SDMemory	typeref:typename:unsigned int
rows_used	include/OSMeshSDMemory.h	/^    unsigned int rows_used;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
run	src/STONNEModel.cpp	/^void Stonne::run() {$/;"	f	class:Stonne	typeref:typename:void
runConvCommand	src/main.cpp	/^bool runConvCommand(int argc, char* argv[])$/;"	f	typeref:typename:bool
runDenseGEMMCommand	src/main.cpp	/^bool runDenseGEMMCommand(int argc, char* argv[])$/;"	f	typeref:typename:bool
runHelpCommand	src/main.cpp	/^bool runHelpCommand()$/;"	f	typeref:typename:bool
runSparseGEMMCommand	src/main.cpp	/^bool runSparseGEMMCommand(int argc, char* argv[])$/;"	f	typeref:typename:bool
run_real_tests	src/testbench.cpp	/^void run_real_tests() {$/;"	f	typeref:typename:void
run_simple_tests	src/testbench.cpp	/^void run_simple_tests() {$/;"	f	typeref:typename:void
run_single_test_cnn	src/testbench.cpp	/^bool run_single_test_cnn(DNNLayer* dnn_layer, unsigned int T_R, unsigned int T_S, unsigned int T/;"	f	typeref:typename:bool
run_smart_tests	src/testbench.cpp	/^void run_smart_tests() {$/;"	f	typeref:typename:void
run_stonne_architecture_tests	src/testbench.cpp	/^void run_stonne_architecture_tests(layerTest layer, unsigned int num_ms) {$/;"	f	typeref:typename:void
sdmemoryStats	include/OSMeshSDMemory.h	/^   SDMemoryStats sdmemoryStats; \/\/To track information$/;"	m	class:OSMeshSDMemory	typeref:typename:SDMemoryStats
sdmemoryStats	include/SDMemory.h	/^   SDMemoryStats sdmemoryStats; \/\/To track information$/;"	m	class:SDMemory	typeref:typename:SDMemoryStats
sdmemoryStats	include/SparseSDMemory.h	/^   SDMemoryStats sdmemoryStats; \/\/To track information$/;"	m	class:SparseSDMemory	typeref:typename:SDMemoryStats
second	external/cpptoml.h	/^    int second = 0;$/;"	m	struct:cpptoml::local_time	typeref:typename:int
send	src/ASwitch.cpp	/^void ASwitch::send()$/;"	f	class:ASwitch	typeref:typename:void
send	src/Accumulator.cpp	/^void Accumulator::send() {$/;"	f	class:Accumulator	typeref:typename:void
send	src/Connection.cpp	/^void Connection::send(vector<DataPackage*> data_p) {$/;"	f	class:Connection	typeref:typename:void
send	src/DSwitch.cpp	/^void DSwitch::send(vector<DataPackage*> data_p, Connection* connection) {$/;"	f	class:DSwitch	typeref:typename:void
send	src/FEASwitch.cpp	/^void FEASwitch::send() {$/;"	f	class:FEASwitch	typeref:typename:void
send	src/MSwitch.cpp	/^void MSwitch::send()$/;"	f	class:MSwitch	typeref:typename:void
send	src/MultiplierOS.cpp	/^void MultiplierOS::send() { \/\/Send the result through the outputConnection$/;"	f	class:MultiplierOS	typeref:typename:void
send	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::send() {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
send	src/SDMemory.cpp	/^void SDMemory::send() {$/;"	f	class:SDMemory	typeref:typename:void
send	src/SparseSDMemory.cpp	/^void SparseSDMemory::send() {$/;"	f	class:SparseSDMemory	typeref:typename:void
sendPackageToInputFifos	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::sendPackageToInputFifos(DataPackage* pck) {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
sendPackageToInputFifos	src/SDMemory.cpp	/^void SDMemory::sendPackageToInputFifos(DataPackage* pck) {$/;"	f	class:SDMemory	typeref:typename:void
sendPackageToInputFifos	src/SparseSDMemory.cpp	/^void SparseSDMemory::sendPackageToInputFifos(DataPackage* pck) {$/;"	f	class:SparseSDMemory	typeref:typename:void
sequential_layer	src/testbench.cpp	/^void sequential_layer(unsigned int R, unsigned int S, unsigned int C, unsigned int K, unsigned i/;"	f	typeref:typename:void
setAccBufferConnection	src/MultiplierOS.cpp	/^void MultiplierOS::setAccBufferConnection(Connection* accbuffer_connection) { \/\/Set the output/;"	f	class:MultiplierOS	typeref:typename:void
setBottomConnection	src/MultiplierOS.cpp	/^void MultiplierOS::setBottomConnection(Connection* bottom_connection) { \/\/Set the input connec/;"	f	class:MultiplierOS	typeref:typename:void
setChildsEnabled	src/ASwitch.cpp	/^void ASwitch::setChildsEnabled(bool left_child_enabled,$/;"	f	class:ASwitch	typeref:typename:void
setChildsEnabled	src/FEASwitch.cpp	/^void FEASwitch::setChildsEnabled(bool left_child_enabled, bool right_child_enabled) {$/;"	f	class:FEASwitch	typeref:typename:void
setConfiguration	include/Unit.h	/^    virtual void setConfiguration(Config cfg) {} \/\/set the configuration parameters of the com/;"	f	class:Unit	typeref:typename:void
setConfigurationMode	src/ASwitch.cpp	/^void ASwitch::setConfigurationMode(adderconfig_t config_mode)$/;"	f	class:ASwitch	typeref:typename:void
setConfigurationMode	src/FEASwitch.cpp	/^void FEASwitch::setConfigurationMode(adderconfig_t config_mode) {$/;"	f	class:FEASwitch	typeref:typename:void
setDenseSpatialData	include/MemoryController.h	/^    virtual void setDenseSpatialData(unsigned int T_N, unsigned int T_K){assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
setDenseSpatialData	include/OSMeshSDMemory.h	/^    void setDenseSpatialData(unsigned int T_N, unsigned int T_K) {assert(false);}$/;"	f	class:OSMeshSDMemory	typeref:typename:void
setDirectForwardPsum	src/MSwitch.cpp	/^void MSwitch::setDirectForwardPsum(bool direct_forward_psum)$/;"	f	class:MSwitch	typeref:typename:void
setForwardPsum	src/MSwitch.cpp	/^void MSwitch::setForwardPsum(bool forward_psum)$/;"	f	class:MSwitch	typeref:typename:void
setForwardingConnection	src/ASwitch.cpp	/^void ASwitch::setForwardingConnection(Connection* forwardingConnection)$/;"	f	class:ASwitch	typeref:typename:void
setForwardingConnection	src/FEASwitch.cpp	/^void FEASwitch::setForwardingConnection(Connection* forwardingConnection) {$/;"	f	class:FEASwitch	typeref:typename:void
setForwardingLinkDirection	src/ASwitch.cpp	/^void ASwitch::setForwardingLinkDirection(fl_t fl_direction)$/;"	f	class:ASwitch	typeref:typename:void
setForwardingLinkDirection	src/FEASwitch.cpp	/^void FEASwitch::setForwardingLinkDirection(fl_t fl_direction) {$/;"	f	class:FEASwitch	typeref:typename:void
setForwardingToFoldNodeEnabled	src/FEASwitch.cpp	/^void FEASwitch::setForwardingToFoldNodeEnabled(bool forwarding_to_fold_node) {$/;"	f	class:FEASwitch	typeref:typename:void
setForwardingToMemoryEnabled	src/ASwitch.cpp	/^void ASwitch::setForwardingToMemoryEnabled(bool forwarding_to_memory)$/;"	f	class:ASwitch	typeref:typename:void
setForwardingToMemoryEnabled	src/FEASwitch.cpp	/^void FEASwitch::setForwardingToMemoryEnabled(bool forwarding_to_memory) {$/;"	f	class:FEASwitch	typeref:typename:void
setInputConnection	include/DSNetwork.h	/^    void setInputConnection(Connection* inputConnection)  { this->inputConnection = inputConnect/;"	f	class:DSNetwork	typeref:typename:void
setInputConnection	src/Accumulator.cpp	/^void Accumulator::setInputConnection(Connection* inputConnection) {$/;"	f	class:Accumulator	typeref:typename:void
setInputConnection	src/DSwitch.cpp	/^void DSwitch::setInputConnection(Connection *inputConnection) {$/;"	f	class:DSwitch	typeref:typename:void
setInputConnection	src/MSwitch.cpp	/^void MSwitch::setInputConnection(Connection* inputConnection)$/;"	f	class:MSwitch	typeref:typename:void
setInputConnections	include/MultiplierNetwork.h	/^    virtual void setInputConnections(std::map<int, Connection*> input_connections) {assert(false/;"	f	class:MultiplierNetwork	typeref:typename:void
setInputConnections	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::setInputConnections(std::vector<Connection*> inputConnections) {$/;"	f	class:AccumulationBuffer	typeref:typename:void
setInputConnections	src/MSNetwork.cpp	/^void MSNetwork::setInputConnections($/;"	f	class:MSNetwork	typeref:typename:void
setInputConnections	src/OSMeshMN.cpp	/^void OSMeshMN::setInputConnections(std::map<int, Connection*> input_connections) {$/;"	f	class:OSMeshMN	typeref:typename:void
setInputForwardingConnection	src/MSwitch.cpp	/^void MSwitch::setInputForwardingConnection($/;"	f	class:MSwitch	typeref:typename:void
setInputForwardingEnabled	src/MSwitch.cpp	/^void MSwitch::setInputForwardingEnabled(bool inputForwardingEnabled)$/;"	f	class:MSwitch	typeref:typename:void
setInputLeftConnection	src/ASwitch.cpp	/^void ASwitch::setInputLeftConnection(Connection* inputLeftConnection)$/;"	f	class:ASwitch	typeref:typename:void
setInputLeftConnection	src/FEASwitch.cpp	/^void FEASwitch::setInputLeftConnection(Connection* inputLeftConnection) {$/;"	f	class:FEASwitch	typeref:typename:void
setInputRightConnection	src/ASwitch.cpp	/^void ASwitch::setInputRightConnection(Connection* inputRightConnection)$/;"	f	class:ASwitch	typeref:typename:void
setInputRightConnection	src/FEASwitch.cpp	/^void FEASwitch::setInputRightConnection(Connection* inputRightConnection) {$/;"	f	class:FEASwitch	typeref:typename:void
setIterationK	src/DataPackage.cpp	/^void DataPackage::setIterationK(unsigned int iteration_k) {$/;"	f	class:DataPackage	typeref:typename:void
setLayer	include/MemoryController.h	/^    virtual void setLayer(DNNLayer* dnn_layer,  address_t input_address, address_t filter_addres/;"	f	class:MemoryController	typeref:typename:void
setLayer	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::setLayer(DNNLayer* dnn_layer, address_t MK_address, address_t KN_address, a/;"	f	class:OSMeshSDMemory	typeref:typename:void
setLayer	src/SDMemory.cpp	/^void SDMemory::setLayer(DNNLayer* dnn_layer, address_t input_address, address_t filter_address, /;"	f	class:SDMemory	typeref:typename:void
setLayer	src/SparseSDMemory.cpp	/^void SparseSDMemory::setLayer(DNNLayer* dnn_layer, address_t MK_address, address_t KN_address, a/;"	f	class:SparseSDMemory	typeref:typename:void
setLeftConnection	src/DSwitch.cpp	/^void DSwitch::setLeftConnection(Connection *leftConnection) {$/;"	f	class:DSwitch	typeref:typename:void
setLeftConnection	src/MultiplierOS.cpp	/^void MultiplierOS::setLeftConnection(Connection* left_connection) { $/;"	f	class:MultiplierOS	typeref:typename:void
setMemoryConnection	src/ASwitch.cpp	/^void ASwitch::setMemoryConnection(Connection* memoryConnection,$/;"	f	class:ASwitch	typeref:typename:void
setMemoryConnection	src/FEASwitch.cpp	/^void FEASwitch::setMemoryConnection(Connection* memoryConnection, unsigned int busID, unsigned i/;"	f	class:FEASwitch	typeref:typename:void
setMemoryConnections	include/ReduceNetwork.h	/^    virtual void setMemoryConnections(std::vector<std::vector<Connection*>> memoryConnections) {/;"	f	class:ReduceNetwork	typeref:typename:void
setMemoryConnections	src/ASNetwork.cpp	/^void ASNetwork::setMemoryConnections(std::vector<std::vector<Connection*>>  memoryConnections) {$/;"	f	class:ASNetwork	typeref:typename:void
setMemoryConnections	src/AccumulationBuffer.cpp	/^void AccumulationBuffer::setMemoryConnections(std::vector<Connection*>  memoryConnections) {$/;"	f	class:AccumulationBuffer	typeref:typename:void
setMemoryConnections	src/FENetwork.cpp	/^void FENetwork::setMemoryConnections(std::vector<std::vector<Connection*>>  memoryConnections) {$/;"	f	class:FENetwork	typeref:typename:void
setMemoryConnections	src/TemporalRN.cpp	/^void TemporalRN::setMemoryConnections(std::vector<std::vector<Connection*>>  memoryConnections) /;"	f	class:TemporalRN	typeref:typename:void
setMultiplierNetwork	include/MemoryController.h	/^    virtual void setMultiplierNetwork(MultiplierNetwork* multiplier_network) {assert(false);} $/;"	f	class:MemoryController	typeref:typename:void
setMultiplierNetwork	include/OSMeshSDMemory.h	/^    void setMultiplierNetwork(MultiplierNetwork* multiplier_network) {this->multiplier_network =/;"	f	class:OSMeshSDMemory	typeref:typename:void
setMultiplierNetwork	include/SDMemory.h	/^    void setMultiplierNetwork(MultiplierNetwork* multiplier_network) {this->multiplier_network =/;"	f	class:SDMemory	typeref:typename:void
setMultiplierNetwork	include/SparseSDMemory.h	/^    void setMultiplierNetwork(MultiplierNetwork* multiplier_network) {this->multiplier_network =/;"	f	class:SparseSDMemory	typeref:typename:void
setNFolding	src/MSwitch.cpp	/^void MSwitch::setNFolding(unsigned int n_folding)$/;"	f	class:MSwitch	typeref:typename:void
setNPSums	include/FEASwitch.h	/^    void setNPSums(unsigned int n_psums) {this->n_psums=n_psums;}$/;"	f	class:FEASwitch	typeref:typename:void
setNPSums	src/Accumulator.cpp	/^void Accumulator::setNPSums(unsigned int n_psums) {$/;"	f	class:Accumulator	typeref:typename:void
setNWindows	src/MSwitch.cpp	/^void MSwitch::setNWindows(unsigned int n_windows)$/;"	f	class:MSwitch	typeref:typename:void
setOperationMode	src/ASwitch.cpp	/^void ASwitch::setOperationMode(adderoperation_t operation_mode)$/;"	f	class:ASwitch	typeref:typename:void
setOperationMode	src/FEASwitch.cpp	/^void FEASwitch::setOperationMode(adderoperation_t operation_mode) {$/;"	f	class:FEASwitch	typeref:typename:void
setOutputConnection	include/ASNetwork.h	/^    void setOutputConnection(Connection* outputConnection)  { this->outputConnection = outputCon/;"	f	class:ASNetwork	typeref:typename:void
setOutputConnection	include/FENetwork.h	/^    void setOutputConnection(Connection* outputConnection)  { this->outputConnection = outputCon/;"	f	class:FENetwork	typeref:typename:void
setOutputConnection	include/ReduceNetwork.h	/^    virtual void setOutputConnection(Connection* outputConnection)  {assert(false);} \/\/This fu/;"	f	class:ReduceNetwork	typeref:typename:void
setOutputConnection	include/TemporalRN.h	/^    void setOutputConnection(Connection* outputConnection)  { this->outputConnection = outputCon/;"	f	class:TemporalRN	typeref:typename:void
setOutputConnection	src/ASwitch.cpp	/^void ASwitch::setOutputConnection(Connection* outputConnection)$/;"	f	class:ASwitch	typeref:typename:void
setOutputConnection	src/Accumulator.cpp	/^void Accumulator::setOutputConnection(Connection* outputConnection) {$/;"	f	class:Accumulator	typeref:typename:void
setOutputConnection	src/FEASwitch.cpp	/^void FEASwitch::setOutputConnection(Connection* outputConnection) {$/;"	f	class:FEASwitch	typeref:typename:void
setOutputConnection	src/MSwitch.cpp	/^void MSwitch::setOutputConnection(Connection* outputConnection)$/;"	f	class:MSwitch	typeref:typename:void
setOutputConnections	include/MultiplierNetwork.h	/^    virtual void setOutputConnections(std::map<int, Connection*> output_connections) {assert(fal/;"	f	class:MultiplierNetwork	typeref:typename:void
setOutputConnections	src/MSNetwork.cpp	/^void MSNetwork::setOutputConnections($/;"	f	class:MSNetwork	typeref:typename:void
setOutputConnections	src/OSMeshMN.cpp	/^void OSMeshMN::setOutputConnections(std::map<int, Connection*> output_connections) {$/;"	f	class:OSMeshMN	typeref:typename:void
setOutputForwardingConnection	src/MSwitch.cpp	/^void MSwitch::setOutputForwardingConnection($/;"	f	class:MSwitch	typeref:typename:void
setOutputForwardingEnabled	src/MSwitch.cpp	/^void MSwitch::setOutputForwardingEnabled(bool outputForwardingEnabled)$/;"	f	class:MSwitch	typeref:typename:void
setOutputPort	src/DataPackage.cpp	/^void DataPackage::setOutputPort(unsigned int output_port) {$/;"	f	class:DataPackage	typeref:typename:void
setPhysicalConnection	src/MSNetwork.cpp	/^void MSNetwork::setPhysicalConnection()$/;"	f	class:MSNetwork	typeref:typename:void
setPhysicalConnection	src/OSMeshMN.cpp	/^void OSMeshMN::setPhysicalConnection() {$/;"	f	class:OSMeshMN	typeref:typename:void
setReadConnections	include/MemoryController.h	/^    virtual void setReadConnections(std::vector<Connection*> read_connections) {assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
setReadConnections	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::setReadConnections(std::vector<Connection*> read_connections) {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
setReadConnections	src/SDMemory.cpp	/^void SDMemory::setReadConnections(std::vector<Connection*> read_connections) {$/;"	f	class:SDMemory	typeref:typename:void
setReadConnections	src/SparseSDMemory.cpp	/^void SparseSDMemory::setReadConnections(std::vector<Connection*> read_connections) {$/;"	f	class:SparseSDMemory	typeref:typename:void
setReduceNetwork	include/MemoryController.h	/^    virtual void setReduceNetwork(ReduceNetwork* reduce_network) {assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
setReduceNetwork	include/OSMeshSDMemory.h	/^    void setReduceNetwork(ReduceNetwork* reduce_network) {this->reduce_network=reduce_network;}$/;"	f	class:OSMeshSDMemory	typeref:typename:void
setReduceNetwork	include/SDMemory.h	/^    void setReduceNetwork(ReduceNetwork* reduce_network) {this->reduce_network=reduce_network;}$/;"	f	class:SDMemory	typeref:typename:void
setReduceNetwork	include/SparseSDMemory.h	/^    void setReduceNetwork(ReduceNetwork* reduce_network) {this->reduce_network=reduce_network;}$/;"	f	class:SparseSDMemory	typeref:typename:void
setRightConnection	src/DSwitch.cpp	/^void DSwitch::setRightConnection(Connection *rightConnection) {$/;"	f	class:DSwitch	typeref:typename:void
setRightConnection	src/MultiplierOS.cpp	/^void MultiplierOS::setRightConnection(Connection* right_connection) { \/\/Set the right connecti/;"	f	class:MultiplierOS	typeref:typename:void
setSparseMatrixMetadata	include/MemoryController.h	/^    virtual void setSparseMatrixMetadata(metadata_address_t MK_metadata_id, metadata_address_t M/;"	f	class:MemoryController	typeref:typename:void
setSparseMatrixMetadata	include/OSMeshSDMemory.h	/^    void setSparseMatrixMetadata(metadata_address_t MK_metadata_id, metadata_address_t MK_metada/;"	f	class:OSMeshSDMemory	typeref:typename:void
setSparseMetadata	include/MemoryController.h	/^    virtual void setSparseMetadata(metadata_address_t MK_metadata, metadata_address_t KN_metadat/;"	f	class:MemoryController	typeref:typename:void
setSparseMetadata	include/SDMemory.h	/^    void setSparseMetadata(metadata_address_t MK_metadata, metadata_address_t KN_metadata, metad/;"	f	class:SDMemory	typeref:typename:void
setSparseMetadata	src/SparseSDMemory.cpp	/^void SparseSDMemory::setSparseMetadata(metadata_address_t MK_metadata, metadata_address_t KN_met/;"	f	class:SparseSDMemory	typeref:typename:void
setTile	include/MemoryController.h	/^    virtual void setTile(Tile* current_tile) {assert(false);}$/;"	f	class:MemoryController	typeref:typename:void
setTile	include/SparseSDMemory.h	/^    void setTile(Tile* current_tile) {assert(false);}$/;"	f	class:SparseSDMemory	typeref:typename:void
setTile	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::setTile(Tile* current_tile)$/;"	f	class:OSMeshSDMemory	typeref:typename:void
setTile	src/SDMemory.cpp	/^void SDMemory::setTile(Tile* current_tile) {$/;"	f	class:SDMemory	typeref:typename:void
setTopConnection	src/MultiplierOS.cpp	/^void MultiplierOS::setTopConnection(Connection* top_connection) {$/;"	f	class:MultiplierOS	typeref:typename:void
setUpNodeForwardingConnection	src/FEASwitch.cpp	/^void FEASwitch::setUpNodeForwardingConnection(Connection* upNodeForwardingConnection) {         /;"	f	class:FEASwitch	typeref:typename:void
setVirtualNeuron	src/MSwitch.cpp	/^void MSwitch::setVirtualNeuron(unsigned int VN)$/;"	f	class:MSwitch	typeref:typename:void
setVirtualNeuron	src/MultiplierOS.cpp	/^void MultiplierOS::setVirtualNeuron(unsigned int VN) {$/;"	f	class:MultiplierOS	typeref:typename:void
setWriteConnections	include/MemoryController.h	/^    virtual void setWriteConnections(std::vector<Connection*> write_port_connections) {assert(fa/;"	f	class:MemoryController	typeref:typename:void
setWriteConnections	src/OSMeshSDMemory.cpp	/^void OSMeshSDMemory::setWriteConnections(std::vector<Connection*> write_port_connections) {$/;"	f	class:OSMeshSDMemory	typeref:typename:void
setWriteConnections	src/SDMemory.cpp	/^void SDMemory::setWriteConnections(std::vector<Connection*> write_port_connections) {$/;"	f	class:SDMemory	typeref:typename:void
setWriteConnections	src/SparseSDMemory.cpp	/^void SparseSDMemory::setWriteConnections(std::vector<Connection*> write_port_connections) {$/;"	f	class:SparseSDMemory	typeref:typename:void
signals_configured	include/CompilerComponent.h	/^    bool signals_configured;$/;"	m	class:CompilerComponent	typeref:typename:bool
simulateDenseConvForward	stonne_linker_src/stonne_linker.cpp	/^void simulateDenseConvForward(std::string layer_name,$/;"	f	typeref:typename:void
simulateDenseGemmForward	stonne_linker_src/stonne_linker.cpp	/^void simulateDenseGemmForward(std::string layer_name,$/;"	f	typeref:typename:void
simulateSparseGemmForward	stonne_linker_src/stonne_linker.cpp	/^void simulateSparseGemmForward(std::string layer_name,$/;"	f	typeref:typename:void
simulateSparseGemmWithBitmapsForward	stonne_linker_src/stonne_linker.cpp	/^void simulateSparseGemmWithBitmapsForward(std::string layer_name,$/;"	f	typeref:typename:void
single_switches	include/ASNetwork.h	/^    std::vector<ASwitch*> single_switches; \/\/List of switches that are single reduction switch/;"	m	class:ASNetwork	typeref:typename:std::vector<ASwitch * >
single_switches	include/FENetwork.h	/^    std::vector<FEASwitch*> single_switches; \/\/List of switches that are single reduction swit/;"	m	class:FENetwork	typeref:typename:std::vector<FEASwitch * >
singlehmdp	include/define.h	/^  singlehmdp = 5,$/;"	e	enum:ConfigType
size	include/Tile.h	/^    unsigned int size;$/;"	m	class:SparseVN	typeref:typename:unsigned int
size	src/Fifo.cpp	/^unsigned int Fifo::size() {$/;"	f	class:Fifo	typeref:typename:unsigned int
size_package	include/DataPackage.h	/^    size_t size_package; \/\/Actual size of the package. This just accounts for the truly data t/;"	m	class:DataPackage	typeref:typename:size_t
size_type	external/cpptoml.h	/^    using size_type = std::size_t;$/;"	t	class:cpptoml::array	typeref:typename:std::size_t
size_type	external/cpptoml.h	/^    using size_type = std::size_t;$/;"	t	class:cpptoml::table_array	typeref:typename:std::size_t
skip_whitespace_and_comments	external/cpptoml.h	/^    void skip_whitespace_and_comments(std::string::iterator& start,$/;"	f	class:cpptoml::parser	typeref:typename:void
source	include/DataPackage.h	/^    id_t source; \/\/Source that sent the package$/;"	m	class:DataPackage	typeref:typename:id_t
sparseVNs	include/CompilerComponent.h	/^    std::vector<SparseVN> sparseVNs;$/;"	m	class:CompilerComponent	typeref:typename:std::vector<SparseVN>
sparsitySupportEnabled	src/Config.cpp	/^bool Config::sparsitySupportEnabled() {$/;"	f	class:Config	typeref:typename:bool
split	external/cpptoml.h	/^    std::vector<std::string> split(const std::string& value,$/;"	f	class:cpptoml::table	typeref:typename:std::vector<std::string>
sta_counters_table	include/SparseSDMemory.h	/^    unsigned int* sta_counters_table; \/\/Matrix of size rows*columns to figure out the dst of e/;"	m	class:SparseSDMemory	typeref:typename:unsigned int *
sta_current_index_matrix	include/SparseSDMemory.h	/^    unsigned int sta_current_index_matrix; \/\/Index to next element in the sparse matrix$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
sta_current_index_metadata	include/SparseSDMemory.h	/^    unsigned int sta_current_index_metadata; \/\/Stationary matrix current index (e.g., row in M/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
sta_current_j_metadata	include/SparseSDMemory.h	/^    unsigned int sta_current_j_metadata; \/\/Index to current element in the same cluster. Used /;"	m	class:SparseSDMemory	typeref:typename:unsigned int
sta_iter_completed	include/SparseSDMemory.h	/^    bool sta_iter_completed; \/\/Indicates if the pending psums have been writen back$/;"	m	class:SparseSDMemory	typeref:typename:bool
sta_last_j_metadata	include/SparseSDMemory.h	/^    unsigned int sta_last_j_metadata;  \/\/Indext to last element in the same cluster. Used to m/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
sta_sparsity	include/Stats.h	/^    counter_t sta_sparsity;                                      \/\/Exent of sparsity sta matri/;"	m	class:SDMemoryStats	typeref:typename:counter_t
stationary_distributed	include/SparseSDMemory.h	/^    bool stationary_distributed; \/\/Indicates if the stationary values has been distributed for/;"	m	class:SparseSDMemory	typeref:typename:bool
stationary_finished	include/SparseSDMemory.h	/^    bool stationary_finished; \/\/Flag that indicates that all the stationary values have been d/;"	m	class:SparseSDMemory	typeref:typename:bool
stonne_cfg	include/ASNetwork.h	/^    Config stonne_cfg;$/;"	m	class:ASNetwork	typeref:typename:Config
stonne_cfg	include/STONNEModel.h	/^    Config stonne_cfg;$/;"	m	class:Stonne	typeref:typename:Config
stonne_cfg	include/TemporalRN.h	/^    Config stonne_cfg;$/;"	m	class:TemporalRN	typeref:typename:Config
str_counters_table	include/SparseSDMemory.h	/^    unsigned int* str_counters_table; \/\/Matrix of size rows*columns of the str matrix to calcu/;"	m	class:SparseSDMemory	typeref:typename:unsigned int *
str_current_index	include/SparseSDMemory.h	/^    unsigned int str_current_index; \/\/Streaming current index to calculate the next values to /;"	m	class:SparseSDMemory	typeref:typename:unsigned int
str_sparsity	include/Stats.h	/^    counter_t str_sparsity;                                      \/\/Exent of sparsity str matri/;"	m	class:SDMemoryStats	typeref:typename:counter_t
stream_	external/cpptoml.h	/^    std::ostream& stream_;$/;"	m	class:cpptoml::toml_writer	typeref:typename:std::ostream &
stream_finished	include/SparseSDMemory.h	/^    bool stream_finished;  \/\/Flag that indicates that all the streaming values have been deliv/;"	m	class:SparseSDMemory	typeref:typename:bool
strides	include/DNNLayer.h	/^    unsigned int strides;     \/\/ Strides$/;"	m	class:DNNLayer	typeref:typename:unsigned int
string_literal	external/cpptoml.h	/^    std::string string_literal(std::string::iterator& it,$/;"	f	class:cpptoml::parser	typeref:typename:std::string
string_to_base_map	external/cpptoml.h	/^using string_to_base_map = std::map<std::string, std::shared_ptr<base>>;$/;"	t	namespace:cpptoml	typeref:typename:std::map<std::string,std::shared_ptr<base>>
string_to_base_map	external/cpptoml.h	/^using string_to_base_map$/;"	t	namespace:cpptoml	typeref:typename:std::unordered_map<std::string,std::shared_ptr<base>>
switches_configuration	include/CompilerART.h	/^    std::map<std::pair<int,int>, adderconfig_t> switches_configuration; \/\/Adders configuration$/;"	m	class:CompilerART	typeref:typename:std::map<std::pair<int,int>,adderconfig_t>
switches_configuration	include/CompilerFEN.h	/^    std::map<std::pair<int,int>, adderconfig_t> switches_configuration; \/\/Adders configuration$/;"	m	class:CompilerFEN	typeref:typename:std::map<std::pair<int,int>,adderconfig_t>
table	external/cpptoml.h	/^    table() : base(base_type::TABLE)$/;"	f	class:cpptoml::table
table	external/cpptoml.h	/^class table : public base$/;"	c	namespace:cpptoml
table_array	external/cpptoml.h	/^    table_array(bool is_inline = false)$/;"	f	class:cpptoml::table_array
table_array	external/cpptoml.h	/^class table_array : public base$/;"	c	namespace:cpptoml
temporal_register	include/Accumulator.h	/^    DataPackage* temporal_register; \/\/Temporal register to accumulate partial sums$/;"	m	class:Accumulator	typeref:typename:DataPackage *
temporal_register	include/FEASwitch.h	/^    DataPackage* temporal_register; \/\/Temporal register to accumulate partial sums$/;"	m	class:FEASwitch	typeref:typename:DataPackage *
testDSNetwork	src/STONNEModel.cpp	/^void Stonne::testDSNetwork(unsigned int num_ms) {$/;"	f	class:Stonne	typeref:typename:void
testMemory	src/STONNEModel.cpp	/^void Stonne::testMemory(unsigned int num_ms) {$/;"	f	class:Stonne	typeref:typename:void
testTile	src/STONNEModel.cpp	/^void Stonne::testTile(unsigned int num_ms) {$/;"	f	class:Stonne	typeref:typename:void
throw_parse_exception	external/cpptoml.h	/^        void throw_parse_exception(const std::string& err)$/;"	f	class:cpptoml::parser	typeref:typename:(noreturn)void
tile_loaded	include/SDMemory.h	/^    bool tile_loaded; \/\/SPecify if the tile is loaded$/;"	m	class:SDMemory	typeref:typename:bool
tile_loaded	include/STONNEModel.h	/^    bool tile_loaded; $/;"	m	class:Stonne	typeref:typename:bool
time_as	include/STONNEModel.h	/^    unsigned long time_as;$/;"	m	class:Stonne	typeref:typename:unsigned long
time_ds	include/STONNEModel.h	/^    unsigned long time_ds;$/;"	m	class:Stonne	typeref:typename:unsigned long
time_lt	include/STONNEModel.h	/^    unsigned long time_lt;$/;"	m	class:Stonne	typeref:typename:unsigned long
time_mem	include/STONNEModel.h	/^    unsigned long time_mem;$/;"	m	class:Stonne	typeref:typename:unsigned long
time_ms	include/STONNEModel.h	/^    unsigned long time_ms;$/;"	m	class:Stonne	typeref:typename:unsigned long
time_routing	include/DSwitch.h	/^    unsigned long time_routing;$/;"	m	class:DSwitch	typeref:typename:unsigned long
toml_writer	external/cpptoml.h	/^    toml_writer(std::ostream& s, const std::string& indent_space = "\\t")$/;"	f	class:cpptoml::toml_writer
toml_writer	external/cpptoml.h	/^class toml_writer$/;"	c	namespace:cpptoml
top_connection	include/MultiplierOS.h	/^    Connection* top_connection; \/\/To the top neighbour or the memory port$/;"	m	class:MultiplierOS	typeref:typename:Connection *
top_fifo	include/MultiplierOS.h	/^    Fifo* top_fifo;   \/\/ Packages received from top (i.e., weights)$/;"	m	class:MultiplierOS	typeref:typename:Fifo *
totalCycles	include/Component.h	/^    cycles_t totalCycles;       \/\/ Amount of total cycles. This includes idleCycles.$/;"	m	class:Component	typeref:typename:cycles_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;                                      \/\/N cycles $/;"	m	class:CollectionBusLineStats	typeref:typename:counter_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;                                      \/\/N cycles $/;"	m	class:SDMemoryStats	typeref:typename:counter_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;                             \/\/N cycles $/;"	m	class:ASwitchStats	typeref:typename:counter_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;                             \/\/N cycles$/;"	m	class:AccumulatorStats	typeref:typename:counter_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;$/;"	m	class:DSwitchStats	typeref:typename:counter_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;$/;"	m	class:MSwitchStats	typeref:typename:counter_t
total_cycles	include/Stats.h	/^    counter_t total_cycles;$/;"	m	class:MultiplierOSStats	typeref:typename:counter_t
traffic_t	include/types.h	/^enum traffic_t {BROADCAST, MULTICAST, UNICAST};$/;"	g
traffic_type	include/DataPackage.h	/^    traffic_t traffic_type; \/\/ IF UNICAST dest is unicast_dest. If multicast, dest is indicate/;"	m	class:DataPackage	typeref:typename:traffic_t
type	external/cpptoml.h	/^    base_type type() const$/;"	f	class:cpptoml::base	typeref:typename:base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::ARRAY;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::BOOL;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::FLOAT;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::INT;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::LOCAL_DATE;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::LOCAL_DATETIME;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::LOCAL_TIME;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::OFFSET_DATETIME;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::STRING;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::TABLE;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    static const base_type type = base_type::TABLE_ARRAY;$/;"	m	struct:cpptoml::base_type_traits	typeref:typename:const base_type
type	external/cpptoml.h	/^    using type = value<double>;$/;"	t	struct:cpptoml::value_traits	typeref:typename:value<double>
type	external/cpptoml.h	/^    using type = value<int64_t>;$/;"	t	struct:cpptoml::value_traits	typeref:typename:value<int64_t>
type	external/cpptoml.h	/^    using type = value<value_type>;$/;"	t	struct:cpptoml::value_traits	typeref:typename:value<value_type>
type_	external/cpptoml.h	/^    const base_type type_ = base_type::NONE;$/;"	m	class:cpptoml::base	typeref:typename:const base_type
unicast_dest	include/DataPackage.h	/^    unsigned int unicast_dest; \/\/Indicates the destination in case of unicast package$/;"	m	class:DataPackage	typeref:typename:unsigned int
upNodeForwardingConnection	include/FEASwitch.h	/^    Connection* upNodeForwardingConnection;              \/\/Connection to forward the psum to t/;"	m	class:FEASwitch	typeref:typename:Connection *
update	src/SDMemory.cpp	/^void VNAT_Register::update() {$/;"	f	class:VNAT_Register	typeref:typename:void
valid_value	external/cpptoml.h	/^struct valid_value$/;"	s	namespace:cpptoml
valid_value_or_string_convertible	external/cpptoml.h	/^struct valid_value_or_string_convertible$/;"	s	namespace:cpptoml
value	external/cpptoml.h	/^    const static bool value = valid_value<typename std::decay<T>::type>::value$/;"	m	struct:cpptoml::valid_value_or_string_convertible	typeref:typename:const bool
value	external/cpptoml.h	/^    const static bool value$/;"	m	struct:cpptoml::is_one_of	typeref:typename:const bool
value	external/cpptoml.h	/^    value(const T& val) : base(base_type_traits<T>::type), data_(val)$/;"	f	class:cpptoml::value
value	external/cpptoml.h	/^    value(const T& val) : data_(val)$/;"	f	class:cpptoml::value
value	external/cpptoml.h	/^    value(const make_shared_enabler&, const T& val) : value(val)$/;"	f	class:cpptoml::value
value	external/cpptoml.h	/^class value : public base$/;"	c	namespace:cpptoml
value_	external/cpptoml.h	/^    T value_;$/;"	m	class:cpptoml::option	typeref:typename:T
value_accept	external/cpptoml.h	/^struct value_accept<>$/;"	s	namespace:cpptoml
value_accept	external/cpptoml.h	/^struct value_accept<T, Ts...>$/;"	s	namespace:cpptoml
value_acceptor	external/cpptoml.h	/^        using value_acceptor$/;"	t	function:cpptoml::base::accept	typeref:typename:value_accept<std::string,int64_t,double,bool,local_date,local_time,local_datetime,offset_datetime>
value_or	external/cpptoml.h	/^    T value_or(U&& alternative) const$/;"	f	class:cpptoml::option	typeref:typename:T
value_traits	external/cpptoml.h	/^struct value_traits<$/;"	s	namespace:cpptoml
value_traits	external/cpptoml.h	/^struct value_traits<T, typename std::enable_if<$/;"	s	namespace:cpptoml
value_type	external/cpptoml.h	/^    using value_type = int64_t;$/;"	t	struct:cpptoml::value_traits	typeref:typename:int64_t
value_type	external/cpptoml.h	/^    using value_type = typename std::conditional<$/;"	t	struct:cpptoml::value_traits
value_type	external/cpptoml.h	/^    using value_type = typename std::decay<T>::type;$/;"	t	struct:cpptoml::value_traits	typeref:typename:std::decay<T>::type
value_type	external/cpptoml.h	/^    using value_type = typename value_traits<T>::type;$/;"	t	function:cpptoml::make_value	typeref:typename:value_traits<T>::type
values_	external/cpptoml.h	/^    std::vector<std::shared_ptr<base>> values_;$/;"	m	class:cpptoml::array	typeref:typename:std::vector<std::shared_ptr<base>>
verticalconnectiontable	include/OSMeshMN.h	/^    std::map<std::pair<int, int>,  Connection*> verticalconnectiontable; \/\/Table with the vert/;"	m	class:OSMeshMN	typeref:typename:std::map<std::pair<int,int>,Connection * >
virtualNetworkConfig	src/MSNetwork.cpp	/^void MSNetwork::virtualNetworkConfig($/;"	f	class:MSNetwork	typeref:typename:void
visit	external/cpptoml.h	/^    void visit(const array& a, bool = false)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
visit	external/cpptoml.h	/^    void visit(const table& t, bool in_array = false)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
visit	external/cpptoml.h	/^    void visit(const table_array& t, bool = false)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
visit	external/cpptoml.h	/^    void visit(const value<T>& v, bool = false)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
vnat_table	include/OSMeshSDMemory.h	/^    std::vector<unsigned int> vnat_table; \/\/Every element is a VN, indicating the column that /;"	m	class:OSMeshSDMemory	typeref:typename:std::vector<unsigned int>
vnat_table	include/SparseSDMemory.h	/^    std::vector<unsigned int> vnat_table; \/\/Every element is a VN, indicating the column that /;"	m	class:SparseSDMemory	typeref:typename:std::vector<unsigned int>
weight_fifo	include/MSwitch.h	/^  Fifo* weight_fifo; \/\/ Weights stored in the MS$/;"	m	class:MSwitch	typeref:typename:Fifo *
weights_distributed	include/SDMemory.h	/^    bool weights_distributed; \/\/Indicates if the weights have been distributed for a certain i/;"	m	class:SDMemory	typeref:typename:bool
weights_finished	include/SDMemory.h	/^    bool weights_finished; \/\/Flag that indicates that all the weights have been delivered$/;"	m	class:SDMemory	typeref:typename:bool
window_stride	include/DNNModel.h	/^  int window_stride;$/;"	m	class:CNNFilter	typeref:typename:int
word_size	include/types.h	/^#define word_size /;"	d
write	external/cpptoml.h	/^    void write(const T& v)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
write	external/cpptoml.h	/^    void write(const value<bool>& v)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
write	external/cpptoml.h	/^    void write(const value<double>& v)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
write	external/cpptoml.h	/^    void write(const value<std::string>& v)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
write	external/cpptoml.h	/^    write(const value<T>& v)$/;"	f	class:cpptoml::toml_writer	typeref:typename:std::enable_if<is_one_of<T,int64_t,local_date,local_time,local_datetime,offset_datetime>::value>::type
write_buffer_capacity	include/Config.h	/^    unsigned int write_buffer_capacity; \/\/Capacity of the buffers expressed in terms of number/;"	m	class:SDMemoryConfig	typeref:typename:unsigned int
write_buffer_capacity	include/OSMeshSDMemory.h	/^    unsigned int write_buffer_capacity;$/;"	m	class:OSMeshSDMemory	typeref:typename:unsigned int
write_buffer_capacity	include/SDMemory.h	/^    unsigned int write_buffer_capacity;$/;"	m	class:SDMemory	typeref:typename:unsigned int
write_buffer_capacity	include/SparseSDMemory.h	/^    unsigned int write_buffer_capacity;$/;"	m	class:SparseSDMemory	typeref:typename:unsigned int
write_connection	include/OSMeshSDMemory.h	/^    Connection* write_connection;$/;"	m	class:OSMeshSDMemory	typeref:typename:Connection *
write_connection	include/SDMemory.h	/^    Connection* write_connection;$/;"	m	class:SDMemory	typeref:typename:Connection *
write_connection	include/SparseSDMemory.h	/^    Connection* write_connection;$/;"	m	class:SparseSDMemory	typeref:typename:Connection *
write_fifo	include/OSMeshSDMemory.h	/^    Fifo* write_fifo; \/\/Fifo uses to store the writes before going to the memory$/;"	m	class:OSMeshSDMemory	typeref:typename:Fifo *
write_fifo	include/SDMemory.h	/^    Fifo* write_fifo; \/\/Fifo uses to store the writes before going to the memory$/;"	m	class:SDMemory	typeref:typename:Fifo *
write_fifo	include/SparseSDMemory.h	/^    Fifo* write_fifo; \/\/Fifo uses to store the writes before going to the memory$/;"	m	class:SparseSDMemory	typeref:typename:Fifo *
write_port_connections	include/OSMeshSDMemory.h	/^   std::vector<Connection*> write_port_connections; $/;"	m	class:OSMeshSDMemory	typeref:typename:std::vector<Connection * >
write_port_connections	include/SDMemory.h	/^   std::vector<Connection*> write_port_connections; $/;"	m	class:SDMemory	typeref:typename:std::vector<Connection * >
write_port_connections	include/SparseSDMemory.h	/^   std::vector<Connection*> write_port_connections; $/;"	m	class:SparseSDMemory	typeref:typename:std::vector<Connection * >
write_table_header	external/cpptoml.h	/^    void write_table_header(bool in_array = false)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
write_table_item_header	external/cpptoml.h	/^    void write_table_item_header(const base& b)$/;"	f	class:cpptoml::toml_writer	typeref:typename:void
year	external/cpptoml.h	/^    int year = 0;$/;"	m	struct:cpptoml::local_date	typeref:typename:int
zone_offset	external/cpptoml.h	/^struct zone_offset$/;"	s	namespace:cpptoml
~ASNetwork	src/ASNetwork.cpp	/^ASNetwork::~ASNetwork() {$/;"	f	class:ASNetwork
~ASwitch	src/ASwitch.cpp	/^ASwitch::~ASwitch()$/;"	f	class:ASwitch
~AccumulationBuffer	src/AccumulationBuffer.cpp	/^AccumulationBuffer::~AccumulationBuffer() {$/;"	f	class:AccumulationBuffer
~Accumulator	src/Accumulator.cpp	/^Accumulator::~Accumulator() {$/;"	f	class:Accumulator
~Bus	src/CollectionBus.cpp	/^Bus::~Bus() {$/;"	f	class:Bus
~CollectionBusLine	src/CollectionBusLine.cpp	/^CollectionBusLine::~CollectionBusLine() {$/;"	f	class:CollectionBusLine
~DSNetwork	src/DSNetwork.cpp	/^DSNetwork::~DSNetwork() {$/;"	f	class:DSNetwork
~DSNetworkTop	src/DSNetworkTop.cpp	/^DSNetworkTop::~DSNetworkTop() {$/;"	f	class:DSNetworkTop
~DataPackage	src/DataPackage.cpp	/^DataPackage::~DataPackage() {$/;"	f	class:DataPackage
~FEASwitch	src/FEASwitch.cpp	/^FEASwitch::~FEASwitch() {$/;"	f	class:FEASwitch
~FENetwork	src/FENetwork.cpp	/^FENetwork::~FENetwork() {$/;"	f	class:FENetwork
~MSNetwork	src/MSNetwork.cpp	/^MSNetwork::~MSNetwork()$/;"	f	class:MSNetwork
~MSwitch	src/MSwitch.cpp	/^MSwitch::~MSwitch()$/;"	f	class:MSwitch
~MultiplierOS	src/MultiplierOS.cpp	/^MultiplierOS::~MultiplierOS() {$/;"	f	class:MultiplierOS
~OSMeshMN	src/OSMeshMN.cpp	/^OSMeshMN::~OSMeshMN() {$/;"	f	class:OSMeshMN
~OSMeshSDMemory	src/OSMeshSDMemory.cpp	/^OSMeshSDMemory::~OSMeshSDMemory() {$/;"	f	class:OSMeshSDMemory
~SDMemory	src/SDMemory.cpp	/^SDMemory::~SDMemory() {$/;"	f	class:SDMemory
~SparseSDMemory	src/SparseSDMemory.cpp	/^SparseSDMemory::~SparseSDMemory() {$/;"	f	class:SparseSDMemory
~Stonne	src/STONNEModel.cpp	/^Stonne::~Stonne() {$/;"	f	class:Stonne
~TemporalRN	src/TemporalRN.cpp	/^TemporalRN::~TemporalRN() {$/;"	f	class:TemporalRN
~fill_guard	external/cpptoml.h	/^    ~fill_guard()$/;"	f	class:cpptoml::fill_guard
